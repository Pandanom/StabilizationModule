
MPU6050_DMP6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  00004f6c  00005000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004f6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000224  00800172  00800172  00005072  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005072  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000050d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001308  00000000  00000000  00005110  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00023f72  00000000  00000000  00006418  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e36  00000000  00000000  0002a38a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008204  00000000  00000000  0002e1c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00004754  00000000  00000000  000363c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000085fa  00000000  00000000  0003ab18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001743a  00000000  00000000  00043112  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001340  00000000  00000000  0005a54c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__dtors_end>
       4:	0c 94 35 1b 	jmp	0x366a	; 0x366a <__vector_1>
       8:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <__vector_2>
       c:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__bad_interrupt>
      10:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__bad_interrupt>
      14:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__bad_interrupt>
      18:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__bad_interrupt>
      1c:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__bad_interrupt>
      20:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__bad_interrupt>
      24:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__bad_interrupt>
      28:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__bad_interrupt>
      2c:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__bad_interrupt>
      30:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__bad_interrupt>
      34:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__bad_interrupt>
      38:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__bad_interrupt>
      3c:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__bad_interrupt>
      40:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <__vector_16>
      44:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__bad_interrupt>
      48:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <__vector_18>
      4c:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__vector_19>
      50:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__bad_interrupt>
      54:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__bad_interrupt>
      58:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__bad_interrupt>
      5c:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__bad_interrupt>
      60:	0c 94 75 22 	jmp	0x44ea	; 0x44ea <__vector_24>
      64:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__trampolines_end>:
      96:	4e 41       	sbci	r20, 0x1E	; 30
      98:	4e 49       	Address 0x00000098 is out of bounds.
.word	0xffff	; ????

00000099 <pstr_inity>:
      99:	49 4e 49 54 59                                      INITY

0000009e <pstr_inf>:
      9e:	49 4e 46                                            INF

000000a1 <pwr_m10>:
      a1:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      b1:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000b9 <pwr_p10>:
      b9:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      c9:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000000d1 <_ZZ5setupE3__c_0>:
      d1:	29 00                                               ).

000000d3 <_ZZ5setupE3__c>:
      d3:	44 4d 50 20 49 6e 69 74 69 61 6c 69 7a 61 74 69     DMP Initializati
      e3:	6f 6e 20 66 61 69 6c 65 64 20 28 63 6f 64 65 20     on failed (code 
	...

000000f4 <_ZZ10updateDatavE3__c>:
      f4:	46 49 46 4f 20 6f 76 65 72 66 6c 6f 77 21 00        FIFO overflow!.

00000103 <_ZZN7MPU605013dmpInitializeEvE3__c_30>:
     103:	52 65 73 65 74 74 69 6e 67 20 46 49 46 4f 20 61     Resetting FIFO a
     113:	6e 64 20 63 6c 65 61 72 69 6e 67 20 49 4e 54 20     nd clearing INT 
     123:	73 74 61 74 75 73 20 6f 6e 65 20 6c 61 73 74 20     status one last 
     133:	74 69 6d 65 2e 2e 2e 00                             time....

0000013b <_ZZN7MPU605013dmpInitializeEvE3__c_29>:
     13b:	53 65 74 74 69 6e 67 20 75 70 20 69 6e 74 65 72     Setting up inter
     14b:	6e 61 6c 20 34 32 2d 62 79 74 65 20 28 64 65 66     nal 42-byte (def
     15b:	61 75 6c 74 29 20 44 4d 50 20 70 61 63 6b 65 74     ault) DMP packet
     16b:	20 62 75 66 66 65 72 2e 2e 2e 00                     buffer....

00000176 <_ZZN7MPU605013dmpInitializeEvE3__c_28>:
     176:	44 69 73 61 62 6c 69 6e 67 20 44 4d 50 20 28 79     Disabling DMP (y
     186:	6f 75 20 74 75 72 6e 20 69 74 20 6f 6e 20 6c 61     ou turn it on la
     196:	74 65 72 29 2e 2e 2e 00                             ter)....

0000019e <_ZZN7MPU605013dmpInitializeEvE3__c_27>:
     19e:	44 4d 50 20 69 73 20 67 6f 6f 64 20 74 6f 20 67     DMP is good to g
     1ae:	6f 21 20 46 69 6e 61 6c 6c 79 2e 00                 o! Finally..

000001ba <_ZZN7MPU605013dmpInitializeEvE3__c_26>:
     1ba:	52 65 73 65 74 74 69 6e 67 20 44 4d 50 2e 2e 2e     Resetting DMP...
	...

000001cb <_ZZN7MPU605013dmpInitializeEvE3__c_25>:
     1cb:	45 6e 61 62 6c 69 6e 67 20 46 49 46 4f 2e 2e 2e     Enabling FIFO...
	...

000001dc <_ZZN7MPU605013dmpInitializeEvE3__c_24>:
     1dc:	53 65 74 74 69 6e 67 20 7a 65 72 6f 2d 6d 6f 74     Setting zero-mot
     1ec:	69 6f 6e 20 64 65 74 65 63 74 69 6f 6e 20 64 75     ion detection du
     1fc:	72 61 74 69 6f 6e 20 74 6f 20 30 2e 2e 2e 00        ration to 0....

0000020b <_ZZN7MPU605013dmpInitializeEvE3__c_23>:
     20b:	53 65 74 74 69 6e 67 20 6d 6f 74 69 6f 6e 20 64     Setting motion d
     21b:	65 74 65 63 74 69 6f 6e 20 64 75 72 61 74 69 6f     etection duratio
     22b:	6e 20 74 6f 20 38 30 2e 2e 2e 00                    n to 80....

00000236 <_ZZN7MPU605013dmpInitializeEvE3__c_22>:
     236:	53 65 74 74 69 6e 67 20 7a 65 72 6f 2d 6d 6f 74     Setting zero-mot
     246:	69 6f 6e 20 64 65 74 65 63 74 69 6f 6e 20 74 68     ion detection th
     256:	72 65 73 68 6f 6c 64 20 74 6f 20 31 35 36 2e 2e     reshold to 156..
     266:	2e 00                                               ..

00000268 <_ZZN7MPU605013dmpInitializeEvE3__c_21>:
     268:	53 65 74 74 69 6e 67 20 6d 6f 74 69 6f 6e 20 64     Setting motion d
     278:	65 74 65 63 74 69 6f 6e 20 74 68 72 65 73 68 6f     etection thresho
     288:	6c 64 20 74 6f 20 32 2e 2e 2e 00                    ld to 2....

00000293 <_ZZN7MPU605013dmpInitializeEvE3__c_20>:
     293:	43 6c 65 61 72 69 6e 67 20 4f 54 50 20 42 61 6e     Clearing OTP Ban
     2a3:	6b 20 66 6c 61 67 2e 2e 2e 00                       k flag....

000002ad <_ZZN7MPU605013dmpInitializeEvE3__c_19>:
     2ad:	53 75 63 63 65 73 73 21 20 44 4d 50 20 63 6f 64     Success! DMP cod
     2bd:	65 20 77 72 69 74 74 65 6e 20 61 6e 64 20 76 65     e written and ve
     2cd:	72 69 66 69 65 64 2e 00                             rified..

000002d5 <_ZZN7MPU605013dmpInitializeEvE3__c_18>:
     2d5:	20 62 79 74 65 73 29 00                              bytes).

000002dd <_ZZN7MPU605013dmpInitializeEvE3__c_17>:
     2dd:	57 72 69 74 69 6e 67 20 44 4d 50 20 63 6f 64 65     Writing DMP code
     2ed:	20 74 6f 20 4d 50 55 20 6d 65 6d 6f 72 79 20 62      to MPU memory b
     2fd:	61 6e 6b 73 20 28 00                                anks (.

00000304 <_ZZN7MPU605013dmpInitializeEvE3__c_16>:
     304:	53 65 74 74 69 6e 67 20 67 79 72 6f 20 73 65 6e     Setting gyro sen
     314:	73 69 74 69 76 69 74 79 20 74 6f 20 2b 2f 2d 20     sitivity to +/- 
     324:	32 30 30 30 20 64 65 67 2f 73 65 63 2e 2e 2e 00     2000 deg/sec....

00000334 <_ZZN7MPU605013dmpInitializeEvE3__c_15>:
     334:	53 65 74 74 69 6e 67 20 44 4c 50 46 20 62 61 6e     Setting DLPF ban
     344:	64 77 69 64 74 68 20 74 6f 20 34 32 48 7a 2e 2e     dwidth to 42Hz..
     354:	2e 00                                               ..

00000356 <_ZZN7MPU605013dmpInitializeEvE3__c_14>:
     356:	53 65 74 74 69 6e 67 20 65 78 74 65 72 6e 61 6c     Setting external
     366:	20 66 72 61 6d 65 20 73 79 6e 63 20 74 6f 20 54      frame sync to T
     376:	45 4d 50 5f 4f 55 54 5f 4c 5b 30 5d 2e 2e 2e 00     EMP_OUT_L[0]....

00000386 <_ZZN7MPU605013dmpInitializeEvE3__c_13>:
     386:	53 65 74 74 69 6e 67 20 73 61 6d 70 6c 65 20 72     Setting sample r
     396:	61 74 65 20 74 6f 20 32 30 30 48 7a 2e 2e 2e 00     ate to 200Hz....

000003a6 <_ZZN7MPU605013dmpInitializeEvE3__c_12>:
     3a6:	53 65 74 74 69 6e 67 20 44 4d 50 20 61 6e 64 20     Setting DMP and 
     3b6:	46 49 46 4f 5f 4f 46 4c 4f 57 20 69 6e 74 65 72     FIFO_OFLOW inter
     3c6:	72 75 70 74 73 20 65 6e 61 62 6c 65 64 2e 2e 2e     rupts enabled...
	...

000003d7 <_ZZN7MPU605013dmpInitializeEvE3__c_11>:
     3d7:	53 65 74 74 69 6e 67 20 63 6c 6f 63 6b 20 73 6f     Setting clock so
     3e7:	75 72 63 65 20 74 6f 20 5a 20 47 79 72 6f 2e 2e     urce to Z Gyro..
     3f7:	2e 00                                               ..

000003f9 <_ZZN7MPU605013dmpInitializeEvE3__c_10>:
     3f9:	52 65 73 65 74 74 69 6e 67 20 49 32 43 20 4d 61     Resetting I2C Ma
     409:	73 74 65 72 20 63 6f 6e 74 72 6f 6c 2e 2e 2e 00     ster control....

00000419 <_ZZN7MPU605013dmpInitializeEvE3__c_9>:
     419:	53 65 74 74 69 6e 67 20 73 6c 61 76 65 20 30 20     Setting slave 0 
     429:	61 64 64 72 65 73 73 20 74 6f 20 30 78 36 38 20     address to 0x68 
     439:	28 73 65 6c 66 29 2e 2e 2e 00                       (self)....

00000443 <_ZZN7MPU605013dmpInitializeEvE3__c_8>:
     443:	44 69 73 61 62 6c 69 6e 67 20 49 32 43 20 4d 61     Disabling I2C Ma
     453:	73 74 65 72 20 6d 6f 64 65 2e 2e 2e 00              ster mode....

00000460 <_ZZN7MPU605013dmpInitializeEvE3__c_7>:
     460:	53 65 74 74 69 6e 67 20 73 6c 61 76 65 20 30 20     Setting slave 0 
     470:	61 64 64 72 65 73 73 20 74 6f 20 30 78 37 46 2e     address to 0x7F.
     480:	2e 2e 00                                            ...

00000483 <_ZZN7MPU605013dmpInitializeEvE3__c_6>:
     483:	69 6e 76 61 6c 69 64 21 00                          invalid!.

0000048c <_ZZN7MPU605013dmpInitializeEvE3__c_5>:
     48c:	76 61 6c 69 64 21 00                                valid!.

00000493 <_ZZN7MPU605013dmpInitializeEvE3__c_4>:
     493:	4f 54 50 20 62 61 6e 6b 20 69 73 20 00              OTP bank is .

000004a0 <_ZZN7MPU605013dmpInitializeEvE3__c_3>:
     4a0:	52 65 61 64 69 6e 67 20 4f 54 50 20 62 61 6e 6b     Reading OTP bank
     4b0:	20 76 61 6c 69 64 20 66 6c 61 67 2e 2e 2e 00         valid flag....

000004bf <_ZZN7MPU605013dmpInitializeEvE3__c_2>:
     4bf:	52 65 73 65 74 74 69 6e 67 20 6d 65 6d 6f 72 79     Resetting memory
     4cf:	20 62 61 6e 6b 20 73 65 6c 65 63 74 69 6f 6e 20      bank selection 
     4df:	74 6f 20 30 2e 2e 2e 00                             to 0....

000004e7 <_ZZN7MPU605013dmpInitializeEvE3__c_1>:
     4e7:	52 65 76 69 73 69 6f 6e 20 40 20 75 73 65 72 5b     Revision @ user[
     4f7:	31 36 5d 5b 36 5d 20 3d 20 00                       16][6] = .

00000501 <_ZZN7MPU605013dmpInitializeEvE3__c_0>:
     501:	43 68 65 63 6b 69 6e 67 20 68 61 72 64 77 61 72     Checking hardwar
     511:	65 20 72 65 76 69 73 69 6f 6e 2e 2e 2e 00           e revision....

0000051f <_ZZN7MPU605013dmpInitializeEvE3__c>:
     51f:	0a 0a 52 65 73 65 74 74 69 6e 67 20 4d 50 55 36     ..Resetting MPU6
     52f:	30 35 30 2e 2e 2e 00                                050....

00000536 <_ZL9dmpMemory>:
     536:	fb 00 00 3e 00 0b 00 36 00 01 00 02 00 03 00 00     ...>...6........
     546:	00 65 00 54 ff ef 00 00 fa 80 00 0b 12 82 00 01     .e.T............
     556:	00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     566:	00 28 00 00 ff ff 45 81 ff ff fa 72 00 00 00 00     .(....E....r....
     576:	00 00 03 e8 00 00 00 01 00 01 7f ff ff fe 80 01     ................
     586:	00 1b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     596:	00 40 00 00 40 00 00 00 02 cb 47 a2 20 00 00 00     .@..@.....G. ...
     5a6:	20 00 00 00 00 00 00 00 40 00 00 00 60 00 00 00      .......@...`...
     5b6:	41 ff 00 00 00 00 0b 2a 00 00 16 55 00 00 21 82     A......*...U..!.
     5c6:	fd 87 26 50 fd 80 00 00 00 1f 00 00 00 05 80 00     ..&P............
     5d6:	00 00 00 00 00 01 00 00 00 02 00 00 00 03 00 00     ................
     5e6:	40 00 00 00 00 00 04 6f 00 02 65 32 00 00 5e c0     @......o..e2..^.
     5f6:	40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     @...............
     606:	fb 8c 6f 5d fd 5d 08 d9 00 7c 73 3b 00 6c 12 cc     ..o].]...|s;.l..
     616:	32 00 13 9d 32 00 d0 d6 32 00 08 00 40 00 01 f4     2...2...2...@...
     626:	ff e6 80 79 02 00 00 00 00 00 d0 d6 00 00 27 10     ...y..........'.
     636:	fb 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00     ....@...........
     646:	00 00 00 01 00 00 00 00 00 00 01 00 01 00 00 00     ................
     656:	00 00 fa 36 ff bc 30 8e 00 05 fb f0 ff d9 5b c8     ...6..0.......[.
     666:	ff d0 9a be 00 00 10 a9 ff f4 1e b2 00 ce bb f7     ................
     676:	00 00 00 01 00 00 00 04 00 02 00 02 02 00 00 0c     ................
     686:	ff c2 80 00 00 01 80 00 00 cf 80 00 40 00 00 00     ............@...
	...
     69e:	00 00 06 00 00 00 00 14 00 00 00 00 00 00 00 00     ................
	...
     6c6:	09 23 a1 35 00 00 00 00 00 00 00 00 00 00 00 00     .#.5............
     6d6:	00 00 00 00 03 3f 68 b6 79 35 28 bc c6 7e d1 6c     .....?h.y5(..~.l
     6e6:	80 00 ff ff 40 00 00 00 00 00 b2 6a 00 00 00 00     ....@......j....
	...
     6fe:	00 00 3f f0 00 00 00 30 00 00 00 00 00 00 00 00     ..?....0........
	...
     722:	00 00 40 00 00 00 25 4d 00 2f 70 6d 00 00 05 ae     ..@...%M./pm....
     732:	00 0c 02 d0 00 00 00 00 00 65 00 54 ff ef 00 00     .........e.T....
     742:	00 00 00 00 00 00 01 00 00 44 00 01 00 05 8b c1     .........D......
     752:	00 00 01 00 00 00 00 00 00 65 00 00 00 54 00 00     .........e...T..
     762:	ff ef 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     796:	00 00 00 01 00 00 00 02 00 00 00 00 00 00 00 00     ................
	...
     7c6:	00 1b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     7f6:	00 1b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     836:	d8 dc ba a2 f1 de b2 b8 b4 a8 81 91 f7 4a 90 7f     .............J..
     846:	91 6a f3 f9 db a8 f9 b0 ba a0 80 f2 ce 81 f3 c2     .j..............
     856:	f1 c1 f2 c3 f3 cc a2 b2 80 f1 c6 d8 80 ba a7 df     ................
     866:	df df f2 a7 c3 cb c5 b6 f0 87 a2 94 24 48 70 3c     ............$Hp<
     876:	95 40 68 34 58 9b 78 a2 f1 83 92 2d 55 7d d8 b1     .@h4X.x....-U}..
     886:	b4 b8 a1 d0 91 80 f2 70 f3 70 f2 7c 80 a8 f1 01     .......p.p.|....
     896:	b0 98 87 d9 43 d8 86 c9 88 ba a1 f2 0e b8 97 80     ....C...........
     8a6:	f1 a9 df df df aa df df df f2 aa 4c cd 6c a9 0c     ...........L.l..
     8b6:	c9 2c 97 97 97 97 f1 a9 89 26 46 66 b0 b4 ba 80     .,.......&Ff....
     8c6:	ac de f2 ca f1 b2 8c 02 a9 b6 98 00 89 0e 16 1e     ................
     8d6:	b8 a9 b4 99 2c 54 7c b0 8a a8 96 36 56 76 f1 b9     ....,T|....6Vv..
     8e6:	af b4 b0 83 c0 b8 a8 97 11 b1 8f 98 b9 af f0 24     ...............$
     8f6:	08 44 10 64 18 f1 a3 29 55 7d af 83 b5 93 af f0     .D.d...)U}......
     906:	00 28 50 f1 a3 86 9f 61 a6 da de df d9 fa a3 86     .(P....a........
     916:	96 db 31 a6 d9 f8 df ba a6 8f c2 c5 c7 b2 8c c1     ..1.............
     926:	b8 a2 df df df a3 df df df d8 d8 f1 b8 a8 b2 86     ................
     936:	b4 98 0d 35 5d b8 aa 98 b0 87 2d 35 3d b2 b6 ba     ...5].....-5=...
     946:	af 8c 96 19 8f 9f a7 0e 16 1e b4 9a b8 aa 87 2c     ...............,
     956:	54 7c b9 a3 de df df a3 b1 80 f2 c4 cd c9 f1 b8     T|..............
     966:	a9 b4 99 83 0d 35 5d 89 b9 a3 2d 55 7d b5 93 a3     .....5]...-U}...
     976:	0e 16 1e a9 2c 54 7c b8 b4 b0 f1 97 83 a8 11 84     ....,T|.........
     986:	a5 09 98 a3 83 f0 da 24 08 44 10 64 18 d8 f1 a5     .......$.D.d....
     996:	29 55 7d a5 85 95 02 1a 2e 3a 56 5a 40 48 f9 f3     )U}......:VZ@H..
     9a6:	a3 d9 f8 f0 98 83 24 08 44 10 64 18 97 82 a8 f1     ......$.D.d.....
     9b6:	11 f0 98 a2 24 08 44 10 64 18 da f3 de d8 83 a5     ....$.D.d.......
     9c6:	94 01 d9 a3 02 f1 a2 c3 c5 c7 d8 f1 84 92 a2 4d     ...............M
     9d6:	da 2a d8 48 69 d9 2a d8 68 55 da 32 d8 50 71 d9     .*.Hi.*.hU.2.Pq.
     9e6:	32 d8 70 5d da 3a d8 58 79 d9 3a d8 78 93 a3 4d     2.p].:.Xy.:.x..M
     9f6:	da 2a d8 48 69 d9 2a d8 68 55 da 32 d8 50 71 d9     .*.Hi.*.hU.2.Pq.
     a06:	32 d8 70 5d da 3a d8 58 79 d9 3a d8 78 a8 8a 9a     2.p].:.Xy.:.x...
     a16:	f0 28 50 78 9e f3 88 18 f1 9f 1d 98 a8 d9 08 d8     .(Px............
     a26:	c8 9f 12 9e f3 15 a8 da 12 10 d8 f1 af c8 97 87     ................
     a36:	34 b5 b9 94 a4 21 f3 d9 22 d8 f2 2d f3 d9 2a d8     4....!.."..-..*.
     a46:	f2 35 f3 d9 32 d8 81 a4 60 60 61 d9 61 d8 6c 68     .5..2...``a.a.lh
     a56:	69 d9 69 d8 74 70 71 d9 71 d8 b1 a3 84 19 3d 5d     i.i.tpq.q.....=]
     a66:	a3 83 1a 3e 5e 93 10 30 81 10 11 b8 b0 af 8f 94     ...>^..0........
     a76:	f2 da 3e d8 b4 9a a8 87 29 da f8 d8 87 9a 35 da     ..>.....).....5.
     a86:	f8 d8 87 9a 3d da f8 d8 b1 b9 a4 98 85 02 2e 56     ....=..........V
     a96:	a5 81 00 0c 14 a3 97 b0 8a f1 2d d9 28 d8 4d d9     ..........-.(.M.
     aa6:	48 d8 6d d9 68 d8 b1 84 0d da 0e d8 a3 29 83 da     H.m.h........)..
     ab6:	2c 0e d8 a3 84 49 83 da 2c 4c 0e d8 b8 b0 a8 8a     ,....I..,L......
     ac6:	9a f5 20 aa da df d8 a8 40 aa d0 da de d8 a8 60     .. .....@......`
     ad6:	aa da d0 df d8 f1 97 86 a8 31 9b 06 99 07 ab 97     .........1......
     ae6:	28 88 9b f0 0c 20 14 40 b8 b0 b4 a8 8c 9c f0 04     (.... .@........
     af6:	28 51 79 1d 30 14 38 b2 82 ab d0 98 2c 50 50 78     (Qy.0.8.....,PPx
     b06:	78 9b f1 1a b0 f0 8a 9c a8 29 51 79 8b 29 51 79     x........)Qy.)Qy
     b16:	8a 24 70 59 8b 20 58 71 8a 44 69 38 8b 39 40 68     .$pY. Xq.Di8.9@h
     b26:	8a 64 48 31 8b 30 49 60 a5 88 20 09 71 58 44 68     .dH1.0I`.. .qXDh
     b36:	11 39 64 49 30 19 f1 ac 00 2c 54 7c f0 8c a8 04     .9dI0....,T|....
     b46:	28 50 78 f1 88 97 26 a8 59 98 ac 8c 02 26 46 66     (Px...&.Y....&Ff
     b56:	f0 89 9c a8 29 51 79 24 70 59 44 69 38 64 48 31     ....)Qy$pYDi8dH1
     b66:	a9 88 09 20 59 70 ab 11 38 40 69 a8 19 31 48 60     ... Yp..8@i..1H`
     b76:	8c a8 3c 41 5c 20 7c 00 f1 87 98 19 86 a8 6e 76     ..<A\ |.......nv
     b86:	7e a9 99 88 2d 55 7d 9e b9 a3 8a 22 8a 6e 8a 56     ~...-U}....".n.V
     b96:	8a 5e 9f b1 83 06 26 46 66 0e 2e 4e 6e 9d b8 ad     .^....&Ff..Nn...
     ba6:	00 2c 54 7c f2 b1 8c b4 99 b9 a3 2d 55 7d 81 91     .,T|.......-U}..
     bb6:	ac 38 ad 3a b5 83 91 ac 2d d9 28 d8 4d d9 48 d8     .8.:....-.(.M.H.
     bc6:	6d d9 68 d8 8c 9d ae 29 d9 04 ae d8 51 d9 04 ae     m.h....)....Q...
     bd6:	d8 79 d9 04 d8 81 f3 9d ad 00 8d ae 19 81 ad d9     .y..............
     be6:	01 d8 f2 ae da 26 d8 8e 91 29 83 a7 d9 ad ad ad     .....&...)......
     bf6:	ad f3 2a d8 d8 f1 b0 ac 89 91 3e 5e 76 f3 ac 2e     ..*.......>^v...
     c06:	2e f1 b1 8c 5a 9c ac 2c 28 28 28 9c ac 30 18 a8     ....Z..,(((..0..
     c16:	98 81 28 34 3c 97 24 a7 28 34 3c 9c 24 f2 b0 89     ..(4<.$.(4<.$...
     c26:	ac 91 2c 4c 6c 8a 9b 2d d9 d8 d8 51 d9 d8 d8 79     ..,Ll..-...Q...y
     c36:	d9 d8 d8 f1 9e 88 a3 31 da d8 d8 91 2d d9 28 d8     .......1....-.(.
     c46:	4d d9 48 d8 6d d9 68 d8 b1 83 93 35 3d 80 25 da     M.H.m.h....5=.%.
     c56:	d8 d8 85 69 da d8 d8 b4 93 81 a3 28 34 3c f3 ab     ...i.......(4<..
     c66:	8b f8 a3 91 b6 09 b4 d9 ab de fa b0 87 9c b9 a3     ................
     c76:	dd f1 20 28 30 38 9a f1 28 30 38 9d f1 a3 a3 a3     .. (08..(08.....
     c86:	a3 f2 a3 b4 90 80 f2 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
     c96:	a3 b2 a3 a3 a3 a3 a3 a3 b0 87 b5 99 f1 28 30 38     .............(08
     ca6:	98 f1 a3 a3 a3 a3 97 a3 a3 a3 a3 f3 9b a3 30 dc     ..............0.
     cb6:	b9 a7 f1 26 26 26 fe d8 ff                          ...&&&...

00000cbf <digital_pin_to_timer_PGM>:
     cbf:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     ccf:	00 00 00 00                                         ....

00000cd3 <digital_pin_to_bit_mask_PGM>:
     cd3:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     ce3:	04 08 10 20                                         ... 

00000ce7 <digital_pin_to_port_PGM>:
     ce7:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     cf7:	03 03 03 03                                         ....

00000cfb <port_to_output_PGM>:
     cfb:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000d05 <port_to_mode_PGM>:
     d05:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000d10 <__ctors_start>:
     d10:	ae 11       	cpse	r26, r14
     d12:	3a 18       	sub	r3, r10
     d14:	e6 1f       	adc	r30, r22

00000d16 <__ctors_end>:
     d16:	ec 11       	cpse	r30, r12

00000d18 <__dtors_end>:
     d18:	11 24       	eor	r1, r1
     d1a:	1f be       	out	0x3f, r1	; 63
     d1c:	cf ef       	ldi	r28, 0xFF	; 255
     d1e:	d8 e0       	ldi	r29, 0x08	; 8
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	cd bf       	out	0x3d, r28	; 61

00000d24 <__do_copy_data>:
     d24:	11 e0       	ldi	r17, 0x01	; 1
     d26:	a0 e0       	ldi	r26, 0x00	; 0
     d28:	b1 e0       	ldi	r27, 0x01	; 1
     d2a:	ec e6       	ldi	r30, 0x6C	; 108
     d2c:	ff e4       	ldi	r31, 0x4F	; 79
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <__do_copy_data+0x10>
     d30:	05 90       	lpm	r0, Z+
     d32:	0d 92       	st	X+, r0
     d34:	a2 37       	cpi	r26, 0x72	; 114
     d36:	b1 07       	cpc	r27, r17
     d38:	d9 f7       	brne	.-10     	; 0xd30 <__do_copy_data+0xc>

00000d3a <__do_clear_bss>:
     d3a:	23 e0       	ldi	r18, 0x03	; 3
     d3c:	a2 e7       	ldi	r26, 0x72	; 114
     d3e:	b1 e0       	ldi	r27, 0x01	; 1
     d40:	01 c0       	rjmp	.+2      	; 0xd44 <.do_clear_bss_start>

00000d42 <.do_clear_bss_loop>:
     d42:	1d 92       	st	X+, r1

00000d44 <.do_clear_bss_start>:
     d44:	a6 39       	cpi	r26, 0x96	; 150
     d46:	b2 07       	cpc	r27, r18
     d48:	e1 f7       	brne	.-8      	; 0xd42 <.do_clear_bss_loop>

00000d4a <__do_global_ctors>:
     d4a:	16 e0       	ldi	r17, 0x06	; 6
     d4c:	cb e8       	ldi	r28, 0x8B	; 139
     d4e:	d6 e0       	ldi	r29, 0x06	; 6
     d50:	04 c0       	rjmp	.+8      	; 0xd5a <__do_global_ctors+0x10>
     d52:	21 97       	sbiw	r28, 0x01	; 1
     d54:	fe 01       	movw	r30, r28
     d56:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <__tablejump2__>
     d5a:	c8 38       	cpi	r28, 0x88	; 136
     d5c:	d1 07       	cpc	r29, r17
     d5e:	c9 f7       	brne	.-14     	; 0xd52 <__do_global_ctors+0x8>
     d60:	0e 94 68 18 	call	0x30d0	; 0x30d0 <main>
     d64:	0c 94 a9 27 	jmp	0x4f52	; 0x4f52 <__do_global_dtors>

00000d68 <__bad_interrupt>:
     d68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000d6c <_ZN9GimbalMotC1Ev>:

Motor::Motor(int outA_, int outB_){
	outA = outA_;
	outB = outB_;
	v = 0;
	direction = false;
     d6c:	08 95       	ret

00000d6e <_ZN9GimbalMotD1Ev>:
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
     d72:	ec 01       	movw	r28, r24
     d74:	88 81       	ld	r24, Y
     d76:	99 81       	ldd	r25, Y+1	; 0x01
     d78:	0e 94 79 18 	call	0x30f2	; 0x30f2 <_ZdlPv>
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	9b 81       	ldd	r25, Y+3	; 0x03
     d80:	0e 94 79 18 	call	0x30f2	; 0x30f2 <_ZdlPv>
     d84:	8c 81       	ldd	r24, Y+4	; 0x04
     d86:	9d 81       	ldd	r25, Y+5	; 0x05
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	0c 94 79 18 	jmp	0x30f2	; 0x30f2 <_ZdlPv>

00000d90 <_ZN9GimbalMot4initEiiiiii>:
     d90:	6f 92       	push	r6
     d92:	7f 92       	push	r7
     d94:	8f 92       	push	r8
     d96:	9f 92       	push	r9
     d98:	af 92       	push	r10
     d9a:	bf 92       	push	r11
     d9c:	cf 92       	push	r12
     d9e:	df 92       	push	r13
     da0:	ef 92       	push	r14
     da2:	ff 92       	push	r15
     da4:	0f 93       	push	r16
     da6:	1f 93       	push	r17
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	ec 01       	movw	r28, r24
     dae:	96 2e       	mov	r9, r22
     db0:	67 2e       	mov	r6, r23
     db2:	a4 2e       	mov	r10, r20
     db4:	75 2e       	mov	r7, r21
     db6:	b2 2e       	mov	r11, r18
     db8:	83 2e       	mov	r8, r19
     dba:	a1 e8       	ldi	r26, 0x81	; 129
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	1c 92       	st	X, r1
     dc0:	e1 eb       	ldi	r30, 0xB1	; 177
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	10 82       	st	Z, r1
     dc6:	8c 91       	ld	r24, X
     dc8:	81 60       	ori	r24, 0x01	; 1
     dca:	8c 93       	st	X, r24
     dcc:	8c 91       	ld	r24, X
     dce:	84 60       	ori	r24, 0x04	; 4
     dd0:	8c 93       	st	X, r24
     dd2:	80 81       	ld	r24, Z
     dd4:	81 60       	ori	r24, 0x01	; 1
     dd6:	80 83       	st	Z, r24
     dd8:	80 81       	ld	r24, Z
     dda:	84 60       	ori	r24, 0x04	; 4
     ddc:	80 83       	st	Z, r24
     dde:	61 e0       	ldi	r22, 0x01	; 1
     de0:	89 2d       	mov	r24, r9
     de2:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <pinMode>
     de6:	61 e0       	ldi	r22, 0x01	; 1
     de8:	8a 2d       	mov	r24, r10
     dea:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <pinMode>
     dee:	61 e0       	ldi	r22, 0x01	; 1
     df0:	8b 2d       	mov	r24, r11
     df2:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <pinMode>
     df6:	61 e0       	ldi	r22, 0x01	; 1
     df8:	80 2f       	mov	r24, r16
     dfa:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <pinMode>
     dfe:	61 e0       	ldi	r22, 0x01	; 1
     e00:	8e 2d       	mov	r24, r14
     e02:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <pinMode>
     e06:	61 e0       	ldi	r22, 0x01	; 1
     e08:	8c 2d       	mov	r24, r12
     e0a:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <pinMode>
     e0e:	88 e0       	ldi	r24, 0x08	; 8
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 77 18 	call	0x30ee	; 0x30ee <_Znwj>
     e16:	fc 01       	movw	r30, r24
     e18:	94 82       	std	Z+4, r9	; 0x04
     e1a:	65 82       	std	Z+5, r6	; 0x05
     e1c:	a6 82       	std	Z+6, r10	; 0x06
     e1e:	77 82       	std	Z+7, r7	; 0x07
     e20:	11 82       	std	Z+1, r1	; 0x01
     e22:	10 82       	st	Z, r1
     e24:	13 82       	std	Z+3, r1	; 0x03
     e26:	12 82       	std	Z+2, r1	; 0x02
     e28:	99 83       	std	Y+1, r25	; 0x01
     e2a:	88 83       	st	Y, r24
     e2c:	88 e0       	ldi	r24, 0x08	; 8
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 77 18 	call	0x30ee	; 0x30ee <_Znwj>
     e34:	fc 01       	movw	r30, r24
     e36:	b4 82       	std	Z+4, r11	; 0x04
     e38:	85 82       	std	Z+5, r8	; 0x05
     e3a:	06 83       	std	Z+6, r16	; 0x06
     e3c:	17 83       	std	Z+7, r17	; 0x07
     e3e:	11 82       	std	Z+1, r1	; 0x01
     e40:	10 82       	st	Z, r1
     e42:	13 82       	std	Z+3, r1	; 0x03
     e44:	12 82       	std	Z+2, r1	; 0x02
     e46:	9b 83       	std	Y+3, r25	; 0x03
     e48:	8a 83       	std	Y+2, r24	; 0x02
     e4a:	88 e0       	ldi	r24, 0x08	; 8
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 77 18 	call	0x30ee	; 0x30ee <_Znwj>
     e52:	fc 01       	movw	r30, r24
     e54:	e4 82       	std	Z+4, r14	; 0x04
     e56:	f5 82       	std	Z+5, r15	; 0x05
     e58:	c6 82       	std	Z+6, r12	; 0x06
     e5a:	d7 82       	std	Z+7, r13	; 0x07
     e5c:	11 82       	std	Z+1, r1	; 0x01
     e5e:	10 82       	st	Z, r1
     e60:	13 82       	std	Z+3, r1	; 0x03
     e62:	12 82       	std	Z+2, r1	; 0x02
     e64:	9d 83       	std	Y+5, r25	; 0x05
     e66:	8c 83       	std	Y+4, r24	; 0x04
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	ff 90       	pop	r15
     e72:	ef 90       	pop	r14
     e74:	df 90       	pop	r13
     e76:	cf 90       	pop	r12
     e78:	bf 90       	pop	r11
     e7a:	af 90       	pop	r10
     e7c:	9f 90       	pop	r9
     e7e:	8f 90       	pop	r8
     e80:	7f 90       	pop	r7
     e82:	6f 90       	pop	r6
     e84:	08 95       	ret

00000e86 <_ZN5Motor6setPWMEv>:
		direction = true;
	}
	setPWM();
}

void Motor::setPWM(){
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	ec 01       	movw	r28, r24
	if(direction)
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	9b 81       	ldd	r25, Y+3	; 0x03
     e90:	89 2b       	or	r24, r25
     e92:	41 f0       	breq	.+16     	; 0xea4 <_ZN5Motor6setPWMEv+0x1e>
	{
	  analogWrite(outA, 0);
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	8c 81       	ldd	r24, Y+4	; 0x04
     e9a:	0e 94 75 1c 	call	0x38ea	; 0x38ea <analogWrite>
	  analogWrite(outB, v);
     e9e:	68 81       	ld	r22, Y
     ea0:	79 81       	ldd	r23, Y+1	; 0x01
     ea2:	07 c0       	rjmp	.+14     	; 0xeb2 <_ZN5Motor6setPWMEv+0x2c>
	}
	else
	{
	  analogWrite(outA, v);
     ea4:	68 81       	ld	r22, Y
     ea6:	79 81       	ldd	r23, Y+1	; 0x01
     ea8:	8c 81       	ldd	r24, Y+4	; 0x04
     eaa:	0e 94 75 1c 	call	0x38ea	; 0x38ea <analogWrite>
	  analogWrite(outB, 0);
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	8e 81       	ldd	r24, Y+6	; 0x06
	}
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
	  analogWrite(outB, v);
	}
	else
	{
	  analogWrite(outA, v);
	  analogWrite(outB, 0);
     eb8:	0c 94 75 1c 	jmp	0x38ea	; 0x38ea <analogWrite>

00000ebc <_ZN5Motor4setOEi>:
	direction = false;
}

//set output
void Motor::setO(int v_){
	v_ = constrain(v_, -255, 255);
     ebc:	61 30       	cpi	r22, 0x01	; 1
     ebe:	2f ef       	ldi	r18, 0xFF	; 255
     ec0:	72 07       	cpc	r23, r18
     ec2:	4c f0       	brlt	.+18     	; 0xed6 <_ZN5Motor4setOEi+0x1a>
     ec4:	6f 3f       	cpi	r22, 0xFF	; 255
     ec6:	71 05       	cpc	r23, r1
     ec8:	19 f0       	breq	.+6      	; 0xed0 <_ZN5Motor4setOEi+0x14>
     eca:	14 f0       	brlt	.+4      	; 0xed0 <_ZN5Motor4setOEi+0x14>
     ecc:	6f ef       	ldi	r22, 0xFF	; 255
     ece:	70 e0       	ldi	r23, 0x00	; 0
	if( v_ < 0)
     ed0:	77 ff       	sbrs	r23, 7
     ed2:	0c c0       	rjmp	.+24     	; 0xeec <_ZN5Motor4setOEi+0x30>
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <_ZN5Motor4setOEi+0x1e>
	direction = false;
}

//set output
void Motor::setO(int v_){
	v_ = constrain(v_, -255, 255);
     ed6:	61 e0       	ldi	r22, 0x01	; 1
     ed8:	7f ef       	ldi	r23, 0xFF	; 255
	if( v_ < 0)
	{
		v = -v_;
     eda:	71 95       	neg	r23
     edc:	61 95       	neg	r22
     ede:	71 09       	sbc	r23, r1
     ee0:	fc 01       	movw	r30, r24
     ee2:	71 83       	std	Z+1, r23	; 0x01
     ee4:	60 83       	st	Z, r22
		direction = false;
     ee6:	13 82       	std	Z+3, r1	; 0x03
     ee8:	12 82       	std	Z+2, r1	; 0x02
     eea:	07 c0       	rjmp	.+14     	; 0xefa <_ZN5Motor4setOEi+0x3e>
	}
	else
	{
		v = v_;
     eec:	fc 01       	movw	r30, r24
     eee:	71 83       	std	Z+1, r23	; 0x01
     ef0:	60 83       	st	Z, r22
		direction = true;
     ef2:	21 e0       	ldi	r18, 0x01	; 1
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	33 83       	std	Z+3, r19	; 0x03
     ef8:	22 83       	std	Z+2, r18	; 0x02
	}
	setPWM();
     efa:	0c 94 43 07 	jmp	0xe86	; 0xe86 <_ZN5Motor6setPWMEv>

00000efe <_ZN9GimbalMot7setVelXEi>:
	mZ = new Motor(aZ_, bZ_);
}

//set velocity for x axis
void GimbalMot::setVelX(int x_){
	mX->setO(x_);
     efe:	fc 01       	movw	r30, r24
     f00:	80 81       	ld	r24, Z
     f02:	91 81       	ldd	r25, Z+1	; 0x01
     f04:	0c 94 5e 07 	jmp	0xebc	; 0xebc <_ZN5Motor4setOEi>

00000f08 <_ZN6I2Cdev10writeBytesEhhhPh>:
 * @param regAddr First register address to write to
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data) {
     f08:	ff 92       	push	r15
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	c6 2f       	mov	r28, r22
     f14:	14 2f       	mov	r17, r20
     f16:	f2 2e       	mov	r15, r18
     f18:	03 2f       	mov	r16, r19
        Wire.beginTransmission(devAddr);
        Wire.send((uint8_t) regAddr); // send address
    #elif ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100) \
            || (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_SBWIRE && ARDUINO >= 100) \
            || I2CDEV_IMPLEMENTATION == I2CDEV_TEENSY_3X_WIRE)
        Wire.beginTransmission(devAddr);
     f1a:	68 2f       	mov	r22, r24
     f1c:	86 ec       	ldi	r24, 0xC6	; 198
     f1e:	92 e0       	ldi	r25, 0x02	; 2
     f20:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t) regAddr); // send address
     f24:	6c 2f       	mov	r22, r28
     f26:	86 ec       	ldi	r24, 0xC6	; 198
     f28:	92 e0       	ldi	r25, 0x02	; 2
     f2a:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <_ZN7TwoWire5writeEh>
     f2e:	cf 2d       	mov	r28, r15
     f30:	d0 2f       	mov	r29, r16
     f32:	ce 01       	movw	r24, r28
     f34:	81 0f       	add	r24, r17
     f36:	91 1d       	adc	r25, r1
     f38:	8c 01       	movw	r16, r24
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) {
     f3a:	c0 17       	cp	r28, r16
     f3c:	d1 07       	cpc	r29, r17
     f3e:	31 f0       	breq	.+12     	; 0xf4c <_ZN6I2Cdev10writeBytesEhhhPh+0x44>
        #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
            Wire.send((uint8_t) data[i]);
        #elif ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100) \
                || (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_SBWIRE && ARDUINO >= 100) \
                || I2CDEV_IMPLEMENTATION == I2CDEV_TEENSY_3X_WIRE)
            Wire.write((uint8_t) data[i]);
     f40:	69 91       	ld	r22, Y+
     f42:	86 ec       	ldi	r24, 0xC6	; 198
     f44:	92 e0       	ldi	r25, 0x02	; 2
     f46:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <_ZN7TwoWire5writeEh>
        Wire.write((uint8_t) regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) {
     f4a:	f7 cf       	rjmp	.-18     	; 0xf3a <_ZN6I2Cdev10writeBytesEhhhPh+0x32>
    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
        Wire.endTransmission();
    #elif ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100) \
            || (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_SBWIRE && ARDUINO >= 100) \
            || I2CDEV_IMPLEMENTATION == I2CDEV_TEENSY_3X_WIRE)
        status = Wire.endTransmission();
     f4c:	86 ec       	ldi	r24, 0xC6	; 198
     f4e:	92 e0       	ldi	r25, 0x02	; 2
     f50:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <_ZN7TwoWire15endTransmissionEv>
        //status = Fastwire::endTransmission();
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
     f54:	91 e0       	ldi	r25, 0x01	; 1
     f56:	81 11       	cpse	r24, r1
     f58:	90 e0       	ldi	r25, 0x00	; 0
}
     f5a:	89 2f       	mov	r24, r25
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	ff 90       	pop	r15
     f66:	08 95       	ret

00000f68 <_ZN6I2Cdev9writeByteEhhh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	1f 92       	push	r1
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	49 83       	std	Y+1, r20	; 0x01
    return writeBytes(devAddr, regAddr, 1, &data);
     f74:	9e 01       	movw	r18, r28
     f76:	2f 5f       	subi	r18, 0xFF	; 255
     f78:	3f 4f       	sbci	r19, 0xFF	; 255
     f7a:	41 e0       	ldi	r20, 0x01	; 1
     f7c:	0e 94 84 07 	call	0xf08	; 0xf08 <_ZN6I2Cdev10writeBytesEhhhPh>
}
     f80:	0f 90       	pop	r0
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	08 95       	ret

00000f88 <_ZN6I2Cdev10writeWordsEhhhPj>:
 * @param regAddr First register address to write to
 * @param length Number of words to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeWords(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint16_t* data) {
     f88:	ef 92       	push	r14
     f8a:	ff 92       	push	r15
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	c6 2f       	mov	r28, r22
     f96:	04 2f       	mov	r16, r20
     f98:	f2 2e       	mov	r15, r18
     f9a:	13 2f       	mov	r17, r19
        Wire.beginTransmission(devAddr);
        Wire.send(regAddr); // send address
    #elif ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100) \
            || (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_SBWIRE && ARDUINO >= 100) \
            || I2CDEV_IMPLEMENTATION == I2CDEV_TEENSY_3X_WIRE)
        Wire.beginTransmission(devAddr);
     f9c:	68 2f       	mov	r22, r24
     f9e:	86 ec       	ldi	r24, 0xC6	; 198
     fa0:	92 e0       	ldi	r25, 0x02	; 2
     fa2:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <_ZN7TwoWire17beginTransmissionEh>
        Wire.write(regAddr); // send address
     fa6:	6c 2f       	mov	r22, r28
     fa8:	86 ec       	ldi	r24, 0xC6	; 198
     faa:	92 e0       	ldi	r25, 0x02	; 2
     fac:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <_ZN7TwoWire5writeEh>
     fb0:	cf 2d       	mov	r28, r15
     fb2:	d1 2f       	mov	r29, r17
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) { 
     fb4:	10 e0       	ldi	r17, 0x00	; 0
     fb6:	10 17       	cp	r17, r16
     fb8:	69 f0       	breq	.+26     	; 0xfd4 <_ZN6I2Cdev10writeWordsEhhhPj+0x4c>
            Wire.send((uint8_t)(data[i] >> 8));     // send MSB
            Wire.send((uint8_t)data[i]);          // send LSB
        #elif ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100) \
                || (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_SBWIRE && ARDUINO >= 100) \
                || I2CDEV_IMPLEMENTATION == I2CDEV_TEENSY_3X_WIRE)
            Wire.write((uint8_t)(data[i] >> 8));    // send MSB
     fba:	69 81       	ldd	r22, Y+1	; 0x01
     fbc:	86 ec       	ldi	r24, 0xC6	; 198
     fbe:	92 e0       	ldi	r25, 0x02	; 2
     fc0:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <_ZN7TwoWire5writeEh>
            Wire.write((uint8_t)data[i]);         // send LSB
     fc4:	68 81       	ld	r22, Y
     fc6:	22 96       	adiw	r28, 0x02	; 2
     fc8:	86 ec       	ldi	r24, 0xC6	; 198
     fca:	92 e0       	ldi	r25, 0x02	; 2
     fcc:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <_ZN7TwoWire5writeEh>
        Wire.write(regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) { 
     fd0:	1f 5f       	subi	r17, 0xFF	; 255
     fd2:	f1 cf       	rjmp	.-30     	; 0xfb6 <_ZN6I2Cdev10writeWordsEhhhPj+0x2e>
    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
        Wire.endTransmission();
    #elif ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100) \
            || (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_SBWIRE && ARDUINO >= 100) \
            || I2CDEV_IMPLEMENTATION == I2CDEV_TEENSY_3X_WIRE)
        status = Wire.endTransmission();
     fd4:	86 ec       	ldi	r24, 0xC6	; 198
     fd6:	92 e0       	ldi	r25, 0x02	; 2
     fd8:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <_ZN7TwoWire15endTransmissionEv>
        //status = Fastwire::endTransmission();
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
     fdc:	91 e0       	ldi	r25, 0x01	; 1
     fde:	81 11       	cpse	r24, r1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
}
     fe2:	89 2f       	mov	r24, r25
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	ff 90       	pop	r15
     fee:	ef 90       	pop	r14
     ff0:	08 95       	ret

00000ff2 <_ZN6I2Cdev9writeWordEhhj>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New word value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeWord(uint8_t devAddr, uint8_t regAddr, uint16_t data) {
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <_ZN6I2Cdev9writeWordEhhj+0x6>
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	5a 83       	std	Y+2, r21	; 0x02
     ffe:	49 83       	std	Y+1, r20	; 0x01
    return writeWords(devAddr, regAddr, 1, &data);
    1000:	9e 01       	movw	r18, r28
    1002:	2f 5f       	subi	r18, 0xFF	; 255
    1004:	3f 4f       	sbci	r19, 0xFF	; 255
    1006:	41 e0       	ldi	r20, 0x01	; 1
    1008:	0e 94 c4 07 	call	0xf88	; 0xf88 <_ZN6I2Cdev10writeWordsEhhhPj>
}
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	08 95       	ret

00001016 <_ZN6I2Cdev9readBytesEhhhPhj>:
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {
    1016:	3f 92       	push	r3
    1018:	4f 92       	push	r4
    101a:	5f 92       	push	r5
    101c:	6f 92       	push	r6
    101e:	7f 92       	push	r7
    1020:	8f 92       	push	r8
    1022:	9f 92       	push	r9
    1024:	af 92       	push	r10
    1026:	bf 92       	push	r11
    1028:	cf 92       	push	r12
    102a:	df 92       	push	r13
    102c:	ef 92       	push	r14
    102e:	ff 92       	push	r15
    1030:	0f 93       	push	r16
    1032:	1f 93       	push	r17
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	00 d0       	rcall	.+0      	; 0x103a <_ZN6I2Cdev9readBytesEhhhPhj+0x24>
    103a:	00 d0       	rcall	.+0      	; 0x103c <_ZN6I2Cdev9readBytesEhhhPhj+0x26>
    103c:	00 d0       	rcall	.+0      	; 0x103e <_ZN6I2Cdev9readBytesEhhhPhj+0x28>
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	d8 2e       	mov	r13, r24
    1044:	c6 2e       	mov	r12, r22
    1046:	4d 83       	std	Y+5, r20	; 0x05
    1048:	79 01       	movw	r14, r18
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif

    int8_t count = 0;
    uint32_t t1 = millis();
    104a:	0e 94 cd 1b 	call	0x379a	; 0x379a <millis>
    104e:	4b 01       	movw	r8, r22
    1050:	5c 01       	movw	r10, r24
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min((int)length, BUFFER_LENGTH)) {
    1052:	31 2c       	mov	r3, r1
        Serial.print(" bytes from 0x");
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif

    int8_t count = 0;
    1054:	1e 82       	std	Y+6, r1	; 0x06
            for (uint8_t k = 0; k < length; k += min((int)length, BUFFER_LENGTH)) {
                Wire.beginTransmission(devAddr);
                Wire.write(regAddr);
                Wire.endTransmission();
                Wire.beginTransmission(devAddr);
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
    1056:	9d 81       	ldd	r25, Y+5	; 0x05
    1058:	89 2f       	mov	r24, r25
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	9c 83       	std	Y+4, r25	; 0x04
    105e:	8b 83       	std	Y+3, r24	; 0x03
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
    1060:	28 01       	movw	r4, r16
    1062:	61 2c       	mov	r6, r1
    1064:	71 2c       	mov	r7, r1
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min((int)length, BUFFER_LENGTH)) {
    1066:	ed 81       	ldd	r30, Y+5	; 0x05
    1068:	3e 16       	cp	r3, r30
    106a:	c8 f5       	brcc	.+114    	; 0x10de <_ZN6I2Cdev9readBytesEhhhPhj+0xc8>
                Wire.beginTransmission(devAddr);
    106c:	6d 2d       	mov	r22, r13
    106e:	86 ec       	ldi	r24, 0xC6	; 198
    1070:	92 e0       	ldi	r25, 0x02	; 2
    1072:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <_ZN7TwoWire17beginTransmissionEh>
                Wire.write(regAddr);
    1076:	6c 2d       	mov	r22, r12
    1078:	86 ec       	ldi	r24, 0xC6	; 198
    107a:	92 e0       	ldi	r25, 0x02	; 2
    107c:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <_ZN7TwoWire5writeEh>
                Wire.endTransmission();
    1080:	86 ec       	ldi	r24, 0xC6	; 198
    1082:	92 e0       	ldi	r25, 0x02	; 2
    1084:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <_ZN7TwoWire15endTransmissionEv>
                Wire.beginTransmission(devAddr);
    1088:	6d 2d       	mov	r22, r13
    108a:	86 ec       	ldi	r24, 0xC6	; 198
    108c:	92 e0       	ldi	r25, 0x02	; 2
    108e:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <_ZN7TwoWire17beginTransmissionEh>
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
    1092:	4b 81       	ldd	r20, Y+3	; 0x03
    1094:	5c 81       	ldd	r21, Y+4	; 0x04
    1096:	43 19       	sub	r20, r3
    1098:	51 09       	sbc	r21, r1
    109a:	41 32       	cpi	r20, 0x21	; 33
    109c:	51 05       	cpc	r21, r1
    109e:	14 f0       	brlt	.+4      	; 0x10a4 <_ZN6I2Cdev9readBytesEhhhPhj+0x8e>
    10a0:	40 e2       	ldi	r20, 0x20	; 32
    10a2:	50 e0       	ldi	r21, 0x00	; 0
    10a4:	6d 2d       	mov	r22, r13
    10a6:	86 ec       	ldi	r24, 0xC6	; 198
    10a8:	92 e0       	ldi	r25, 0x02	; 2
    10aa:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <_ZN7TwoWire11requestFromEhh>
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
    10ae:	86 ec       	ldi	r24, 0xC6	; 198
    10b0:	92 e0       	ldi	r25, 0x02	; 2
    10b2:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <_ZN7TwoWire9availableEv>
    10b6:	89 2b       	or	r24, r25
    10b8:	09 f4       	brne	.+2      	; 0x10bc <_ZN6I2Cdev9readBytesEhhhPhj+0xa6>
    10ba:	43 c0       	rjmp	.+134    	; 0x1142 <_ZN6I2Cdev9readBytesEhhhPhj+0x12c>
    10bc:	01 15       	cp	r16, r1
    10be:	11 05       	cpc	r17, r1
    10c0:	69 f1       	breq	.+90     	; 0x111c <_ZN6I2Cdev9readBytesEhhhPhj+0x106>
    10c2:	0e 94 cd 1b 	call	0x379a	; 0x379a <millis>
    10c6:	dc 01       	movw	r26, r24
    10c8:	cb 01       	movw	r24, r22
    10ca:	88 19       	sub	r24, r8
    10cc:	99 09       	sbc	r25, r9
    10ce:	aa 09       	sbc	r26, r10
    10d0:	bb 09       	sbc	r27, r11
    10d2:	84 15       	cp	r24, r4
    10d4:	95 05       	cpc	r25, r5
    10d6:	a6 05       	cpc	r26, r6
    10d8:	b7 05       	cpc	r27, r7
    10da:	00 f1       	brcs	.+64     	; 0x111c <_ZN6I2Cdev9readBytesEhhhPhj+0x106>
    10dc:	32 c0       	rjmp	.+100    	; 0x1142 <_ZN6I2Cdev9readBytesEhhhPhj+0x12c>
        }

    #endif

    // check for timeout
    if (timeout > 0 && millis() - t1 >= timeout && count < length) count = -1; // timeout
    10de:	01 15       	cp	r16, r1
    10e0:	11 05       	cpc	r17, r1
    10e2:	a9 f1       	breq	.+106    	; 0x114e <_ZN6I2Cdev9readBytesEhhhPhj+0x138>
    10e4:	0e 94 cd 1b 	call	0x379a	; 0x379a <millis>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	88 19       	sub	r24, r8
    10ee:	99 09       	sbc	r25, r9
    10f0:	aa 09       	sbc	r26, r10
    10f2:	bb 09       	sbc	r27, r11
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	80 17       	cp	r24, r16
    10fa:	91 07       	cpc	r25, r17
    10fc:	a2 07       	cpc	r26, r18
    10fe:	b3 07       	cpc	r27, r19
    1100:	30 f1       	brcs	.+76     	; 0x114e <_ZN6I2Cdev9readBytesEhhhPhj+0x138>
    1102:	fd 81       	ldd	r31, Y+5	; 0x05
    1104:	2f 2f       	mov	r18, r31
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	4e 81       	ldd	r20, Y+6	; 0x06
    110a:	84 2f       	mov	r24, r20
    110c:	44 0f       	add	r20, r20
    110e:	99 0b       	sbc	r25, r25
    1110:	82 17       	cp	r24, r18
    1112:	93 07       	cpc	r25, r19
    1114:	e4 f4       	brge	.+56     	; 0x114e <_ZN6I2Cdev9readBytesEhhhPhj+0x138>
    1116:	8f ef       	ldi	r24, 0xFF	; 255
    1118:	8e 83       	std	Y+6, r24	; 0x06
        Serial.print(". Done (");
        Serial.print(count, DEC);
        Serial.println(" read).");
    #endif

    return count;
    111a:	19 c0       	rjmp	.+50     	; 0x114e <_ZN6I2Cdev9readBytesEhhhPhj+0x138>
                Wire.endTransmission();
                Wire.beginTransmission(devAddr);
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
                    data[count] = Wire.read();
    111c:	f7 01       	movw	r30, r14
    111e:	2e 81       	ldd	r18, Y+6	; 0x06
    1120:	e2 0f       	add	r30, r18
    1122:	f1 1d       	adc	r31, r1
    1124:	27 fd       	sbrc	r18, 7
    1126:	fa 95       	dec	r31
    1128:	fa 83       	std	Y+2, r31	; 0x02
    112a:	e9 83       	std	Y+1, r30	; 0x01
    112c:	86 ec       	ldi	r24, 0xC6	; 198
    112e:	92 e0       	ldi	r25, 0x02	; 2
    1130:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <_ZN7TwoWire4readEv>
    1134:	e9 81       	ldd	r30, Y+1	; 0x01
    1136:	fa 81       	ldd	r31, Y+2	; 0x02
    1138:	80 83       	st	Z, r24
    113a:	fe 81       	ldd	r31, Y+6	; 0x06
    113c:	ff 5f       	subi	r31, 0xFF	; 255
    113e:	fe 83       	std	Y+6, r31	; 0x06
                Wire.write(regAddr);
                Wire.endTransmission();
                Wire.beginTransmission(devAddr);
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
    1140:	b6 cf       	rjmp	.-148    	; 0x10ae <_ZN6I2Cdev9readBytesEhhhPhj+0x98>
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min((int)length, BUFFER_LENGTH)) {
    1142:	8d 81       	ldd	r24, Y+5	; 0x05
    1144:	81 32       	cpi	r24, 0x21	; 33
    1146:	08 f0       	brcs	.+2      	; 0x114a <_ZN6I2Cdev9readBytesEhhhPhj+0x134>
    1148:	80 e2       	ldi	r24, 0x20	; 32
    114a:	38 0e       	add	r3, r24
    114c:	8c cf       	rjmp	.-232    	; 0x1066 <_ZN6I2Cdev9readBytesEhhhPhj+0x50>
        Serial.print(count, DEC);
        Serial.println(" read).");
    #endif

    return count;
}
    114e:	8e 81       	ldd	r24, Y+6	; 0x06
    1150:	26 96       	adiw	r28, 0x06	; 6
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	f8 94       	cli
    1156:	de bf       	out	0x3e, r29	; 62
    1158:	0f be       	out	0x3f, r0	; 63
    115a:	cd bf       	out	0x3d, r28	; 61
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	ff 90       	pop	r15
    1166:	ef 90       	pop	r14
    1168:	df 90       	pop	r13
    116a:	cf 90       	pop	r12
    116c:	bf 90       	pop	r11
    116e:	af 90       	pop	r10
    1170:	9f 90       	pop	r9
    1172:	8f 90       	pop	r8
    1174:	7f 90       	pop	r7
    1176:	6f 90       	pop	r6
    1178:	5f 90       	pop	r5
    117a:	4f 90       	pop	r4
    117c:	3f 90       	pop	r3
    117e:	08 95       	ret

00001180 <_ZN6I2Cdev8readByteEhhPhj>:
 * @param regAddr Register regAddr to read from
 * @param data Container for byte value read from device
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
    1180:	0f 93       	push	r16
    1182:	1f 93       	push	r17
    return readBytes(devAddr, regAddr, 1, data, timeout);
    1184:	89 01       	movw	r16, r18
    1186:	9a 01       	movw	r18, r20
    1188:	41 e0       	ldi	r20, 0x01	; 1
    118a:	0e 94 0b 08 	call	0x1016	; 0x1016 <_ZN6I2Cdev9readBytesEhhhPhj>
}
    118e:	1f 91       	pop	r17
    1190:	0f 91       	pop	r16
    1192:	08 95       	ret

00001194 <_ZN6I2Cdev7readBitEhhhPhj>:
 * @param bitNum Bit position to read (0-7)
 * @param data Container for single bit value
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t *data, uint16_t timeout) {
    1194:	df 92       	push	r13
    1196:	ef 92       	push	r14
    1198:	ff 92       	push	r15
    119a:	0f 93       	push	r16
    119c:	1f 93       	push	r17
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	1f 92       	push	r1
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	d4 2e       	mov	r13, r20
    11aa:	79 01       	movw	r14, r18
    11ac:	98 01       	movw	r18, r16
    uint8_t b;
    uint8_t count = readByte(devAddr, regAddr, &b, timeout);
    11ae:	ae 01       	movw	r20, r28
    11b0:	4f 5f       	subi	r20, 0xFF	; 255
    11b2:	5f 4f       	sbci	r21, 0xFF	; 255
    11b4:	0e 94 c0 08 	call	0x1180	; 0x1180 <_ZN6I2Cdev8readByteEhhPhj>
    *data = b & (1 << bitNum);
    11b8:	21 e0       	ldi	r18, 0x01	; 1
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	01 c0       	rjmp	.+2      	; 0x11c0 <_ZN6I2Cdev7readBitEhhhPhj+0x2c>
    11be:	22 0f       	add	r18, r18
    11c0:	da 94       	dec	r13
    11c2:	ea f7       	brpl	.-6      	; 0x11be <_ZN6I2Cdev7readBitEhhhPhj+0x2a>
    11c4:	99 81       	ldd	r25, Y+1	; 0x01
    11c6:	29 23       	and	r18, r25
    11c8:	f7 01       	movw	r30, r14
    11ca:	20 83       	st	Z, r18
    return count;
}
    11cc:	0f 90       	pop	r0
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	1f 91       	pop	r17
    11d4:	0f 91       	pop	r16
    11d6:	ff 90       	pop	r15
    11d8:	ef 90       	pop	r14
    11da:	df 90       	pop	r13
    11dc:	08 95       	ret

000011de <_ZN6I2Cdev8readBitsEhhhhPhj>:
 * @param length Number of bits to read (not more than 8)
 * @param data Container for right-aligned value (i.e. '101' read from any bitStart position will equal 0x05)
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout) {
    11de:	cf 92       	push	r12
    11e0:	df 92       	push	r13
    11e2:	ef 92       	push	r14
    11e4:	ff 92       	push	r15
    11e6:	0f 93       	push	r16
    11e8:	1f 93       	push	r17
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	1f 92       	push	r1
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	d4 2e       	mov	r13, r20
    11f6:	c2 2e       	mov	r12, r18
    11f8:	97 01       	movw	r18, r14
    // 76543210 bit numbers
    //    xxx   args: bitStart=4, length=3
    //    010   masked
    //   -> 010 shifted
    uint8_t count, b;
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0) {
    11fa:	ae 01       	movw	r20, r28
    11fc:	4f 5f       	subi	r20, 0xFF	; 255
    11fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1200:	0e 94 c0 08 	call	0x1180	; 0x1180 <_ZN6I2Cdev8readByteEhhPhj>
    1204:	88 23       	and	r24, r24
    1206:	f1 f0       	breq	.+60     	; 0x1244 <_ZN6I2Cdev8readBitsEhhhhPhj+0x66>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    1208:	4d 2d       	mov	r20, r13
    120a:	50 e0       	ldi	r21, 0x00	; 0
    120c:	4c 19       	sub	r20, r12
    120e:	51 09       	sbc	r21, r1
    1210:	4f 5f       	subi	r20, 0xFF	; 255
    1212:	5f 4f       	sbci	r21, 0xFF	; 255
        b &= mask;
        b >>= (bitStart - length + 1);
        *data = b;
    1214:	21 e0       	ldi	r18, 0x01	; 1
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	02 c0       	rjmp	.+4      	; 0x121e <_ZN6I2Cdev8readBitsEhhhhPhj+0x40>
    121a:	22 0f       	add	r18, r18
    121c:	33 1f       	adc	r19, r19
    121e:	ca 94       	dec	r12
    1220:	e2 f7       	brpl	.-8      	; 0x121a <_ZN6I2Cdev8readBitsEhhhhPhj+0x3c>
    1222:	21 50       	subi	r18, 0x01	; 1
    1224:	31 09       	sbc	r19, r1
    1226:	04 2e       	mov	r0, r20
    1228:	01 c0       	rjmp	.+2      	; 0x122c <_ZN6I2Cdev8readBitsEhhhhPhj+0x4e>
    122a:	22 0f       	add	r18, r18
    122c:	0a 94       	dec	r0
    122e:	ea f7       	brpl	.-6      	; 0x122a <_ZN6I2Cdev8readBitsEhhhhPhj+0x4c>
    1230:	99 81       	ldd	r25, Y+1	; 0x01
    1232:	29 23       	and	r18, r25
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	02 c0       	rjmp	.+4      	; 0x123c <_ZN6I2Cdev8readBitsEhhhhPhj+0x5e>
    1238:	35 95       	asr	r19
    123a:	27 95       	ror	r18
    123c:	4a 95       	dec	r20
    123e:	e2 f7       	brpl	.-8      	; 0x1238 <_ZN6I2Cdev8readBitsEhhhhPhj+0x5a>
    1240:	f8 01       	movw	r30, r16
    1242:	20 83       	st	Z, r18
    }
    return count;
}
    1244:	0f 90       	pop	r0
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	1f 91       	pop	r17
    124c:	0f 91       	pop	r16
    124e:	ff 90       	pop	r15
    1250:	ef 90       	pop	r14
    1252:	df 90       	pop	r13
    1254:	cf 90       	pop	r12
    1256:	08 95       	ret

00001258 <_ZN6I2Cdev8writeBitEhhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    1258:	ef 92       	push	r14
    125a:	ff 92       	push	r15
    125c:	0f 93       	push	r16
    125e:	1f 93       	push	r17
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	1f 92       	push	r1
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	18 2f       	mov	r17, r24
    126c:	06 2f       	mov	r16, r22
    126e:	f4 2e       	mov	r15, r20
    1270:	e2 2e       	mov	r14, r18
    uint8_t b;
    readByte(devAddr, regAddr, &b);
    1272:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    1276:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    127a:	ae 01       	movw	r20, r28
    127c:	4f 5f       	subi	r20, 0xFF	; 255
    127e:	5f 4f       	sbci	r21, 0xFF	; 255
    1280:	0e 94 c0 08 	call	0x1180	; 0x1180 <_ZN6I2Cdev8readByteEhhPhj>
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    1286:	41 e0       	ldi	r20, 0x01	; 1
    1288:	50 e0       	ldi	r21, 0x00	; 0
    128a:	01 c0       	rjmp	.+2      	; 0x128e <_ZN6I2Cdev8writeBitEhhhh+0x36>
    128c:	44 0f       	add	r20, r20
    128e:	fa 94       	dec	r15
    1290:	ea f7       	brpl	.-6      	; 0x128c <_ZN6I2Cdev8writeBitEhhhh+0x34>
    1292:	ee 20       	and	r14, r14
    1294:	11 f0       	breq	.+4      	; 0x129a <_ZN6I2Cdev8writeBitEhhhh+0x42>
    1296:	48 2b       	or	r20, r24
    1298:	02 c0       	rjmp	.+4      	; 0x129e <_ZN6I2Cdev8writeBitEhhhh+0x46>
    129a:	40 95       	com	r20
    129c:	48 23       	and	r20, r24
    129e:	49 83       	std	Y+1, r20	; 0x01
    return writeByte(devAddr, regAddr, b);
    12a0:	60 2f       	mov	r22, r16
    12a2:	81 2f       	mov	r24, r17
    12a4:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZN6I2Cdev9writeByteEhhh>
}
    12a8:	0f 90       	pop	r0
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	1f 91       	pop	r17
    12b0:	0f 91       	pop	r16
    12b2:	ff 90       	pop	r15
    12b4:	ef 90       	pop	r14
    12b6:	08 95       	ret

000012b8 <_ZN6I2Cdev9writeBitsEhhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
    12b8:	df 92       	push	r13
    12ba:	ef 92       	push	r14
    12bc:	ff 92       	push	r15
    12be:	0f 93       	push	r16
    12c0:	1f 93       	push	r17
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
    12c6:	1f 92       	push	r1
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	18 2f       	mov	r17, r24
    12ce:	f6 2e       	mov	r15, r22
    12d0:	e4 2e       	mov	r14, r20
    12d2:	d2 2e       	mov	r13, r18
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
    12d4:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    12d8:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    12dc:	ae 01       	movw	r20, r28
    12de:	4f 5f       	subi	r20, 0xFF	; 255
    12e0:	5f 4f       	sbci	r21, 0xFF	; 255
    12e2:	0e 94 c0 08 	call	0x1180	; 0x1180 <_ZN6I2Cdev8readByteEhhPhj>
    12e6:	88 23       	and	r24, r24
    12e8:	39 f1       	breq	.+78     	; 0x1338 <_ZN6I2Cdev9writeBitsEhhhhh+0x80>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    12ea:	2e 2d       	mov	r18, r14
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	2d 19       	sub	r18, r13
    12f0:	31 09       	sbc	r19, r1
    12f2:	2f 5f       	subi	r18, 0xFF	; 255
    12f4:	3f 4f       	sbci	r19, 0xFF	; 255
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <_ZN6I2Cdev9writeBitsEhhhhh+0x48>
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	da 94       	dec	r13
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <_ZN6I2Cdev9writeBitsEhhhhh+0x44>
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	02 2e       	mov	r0, r18
    1308:	01 c0       	rjmp	.+2      	; 0x130c <_ZN6I2Cdev9writeBitsEhhhhh+0x54>
    130a:	88 0f       	add	r24, r24
    130c:	0a 94       	dec	r0
    130e:	ea f7       	brpl	.-6      	; 0x130a <_ZN6I2Cdev9writeBitsEhhhhh+0x52>
        data <<= (bitStart - length + 1); // shift data into correct position
    1310:	40 2f       	mov	r20, r16
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	ba 01       	movw	r22, r20
    1316:	02 c0       	rjmp	.+4      	; 0x131c <_ZN6I2Cdev9writeBitsEhhhhh+0x64>
    1318:	66 0f       	add	r22, r22
    131a:	77 1f       	adc	r23, r23
    131c:	2a 95       	dec	r18
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <_ZN6I2Cdev9writeBitsEhhhhh+0x60>
        data &= mask; // zero all non-important bits in data
        b &= ~(mask); // zero all important bits in existing byte
        b |= data; // combine data with existing byte
    1320:	48 2f       	mov	r20, r24
    1322:	40 95       	com	r20
    1324:	99 81       	ldd	r25, Y+1	; 0x01
    1326:	49 23       	and	r20, r25
    1328:	86 23       	and	r24, r22
    132a:	48 2b       	or	r20, r24
    132c:	49 83       	std	Y+1, r20	; 0x01
        return writeByte(devAddr, regAddr, b);
    132e:	6f 2d       	mov	r22, r15
    1330:	81 2f       	mov	r24, r17
    1332:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZN6I2Cdev9writeByteEhhh>
    1336:	01 c0       	rjmp	.+2      	; 0x133a <_ZN6I2Cdev9writeBitsEhhhhh+0x82>
    } else {
        return false;
    1338:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    133a:	0f 90       	pop	r0
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	1f 91       	pop	r17
    1342:	0f 91       	pop	r16
    1344:	ff 90       	pop	r15
    1346:	ef 90       	pop	r14
    1348:	df 90       	pop	r13
    134a:	08 95       	ret

0000134c <_ZN7MPU6050C1Eh>:
// DMP_CFG_2 register

uint8_t MPU6050::getDMPConfig2() {
    I2Cdev::readByte(devAddr, MPU6050_RA_DMP_CFG_2, buffer);
    return buffer[0];
}
    134c:	fc 01       	movw	r30, r24
    134e:	60 83       	st	Z, r22
    1350:	08 95       	ret

00001352 <_ZN7MPU60507setRateEh>:
    1352:	46 2f       	mov	r20, r22
    1354:	69 e1       	ldi	r22, 0x19	; 25
    1356:	fc 01       	movw	r30, r24
    1358:	80 81       	ld	r24, Z
    135a:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <_ZN6I2Cdev9writeByteEhhh>

0000135e <_ZN7MPU605020setExternalFrameSyncEh>:
    135e:	0f 93       	push	r16
    1360:	06 2f       	mov	r16, r22
    1362:	23 e0       	ldi	r18, 0x03	; 3
    1364:	45 e0       	ldi	r20, 0x05	; 5
    1366:	6a e1       	ldi	r22, 0x1A	; 26
    1368:	fc 01       	movw	r30, r24
    136a:	80 81       	ld	r24, Z
    136c:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_ZN6I2Cdev9writeBitsEhhhhh>
    1370:	0f 91       	pop	r16
    1372:	08 95       	ret

00001374 <_ZN7MPU605011setDLPFModeEh>:
    1374:	0f 93       	push	r16
    1376:	06 2f       	mov	r16, r22
    1378:	23 e0       	ldi	r18, 0x03	; 3
    137a:	42 e0       	ldi	r20, 0x02	; 2
    137c:	6a e1       	ldi	r22, 0x1A	; 26
    137e:	fc 01       	movw	r30, r24
    1380:	80 81       	ld	r24, Z
    1382:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_ZN6I2Cdev9writeBitsEhhhhh>
    1386:	0f 91       	pop	r16
    1388:	08 95       	ret

0000138a <_ZN7MPU605021setFullScaleGyroRangeEh>:
    138a:	0f 93       	push	r16
    138c:	06 2f       	mov	r16, r22
    138e:	22 e0       	ldi	r18, 0x02	; 2
    1390:	44 e0       	ldi	r20, 0x04	; 4
    1392:	6b e1       	ldi	r22, 0x1B	; 27
    1394:	fc 01       	movw	r30, r24
    1396:	80 81       	ld	r24, Z
    1398:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_ZN6I2Cdev9writeBitsEhhhhh>
    139c:	0f 91       	pop	r16
    139e:	08 95       	ret

000013a0 <_ZN7MPU605022setFullScaleAccelRangeEh>:
    13a0:	0f 93       	push	r16
    13a2:	06 2f       	mov	r16, r22
    13a4:	22 e0       	ldi	r18, 0x02	; 2
    13a6:	44 e0       	ldi	r20, 0x04	; 4
    13a8:	6c e1       	ldi	r22, 0x1C	; 28
    13aa:	fc 01       	movw	r30, r24
    13ac:	80 81       	ld	r24, Z
    13ae:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_ZN6I2Cdev9writeBitsEhhhhh>
    13b2:	0f 91       	pop	r16
    13b4:	08 95       	ret

000013b6 <_ZN7MPU605027setMotionDetectionThresholdEh>:
    13b6:	46 2f       	mov	r20, r22
    13b8:	6f e1       	ldi	r22, 0x1F	; 31
    13ba:	fc 01       	movw	r30, r24
    13bc:	80 81       	ld	r24, Z
    13be:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <_ZN6I2Cdev9writeByteEhhh>

000013c2 <_ZN7MPU605026setMotionDetectionDurationEh>:
    13c2:	46 2f       	mov	r20, r22
    13c4:	60 e2       	ldi	r22, 0x20	; 32
    13c6:	fc 01       	movw	r30, r24
    13c8:	80 81       	ld	r24, Z
    13ca:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <_ZN6I2Cdev9writeByteEhhh>

000013ce <_ZN7MPU605031setZeroMotionDetectionThresholdEh>:
    13ce:	46 2f       	mov	r20, r22
    13d0:	61 e2       	ldi	r22, 0x21	; 33
    13d2:	fc 01       	movw	r30, r24
    13d4:	80 81       	ld	r24, Z
    13d6:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <_ZN6I2Cdev9writeByteEhhh>

000013da <_ZN7MPU605030setZeroMotionDetectionDurationEh>:
    13da:	46 2f       	mov	r20, r22
    13dc:	62 e2       	ldi	r22, 0x22	; 34
    13de:	fc 01       	movw	r30, r24
    13e0:	80 81       	ld	r24, Z
    13e2:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <_ZN6I2Cdev9writeByteEhhh>

000013e6 <_ZN7MPU605015setSlaveAddressEhh>:
    13e6:	64 30       	cpi	r22, 0x04	; 4
    13e8:	40 f4       	brcc	.+16     	; 0x13fa <_ZN7MPU605015setSlaveAddressEhh+0x14>
    13ea:	26 2f       	mov	r18, r22
    13ec:	22 0f       	add	r18, r18
    13ee:	62 0f       	add	r22, r18
    13f0:	6b 5d       	subi	r22, 0xDB	; 219
    13f2:	fc 01       	movw	r30, r24
    13f4:	80 81       	ld	r24, Z
    13f6:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <_ZN6I2Cdev9writeByteEhhh>
    13fa:	08 95       	ret

000013fc <_ZN7MPU605013setIntEnabledEh>:
    13fc:	46 2f       	mov	r20, r22
    13fe:	68 e3       	ldi	r22, 0x38	; 56
    1400:	fc 01       	movw	r30, r24
    1402:	80 81       	ld	r24, Z
    1404:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <_ZN6I2Cdev9writeByteEhhh>

00001408 <_ZN7MPU605012getIntStatusEv>:
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
    140c:	ec 01       	movw	r28, r24
    140e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    1412:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    1416:	ac 01       	movw	r20, r24
    1418:	4f 5f       	subi	r20, 0xFF	; 255
    141a:	5f 4f       	sbci	r21, 0xFF	; 255
    141c:	6a e3       	ldi	r22, 0x3A	; 58
    141e:	88 81       	ld	r24, Y
    1420:	0e 94 c0 08 	call	0x1180	; 0x1180 <_ZN6I2Cdev8readByteEhhPhj>
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	08 95       	ret

0000142c <_ZN7MPU605014setFIFOEnabledEb>:
    142c:	26 2f       	mov	r18, r22
    142e:	46 e0       	ldi	r20, 0x06	; 6
    1430:	6a e6       	ldi	r22, 0x6A	; 106
    1432:	fc 01       	movw	r30, r24
    1434:	80 81       	ld	r24, Z
    1436:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <_ZN6I2Cdev8writeBitEhhhh>

0000143a <_ZN7MPU605023setI2CMasterModeEnabledEb>:
    143a:	26 2f       	mov	r18, r22
    143c:	45 e0       	ldi	r20, 0x05	; 5
    143e:	6a e6       	ldi	r22, 0x6A	; 106
    1440:	fc 01       	movw	r30, r24
    1442:	80 81       	ld	r24, Z
    1444:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <_ZN6I2Cdev8writeBitEhhhh>

00001448 <_ZN7MPU60509resetFIFOEv>:
    1448:	21 e0       	ldi	r18, 0x01	; 1
    144a:	42 e0       	ldi	r20, 0x02	; 2
    144c:	6a e6       	ldi	r22, 0x6A	; 106
    144e:	fc 01       	movw	r30, r24
    1450:	80 81       	ld	r24, Z
    1452:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <_ZN6I2Cdev8writeBitEhhhh>

00001456 <_ZN7MPU605014resetI2CMasterEv>:
    1456:	21 e0       	ldi	r18, 0x01	; 1
    1458:	41 e0       	ldi	r20, 0x01	; 1
    145a:	6a e6       	ldi	r22, 0x6A	; 106
    145c:	fc 01       	movw	r30, r24
    145e:	80 81       	ld	r24, Z
    1460:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <_ZN6I2Cdev8writeBitEhhhh>

00001464 <_ZN7MPU60505resetEv>:
    1464:	21 e0       	ldi	r18, 0x01	; 1
    1466:	47 e0       	ldi	r20, 0x07	; 7
    1468:	6b e6       	ldi	r22, 0x6B	; 107
    146a:	fc 01       	movw	r30, r24
    146c:	80 81       	ld	r24, Z
    146e:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <_ZN6I2Cdev8writeBitEhhhh>

00001472 <_ZN7MPU605015setSleepEnabledEb>:
    1472:	26 2f       	mov	r18, r22
    1474:	46 e0       	ldi	r20, 0x06	; 6
    1476:	6b e6       	ldi	r22, 0x6B	; 107
    1478:	fc 01       	movw	r30, r24
    147a:	80 81       	ld	r24, Z
    147c:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <_ZN6I2Cdev8writeBitEhhhh>

00001480 <_ZN7MPU605014setClockSourceEh>:
    1480:	0f 93       	push	r16
    1482:	06 2f       	mov	r16, r22
    1484:	23 e0       	ldi	r18, 0x03	; 3
    1486:	42 e0       	ldi	r20, 0x02	; 2
    1488:	6b e6       	ldi	r22, 0x6B	; 107
    148a:	fc 01       	movw	r30, r24
    148c:	80 81       	ld	r24, Z
    148e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_ZN6I2Cdev9writeBitsEhhhhh>
    1492:	0f 91       	pop	r16
    1494:	08 95       	ret

00001496 <_ZN7MPU605010initializeEv>:
    1496:	cf 93       	push	r28
    1498:	df 93       	push	r29
    149a:	ec 01       	movw	r28, r24
    149c:	61 e0       	ldi	r22, 0x01	; 1
    149e:	0e 94 40 0a 	call	0x1480	; 0x1480 <_ZN7MPU605014setClockSourceEh>
    14a2:	60 e0       	ldi	r22, 0x00	; 0
    14a4:	ce 01       	movw	r24, r28
    14a6:	0e 94 c5 09 	call	0x138a	; 0x138a <_ZN7MPU605021setFullScaleGyroRangeEh>
    14aa:	60 e0       	ldi	r22, 0x00	; 0
    14ac:	ce 01       	movw	r24, r28
    14ae:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_ZN7MPU605022setFullScaleAccelRangeEh>
    14b2:	60 e0       	ldi	r22, 0x00	; 0
    14b4:	ce 01       	movw	r24, r28
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <_ZN7MPU605015setSleepEnabledEb>

000014be <_ZN7MPU605012getFIFOCountEv>:
    14be:	0f 93       	push	r16
    14c0:	1f 93       	push	r17
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
    14c6:	ec 01       	movw	r28, r24
    14c8:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    14cc:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    14d0:	9c 01       	movw	r18, r24
    14d2:	2f 5f       	subi	r18, 0xFF	; 255
    14d4:	3f 4f       	sbci	r19, 0xFF	; 255
    14d6:	42 e0       	ldi	r20, 0x02	; 2
    14d8:	62 e7       	ldi	r22, 0x72	; 114
    14da:	88 81       	ld	r24, Y
    14dc:	0e 94 0b 08 	call	0x1016	; 0x1016 <_ZN6I2Cdev9readBytesEhhhPhj>
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	9a 81       	ldd	r25, Y+2	; 0x02
    14e4:	98 27       	eor	r25, r24
    14e6:	89 27       	eor	r24, r25
    14e8:	98 27       	eor	r25, r24
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	1f 91       	pop	r17
    14f0:	0f 91       	pop	r16
    14f2:	08 95       	ret

000014f4 <_ZN7MPU605012getFIFOBytesEPhh>:
    14f4:	0f 93       	push	r16
    14f6:	1f 93       	push	r17
    14f8:	44 23       	and	r20, r20
    14fa:	59 f0       	breq	.+22     	; 0x1512 <_ZN7MPU605012getFIFOBytesEPhh+0x1e>
    14fc:	9b 01       	movw	r18, r22
    14fe:	fc 01       	movw	r30, r24
    1500:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    1504:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    1508:	64 e7       	ldi	r22, 0x74	; 116
    150a:	80 81       	ld	r24, Z
    150c:	0e 94 0b 08 	call	0x1016	; 0x1016 <_ZN6I2Cdev9readBytesEhhhPhj>
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <_ZN7MPU605012getFIFOBytesEPhh+0x22>
    1512:	fb 01       	movw	r30, r22
    1514:	10 82       	st	Z, r1
    1516:	1f 91       	pop	r17
    1518:	0f 91       	pop	r16
    151a:	08 95       	ret

0000151c <_ZN7MPU605011getDeviceIDEv>:
    151c:	ef 92       	push	r14
    151e:	ff 92       	push	r15
    1520:	0f 93       	push	r16
    1522:	1f 93       	push	r17
    1524:	cf 93       	push	r28
    1526:	df 93       	push	r29
    1528:	ec 01       	movw	r28, r24
    152a:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    152e:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    1532:	8c 01       	movw	r16, r24
    1534:	0f 5f       	subi	r16, 0xFF	; 255
    1536:	1f 4f       	sbci	r17, 0xFF	; 255
    1538:	26 e0       	ldi	r18, 0x06	; 6
    153a:	46 e0       	ldi	r20, 0x06	; 6
    153c:	65 e7       	ldi	r22, 0x75	; 117
    153e:	88 81       	ld	r24, Y
    1540:	0e 94 ef 08 	call	0x11de	; 0x11de <_ZN6I2Cdev8readBitsEhhhhPhj>
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	df 91       	pop	r29
    1548:	cf 91       	pop	r28
    154a:	1f 91       	pop	r17
    154c:	0f 91       	pop	r16
    154e:	ff 90       	pop	r15
    1550:	ef 90       	pop	r14
    1552:	08 95       	ret

00001554 <_ZN7MPU605015getOTPBankValidEv>:
    1554:	0f 93       	push	r16
    1556:	1f 93       	push	r17
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	ec 01       	movw	r28, r24
    155e:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    1562:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    1566:	9c 01       	movw	r18, r24
    1568:	2f 5f       	subi	r18, 0xFF	; 255
    156a:	3f 4f       	sbci	r19, 0xFF	; 255
    156c:	40 e0       	ldi	r20, 0x00	; 0
    156e:	60 e0       	ldi	r22, 0x00	; 0
    1570:	88 81       	ld	r24, Y
    1572:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN6I2Cdev7readBitEhhhPhj>
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	1f 91       	pop	r17
    157e:	0f 91       	pop	r16
    1580:	08 95       	ret

00001582 <_ZN7MPU605015setOTPBankValidEb>:
    1582:	26 2f       	mov	r18, r22
    1584:	40 e0       	ldi	r20, 0x00	; 0
    1586:	60 e0       	ldi	r22, 0x00	; 0
    1588:	fc 01       	movw	r30, r24
    158a:	80 81       	ld	r24, Z
    158c:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <_ZN6I2Cdev8writeBitEhhhh>

00001590 <_ZN7MPU605015setZAccelOffsetEi>:
    1590:	0f 93       	push	r16
    1592:	1f 93       	push	r17
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	ec 01       	movw	r28, r24
    159a:	8b 01       	movw	r16, r22
    159c:	0e 94 8e 0a 	call	0x151c	; 0x151c <_ZN7MPU605011getDeviceIDEv>
    15a0:	88 33       	cpi	r24, 0x38	; 56
    15a2:	10 f0       	brcs	.+4      	; 0x15a8 <_ZN7MPU605015setZAccelOffsetEi+0x18>
    15a4:	6d e7       	ldi	r22, 0x7D	; 125
    15a6:	01 c0       	rjmp	.+2      	; 0x15aa <_ZN7MPU605015setZAccelOffsetEi+0x1a>
    15a8:	6a e0       	ldi	r22, 0x0A	; 10
    15aa:	a8 01       	movw	r20, r16
    15ac:	88 81       	ld	r24, Y
    15ae:	df 91       	pop	r29
    15b0:	cf 91       	pop	r28
    15b2:	1f 91       	pop	r17
    15b4:	0f 91       	pop	r16
    15b6:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <_ZN6I2Cdev9writeWordEhhj>

000015ba <_ZN7MPU605014setXGyroOffsetEi>:
    15ba:	ab 01       	movw	r20, r22
    15bc:	63 e1       	ldi	r22, 0x13	; 19
    15be:	fc 01       	movw	r30, r24
    15c0:	80 81       	ld	r24, Z
    15c2:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <_ZN6I2Cdev9writeWordEhhj>

000015c6 <_ZN7MPU605014setYGyroOffsetEi>:
    15c6:	ab 01       	movw	r20, r22
    15c8:	65 e1       	ldi	r22, 0x15	; 21
    15ca:	fc 01       	movw	r30, r24
    15cc:	80 81       	ld	r24, Z
    15ce:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <_ZN6I2Cdev9writeWordEhhj>

000015d2 <_ZN7MPU605014setZGyroOffsetEi>:
    15d2:	ab 01       	movw	r20, r22
    15d4:	67 e1       	ldi	r22, 0x17	; 23
    15d6:	fc 01       	movw	r30, r24
    15d8:	80 81       	ld	r24, Z
    15da:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <_ZN6I2Cdev9writeWordEhhj>

000015de <_ZN7MPU605013setDMPEnabledEb>:
    15de:	26 2f       	mov	r18, r22
    15e0:	47 e0       	ldi	r20, 0x07	; 7
    15e2:	6a e6       	ldi	r22, 0x6A	; 106
    15e4:	fc 01       	movw	r30, r24
    15e6:	80 81       	ld	r24, Z
    15e8:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <_ZN6I2Cdev8writeBitEhhhh>

000015ec <_ZN7MPU60508resetDMPEv>:
    15ec:	21 e0       	ldi	r18, 0x01	; 1
    15ee:	43 e0       	ldi	r20, 0x03	; 3
    15f0:	6a e6       	ldi	r22, 0x6A	; 106
    15f2:	fc 01       	movw	r30, r24
    15f4:	80 81       	ld	r24, Z
    15f6:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <_ZN6I2Cdev8writeBitEhhhh>

000015fa <_ZN7MPU605013setMemoryBankEhbb>:
    15fa:	6f 71       	andi	r22, 0x1F	; 31
    15fc:	21 11       	cpse	r18, r1
    15fe:	60 62       	ori	r22, 0x20	; 32
    1600:	41 11       	cpse	r20, r1
    1602:	60 64       	ori	r22, 0x40	; 64
    1604:	46 2f       	mov	r20, r22
    1606:	6d e6       	ldi	r22, 0x6D	; 109
    1608:	fc 01       	movw	r30, r24
    160a:	80 81       	ld	r24, Z
    160c:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <_ZN6I2Cdev9writeByteEhhh>

00001610 <_ZN7MPU605021setMemoryStartAddressEh>:
    1610:	46 2f       	mov	r20, r22
    1612:	6e e6       	ldi	r22, 0x6E	; 110
    1614:	fc 01       	movw	r30, r24
    1616:	80 81       	ld	r24, Z
    1618:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <_ZN6I2Cdev9writeByteEhhh>

0000161c <_ZN7MPU605014readMemoryByteEv>:
    161c:	cf 93       	push	r28
    161e:	df 93       	push	r29
    1620:	ec 01       	movw	r28, r24
    1622:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    1626:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    162a:	ac 01       	movw	r20, r24
    162c:	4f 5f       	subi	r20, 0xFF	; 255
    162e:	5f 4f       	sbci	r21, 0xFF	; 255
    1630:	6f e6       	ldi	r22, 0x6F	; 111
    1632:	88 81       	ld	r24, Y
    1634:	0e 94 c0 08 	call	0x1180	; 0x1180 <_ZN6I2Cdev8readByteEhhPhj>
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	08 95       	ret

00001640 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>:
    1640:	2f 92       	push	r2
    1642:	3f 92       	push	r3
    1644:	4f 92       	push	r4
    1646:	5f 92       	push	r5
    1648:	6f 92       	push	r6
    164a:	7f 92       	push	r7
    164c:	8f 92       	push	r8
    164e:	9f 92       	push	r9
    1650:	af 92       	push	r10
    1652:	bf 92       	push	r11
    1654:	cf 92       	push	r12
    1656:	df 92       	push	r13
    1658:	ef 92       	push	r14
    165a:	ff 92       	push	r15
    165c:	0f 93       	push	r16
    165e:	1f 93       	push	r17
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
    1664:	00 d0       	rcall	.+0      	; 0x1666 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x26>
    1666:	00 d0       	rcall	.+0      	; 0x1668 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x28>
    1668:	1f 92       	push	r1
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    166e:	9d 83       	std	Y+5, r25	; 0x05
    1670:	8c 83       	std	Y+4, r24	; 0x04
    1672:	1b 01       	movw	r2, r22
    1674:	3a 01       	movw	r6, r20
    1676:	29 83       	std	Y+1, r18	; 0x01
    1678:	50 2e       	mov	r5, r16
    167a:	eb 82       	std	Y+3, r14	; 0x03
    167c:	ca 82       	std	Y+2, r12	; 0x02
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	40 e0       	ldi	r20, 0x00	; 0
    1682:	69 81       	ldd	r22, Y+1	; 0x01
    1684:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <_ZN7MPU605013setMemoryBankEhbb>
    1688:	60 2f       	mov	r22, r16
    168a:	8c 81       	ldd	r24, Y+4	; 0x04
    168c:	9d 81       	ldd	r25, Y+5	; 0x05
    168e:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN7MPU605021setMemoryStartAddressEh>
    1692:	eb 80       	ldd	r14, Y+3	; 0x03
    1694:	ee 20       	and	r14, r14
    1696:	31 f0       	breq	.+12     	; 0x16a4 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x64>
    1698:	80 e1       	ldi	r24, 0x10	; 16
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <malloc>
    16a0:	5c 01       	movw	r10, r24
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x68>
    16a4:	a1 2c       	mov	r10, r1
    16a6:	b1 2c       	mov	r11, r1
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	88 23       	and	r24, r24
    16ac:	31 f0       	breq	.+12     	; 0x16ba <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x7a>
    16ae:	80 e1       	ldi	r24, 0x10	; 16
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <malloc>
    16b6:	6c 01       	movw	r12, r24
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x7e>
    16ba:	c1 2c       	mov	r12, r1
    16bc:	d1 2c       	mov	r13, r1
    16be:	e1 2c       	mov	r14, r1
    16c0:	f1 2c       	mov	r15, r1
    16c2:	e6 14       	cp	r14, r6
    16c4:	f7 04       	cpc	r15, r7
    16c6:	08 f0       	brcs	.+2      	; 0x16ca <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x8a>
    16c8:	7b c0       	rjmp	.+246    	; 0x17c0 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x180>
    16ca:	c7 01       	movw	r24, r14
    16cc:	40 96       	adiw	r24, 0x10	; 16
    16ce:	68 16       	cp	r6, r24
    16d0:	79 06       	cpc	r7, r25
    16d2:	18 f4       	brcc	.+6      	; 0x16da <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x9a>
    16d4:	46 2c       	mov	r4, r6
    16d6:	4e 18       	sub	r4, r14
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x9e>
    16da:	80 e1       	ldi	r24, 0x10	; 16
    16dc:	48 2e       	mov	r4, r24
    16de:	84 2d       	mov	r24, r4
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	31 e0       	ldi	r19, 0x01	; 1
    16e6:	25 19       	sub	r18, r5
    16e8:	31 09       	sbc	r19, r1
    16ea:	28 17       	cp	r18, r24
    16ec:	39 07       	cpc	r19, r25
    16ee:	14 f4       	brge	.+4      	; 0x16f4 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0xb4>
    16f0:	45 2c       	mov	r4, r5
    16f2:	41 94       	neg	r4
    16f4:	ea 81       	ldd	r30, Y+2	; 0x02
    16f6:	ee 23       	and	r30, r30
    16f8:	71 f0       	breq	.+28     	; 0x1716 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0xd6>
    16fa:	d6 01       	movw	r26, r12
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	84 15       	cp	r24, r4
    1702:	60 f4       	brcc	.+24     	; 0x171c <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0xdc>
    1704:	f7 01       	movw	r30, r14
    1706:	e8 0f       	add	r30, r24
    1708:	f9 1f       	adc	r31, r25
    170a:	e2 0d       	add	r30, r2
    170c:	f3 1d       	adc	r31, r3
    170e:	e4 91       	lpm	r30, Z
    1710:	ed 93       	st	X+, r30
    1712:	01 96       	adiw	r24, 0x01	; 1
    1714:	f5 cf       	rjmp	.-22     	; 0x1700 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0xc0>
    1716:	61 01       	movw	r12, r2
    1718:	ce 0c       	add	r12, r14
    171a:	df 1c       	adc	r13, r15
    171c:	96 01       	movw	r18, r12
    171e:	44 2d       	mov	r20, r4
    1720:	6f e6       	ldi	r22, 0x6F	; 111
    1722:	ec 81       	ldd	r30, Y+4	; 0x04
    1724:	fd 81       	ldd	r31, Y+5	; 0x05
    1726:	80 81       	ld	r24, Z
    1728:	0e 94 84 07 	call	0xf08	; 0xf08 <_ZN6I2Cdev10writeBytesEhhhPh>
    172c:	84 2c       	mov	r8, r4
    172e:	91 2c       	mov	r9, r1
    1730:	fb 81       	ldd	r31, Y+3	; 0x03
    1732:	ff 23       	and	r31, r31
    1734:	61 f1       	breq	.+88     	; 0x178e <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x14e>
    1736:	a1 14       	cp	r10, r1
    1738:	b1 04       	cpc	r11, r1
    173a:	49 f1       	breq	.+82     	; 0x178e <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x14e>
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	40 e0       	ldi	r20, 0x00	; 0
    1740:	69 81       	ldd	r22, Y+1	; 0x01
    1742:	8c 81       	ldd	r24, Y+4	; 0x04
    1744:	9d 81       	ldd	r25, Y+5	; 0x05
    1746:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <_ZN7MPU605013setMemoryBankEhbb>
    174a:	65 2d       	mov	r22, r5
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
    174e:	9d 81       	ldd	r25, Y+5	; 0x05
    1750:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN7MPU605021setMemoryStartAddressEh>
    1754:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    1758:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    175c:	95 01       	movw	r18, r10
    175e:	44 2d       	mov	r20, r4
    1760:	6f e6       	ldi	r22, 0x6F	; 111
    1762:	ec 81       	ldd	r30, Y+4	; 0x04
    1764:	fd 81       	ldd	r31, Y+5	; 0x05
    1766:	80 81       	ld	r24, Z
    1768:	0e 94 0b 08 	call	0x1016	; 0x1016 <_ZN6I2Cdev9readBytesEhhhPhj>
    176c:	a4 01       	movw	r20, r8
    176e:	b5 01       	movw	r22, r10
    1770:	c6 01       	movw	r24, r12
    1772:	0e 94 dd 25 	call	0x4bba	; 0x4bba <memcmp>
    1776:	89 2b       	or	r24, r25
    1778:	51 f0       	breq	.+20     	; 0x178e <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x14e>
    177a:	c5 01       	movw	r24, r10
    177c:	0e 94 81 24 	call	0x4902	; 0x4902 <free>
    1780:	fa 81       	ldd	r31, Y+2	; 0x02
    1782:	ff 23       	and	r31, r31
    1784:	51 f1       	breq	.+84     	; 0x17da <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x19a>
    1786:	c6 01       	movw	r24, r12
    1788:	0e 94 81 24 	call	0x4902	; 0x4902 <free>
    178c:	26 c0       	rjmp	.+76     	; 0x17da <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x19a>
    178e:	e8 0c       	add	r14, r8
    1790:	f9 1c       	adc	r15, r9
    1792:	54 0c       	add	r5, r4
    1794:	e6 14       	cp	r14, r6
    1796:	f7 04       	cpc	r15, r7
    1798:	08 f0       	brcs	.+2      	; 0x179c <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x15c>
    179a:	93 cf       	rjmp	.-218    	; 0x16c2 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x82>
    179c:	51 10       	cpse	r5, r1
    179e:	03 c0       	rjmp	.+6      	; 0x17a6 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x166>
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	8f 5f       	subi	r24, 0xFF	; 255
    17a4:	89 83       	std	Y+1, r24	; 0x01
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	40 e0       	ldi	r20, 0x00	; 0
    17aa:	69 81       	ldd	r22, Y+1	; 0x01
    17ac:	8c 81       	ldd	r24, Y+4	; 0x04
    17ae:	9d 81       	ldd	r25, Y+5	; 0x05
    17b0:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <_ZN7MPU605013setMemoryBankEhbb>
    17b4:	65 2d       	mov	r22, r5
    17b6:	8c 81       	ldd	r24, Y+4	; 0x04
    17b8:	9d 81       	ldd	r25, Y+5	; 0x05
    17ba:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN7MPU605021setMemoryStartAddressEh>
    17be:	81 cf       	rjmp	.-254    	; 0x16c2 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x82>
    17c0:	eb 81       	ldd	r30, Y+3	; 0x03
    17c2:	ee 23       	and	r30, r30
    17c4:	19 f0       	breq	.+6      	; 0x17cc <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x18c>
    17c6:	c5 01       	movw	r24, r10
    17c8:	0e 94 81 24 	call	0x4902	; 0x4902 <free>
    17cc:	fa 81       	ldd	r31, Y+2	; 0x02
    17ce:	ff 23       	and	r31, r31
    17d0:	31 f0       	breq	.+12     	; 0x17de <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x19e>
    17d2:	c6 01       	movw	r24, r12
    17d4:	0e 94 81 24 	call	0x4902	; 0x4902 <free>
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x19e>
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	01 c0       	rjmp	.+2      	; 0x17e0 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x1a0>
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	df 91       	pop	r29
    17ec:	cf 91       	pop	r28
    17ee:	1f 91       	pop	r17
    17f0:	0f 91       	pop	r16
    17f2:	ff 90       	pop	r15
    17f4:	ef 90       	pop	r14
    17f6:	df 90       	pop	r13
    17f8:	cf 90       	pop	r12
    17fa:	bf 90       	pop	r11
    17fc:	af 90       	pop	r10
    17fe:	9f 90       	pop	r9
    1800:	8f 90       	pop	r8
    1802:	7f 90       	pop	r7
    1804:	6f 90       	pop	r6
    1806:	5f 90       	pop	r5
    1808:	4f 90       	pop	r4
    180a:	3f 90       	pop	r3
    180c:	2f 90       	pop	r2
    180e:	08 95       	ret

00001810 <_ZN7MPU605020writeProgMemoryBlockEPKhjhhb>:
    1810:	cf 92       	push	r12
    1812:	ef 92       	push	r14
    1814:	0f 93       	push	r16
    1816:	cc 24       	eor	r12, r12
    1818:	c3 94       	inc	r12
    181a:	0e 94 20 0b 	call	0x1640	; 0x1640 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>
    181e:	0f 91       	pop	r16
    1820:	ef 90       	pop	r14
    1822:	cf 90       	pop	r12
    1824:	08 95       	ret

00001826 <_ZN7MPU605013setDMPConfig1Eh>:
    1826:	46 2f       	mov	r20, r22
    1828:	60 e7       	ldi	r22, 0x70	; 112
    182a:	fc 01       	movw	r30, r24
    182c:	80 81       	ld	r24, Z
    182e:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <_ZN6I2Cdev9writeByteEhhh>

00001832 <_ZN7MPU605013setDMPConfig2Eh>:
void MPU6050::setDMPConfig2(uint8_t config) {
    1832:	46 2f       	mov	r20, r22
    I2Cdev::writeByte(devAddr, MPU6050_RA_DMP_CFG_2, config);
    1834:	61 e7       	ldi	r22, 0x71	; 113
    1836:	fc 01       	movw	r30, r24
    1838:	80 81       	ld	r24, Z
    183a:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <_ZN6I2Cdev9writeByteEhhh>

0000183e <_ZN3PIDC1Edd>:

void PID::setK(double kp_, double ki_, double kd_){
		ki = ki_;
		kd = kd_;
		kp = kp_;
}
    183e:	0f 93       	push	r16
    1840:	1f 93       	push	r17
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
    1846:	ec 01       	movw	r28, r24
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	a0 e9       	ldi	r26, 0x90	; 144
    184e:	b0 e4       	ldi	r27, 0x40	; 64
    1850:	88 87       	std	Y+8, r24	; 0x08
    1852:	99 87       	std	Y+9, r25	; 0x09
    1854:	aa 87       	std	Y+10, r26	; 0x0a
    1856:	bb 87       	std	Y+11, r27	; 0x0b
    1858:	87 e7       	ldi	r24, 0x77	; 119
    185a:	9c ec       	ldi	r25, 0xCC	; 204
    185c:	ab e2       	ldi	r26, 0x2B	; 43
    185e:	b2 e3       	ldi	r27, 0x32	; 50
    1860:	88 83       	st	Y, r24
    1862:	99 83       	std	Y+1, r25	; 0x01
    1864:	aa 83       	std	Y+2, r26	; 0x02
    1866:	bb 83       	std	Y+3, r27	; 0x03
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	a0 e0       	ldi	r26, 0x00	; 0
    186e:	bf e3       	ldi	r27, 0x3F	; 63
    1870:	8c 83       	std	Y+4, r24	; 0x04
    1872:	9d 83       	std	Y+5, r25	; 0x05
    1874:	ae 83       	std	Y+6, r26	; 0x06
    1876:	bf 83       	std	Y+7, r27	; 0x07
    1878:	48 8f       	std	Y+24, r20	; 0x18
    187a:	59 8f       	std	Y+25, r21	; 0x19
    187c:	6a 8f       	std	Y+26, r22	; 0x1a
    187e:	7b 8f       	std	Y+27, r23	; 0x1b
    1880:	0c 8f       	std	Y+28, r16	; 0x1c
    1882:	1d 8f       	std	Y+29, r17	; 0x1d
    1884:	2e 8f       	std	Y+30, r18	; 0x1e
    1886:	3f 8f       	std	Y+31, r19	; 0x1f
    1888:	0e 94 cd 1b 	call	0x379a	; 0x379a <millis>
    188c:	6c 87       	std	Y+12, r22	; 0x0c
    188e:	7d 87       	std	Y+13, r23	; 0x0d
    1890:	8e 87       	std	Y+14, r24	; 0x0e
    1892:	9f 87       	std	Y+15, r25	; 0x0f
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	1f 91       	pop	r17
    189a:	0f 91       	pop	r16
    189c:	08 95       	ret

0000189e <_ZN3PID5setKpEd>:

void PID::setKp(double kp_){
	kp = kp_;
    189e:	fc 01       	movw	r30, r24
    18a0:	40 87       	std	Z+8, r20	; 0x08
    18a2:	51 87       	std	Z+9, r21	; 0x09
    18a4:	62 87       	std	Z+10, r22	; 0x0a
    18a6:	73 87       	std	Z+11, r23	; 0x0b
    18a8:	08 95       	ret

000018aa <_ZN3PID5setKiEd>:
}

void PID::setKi(double ki_){
	ki = ki_;
    18aa:	fc 01       	movw	r30, r24
    18ac:	40 83       	st	Z, r20
    18ae:	51 83       	std	Z+1, r21	; 0x01
    18b0:	62 83       	std	Z+2, r22	; 0x02
    18b2:	73 83       	std	Z+3, r23	; 0x03
    18b4:	08 95       	ret

000018b6 <_ZN3PID5setKdEd>:
}

void PID::setKd(double kd_){
	kd = kd_;
    18b6:	fc 01       	movw	r30, r24
    18b8:	44 83       	std	Z+4, r20	; 0x04
    18ba:	55 83       	std	Z+5, r21	; 0x05
    18bc:	66 83       	std	Z+6, r22	; 0x06
    18be:	77 83       	std	Z+7, r23	; 0x07
    18c0:	08 95       	ret

000018c2 <_ZN3PID6setPosEd>:
}

void PID::setPos(double pos_){
	pos = pos_;
    18c2:	fc 01       	movw	r30, r24
    18c4:	44 8b       	std	Z+20, r20	; 0x14
    18c6:	55 8b       	std	Z+21, r21	; 0x15
    18c8:	66 8b       	std	Z+22, r22	; 0x16
    18ca:	77 8b       	std	Z+23, r23	; 0x17
    18cc:	08 95       	ret

000018ce <_ZN3PID7calcRegEd>:
}

double PID::calcReg(double inp_){
    18ce:	4f 92       	push	r4
    18d0:	5f 92       	push	r5
    18d2:	6f 92       	push	r6
    18d4:	7f 92       	push	r7
    18d6:	8f 92       	push	r8
    18d8:	9f 92       	push	r9
    18da:	af 92       	push	r10
    18dc:	bf 92       	push	r11
    18de:	cf 92       	push	r12
    18e0:	df 92       	push	r13
    18e2:	ef 92       	push	r14
    18e4:	ff 92       	push	r15
    18e6:	0f 93       	push	r16
    18e8:	1f 93       	push	r17
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	ec 01       	movw	r28, r24
    18f0:	2a 01       	movw	r4, r20
    18f2:	3b 01       	movw	r6, r22
	//calculate time interval
	auto currTime = micros();
    18f4:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <micros>
    18f8:	4b 01       	movw	r8, r22
    18fa:	5c 01       	movw	r10, r24
	double dT = (double)(preTime - currTime) / 1000000;
    18fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    18fe:	9d 85       	ldd	r25, Y+13	; 0x0d
    1900:	ae 85       	ldd	r26, Y+14	; 0x0e
    1902:	bf 85       	ldd	r27, Y+15	; 0x0f
    1904:	bc 01       	movw	r22, r24
    1906:	cd 01       	movw	r24, r26
    1908:	68 19       	sub	r22, r8
    190a:	79 09       	sbc	r23, r9
    190c:	8a 09       	sbc	r24, r10
    190e:	9b 09       	sbc	r25, r11
    1910:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__floatunsisf>
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	34 e2       	ldi	r19, 0x24	; 36
    1918:	44 e7       	ldi	r20, 0x74	; 116
    191a:	59 e4       	ldi	r21, 0x49	; 73
    191c:	0e 94 3a 14 	call	0x2874	; 0x2874 <__divsf3>
    1920:	6b 01       	movw	r12, r22
    1922:	7c 01       	movw	r14, r24
	preTime = currTime;
    1924:	8c 86       	std	Y+12, r8	; 0x0c
    1926:	9d 86       	std	Y+13, r9	; 0x0d
    1928:	ae 86       	std	Y+14, r10	; 0x0e
    192a:	bf 86       	std	Y+15, r11	; 0x0f
	
	//get error
	double error = pos - inp_;
    192c:	a3 01       	movw	r20, r6
    192e:	92 01       	movw	r18, r4
    1930:	6c 89       	ldd	r22, Y+20	; 0x14
    1932:	7d 89       	ldd	r23, Y+21	; 0x15
    1934:	8e 89       	ldd	r24, Y+22	; 0x16
    1936:	9f 89       	ldd	r25, Y+23	; 0x17
    1938:	0e 94 56 13 	call	0x26ac	; 0x26ac <__subsf3>
    193c:	4b 01       	movw	r8, r22
    193e:	5c 01       	movw	r10, r24
	double pOut = kp * error;
	double iOut = ki * error * dT;
	double dOut = kd * ((error - preErr) / dT);
	
	//calculate total output
	double output = pOut + iOut + dOut;
    1940:	28 81       	ld	r18, Y
    1942:	39 81       	ldd	r19, Y+1	; 0x01
    1944:	4a 81       	ldd	r20, Y+2	; 0x02
    1946:	5b 81       	ldd	r21, Y+3	; 0x03
    1948:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__mulsf3>
    194c:	a7 01       	movw	r20, r14
    194e:	96 01       	movw	r18, r12
    1950:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__mulsf3>
    1954:	2b 01       	movw	r4, r22
    1956:	3c 01       	movw	r6, r24
    1958:	28 85       	ldd	r18, Y+8	; 0x08
    195a:	39 85       	ldd	r19, Y+9	; 0x09
    195c:	4a 85       	ldd	r20, Y+10	; 0x0a
    195e:	5b 85       	ldd	r21, Y+11	; 0x0b
    1960:	c5 01       	movw	r24, r10
    1962:	b4 01       	movw	r22, r8
    1964:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__mulsf3>
    1968:	9b 01       	movw	r18, r22
    196a:	ac 01       	movw	r20, r24
    196c:	c3 01       	movw	r24, r6
    196e:	b2 01       	movw	r22, r4
    1970:	0e 94 57 13 	call	0x26ae	; 0x26ae <__addsf3>
    1974:	2b 01       	movw	r4, r22
    1976:	3c 01       	movw	r6, r24
    1978:	28 89       	ldd	r18, Y+16	; 0x10
    197a:	39 89       	ldd	r19, Y+17	; 0x11
    197c:	4a 89       	ldd	r20, Y+18	; 0x12
    197e:	5b 89       	ldd	r21, Y+19	; 0x13
    1980:	c5 01       	movw	r24, r10
    1982:	b4 01       	movw	r22, r8
    1984:	0e 94 56 13 	call	0x26ac	; 0x26ac <__subsf3>
    1988:	a7 01       	movw	r20, r14
    198a:	96 01       	movw	r18, r12
    198c:	0e 94 3a 14 	call	0x2874	; 0x2874 <__divsf3>
    1990:	2c 81       	ldd	r18, Y+4	; 0x04
    1992:	3d 81       	ldd	r19, Y+5	; 0x05
    1994:	4e 81       	ldd	r20, Y+6	; 0x06
    1996:	5f 81       	ldd	r21, Y+7	; 0x07
    1998:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__mulsf3>
    199c:	9b 01       	movw	r18, r22
    199e:	ac 01       	movw	r20, r24
    19a0:	c3 01       	movw	r24, r6
    19a2:	b2 01       	movw	r22, r4
    19a4:	0e 94 57 13 	call	0x26ae	; 0x26ae <__addsf3>
    19a8:	7b 01       	movw	r14, r22
    19aa:	8c 01       	movw	r16, r24
	
	//restrict to max/min
	if( output > max )
    19ac:	6c 8c       	ldd	r6, Y+28	; 0x1c
    19ae:	7d 8c       	ldd	r7, Y+29	; 0x1d
    19b0:	ce 8c       	ldd	r12, Y+30	; 0x1e
    19b2:	df 8c       	ldd	r13, Y+31	; 0x1f
    19b4:	93 01       	movw	r18, r6
    19b6:	a6 01       	movw	r20, r12
    19b8:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <__gesf2>
    19bc:	18 16       	cp	r1, r24
    19be:	64 f0       	brlt	.+24     	; 0x19d8 <_ZN3PID7calcRegEd+0x10a>
		output = max;
	else if( output < min )
    19c0:	68 8c       	ldd	r6, Y+24	; 0x18
    19c2:	79 8c       	ldd	r7, Y+25	; 0x19
    19c4:	ca 8c       	ldd	r12, Y+26	; 0x1a
    19c6:	db 8c       	ldd	r13, Y+27	; 0x1b
    19c8:	93 01       	movw	r18, r6
    19ca:	a6 01       	movw	r20, r12
    19cc:	b7 01       	movw	r22, r14
    19ce:	c8 01       	movw	r24, r16
    19d0:	0e 94 35 14 	call	0x286a	; 0x286a <__cmpsf2>
    19d4:	87 ff       	sbrs	r24, 7
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <_ZN3PID7calcRegEd+0x10e>
	//calculate total output
	double output = pOut + iOut + dOut;
	
	//restrict to max/min
	if( output > max )
		output = max;
    19d8:	73 01       	movw	r14, r6
    19da:	86 01       	movw	r16, r12
	else if( output < min )
		output = min;
		
	//save this error for next iteration
	preErr = error;
    19dc:	88 8a       	std	Y+16, r8	; 0x10
    19de:	99 8a       	std	Y+17, r9	; 0x11
    19e0:	aa 8a       	std	Y+18, r10	; 0x12
    19e2:	bb 8a       	std	Y+19, r11	; 0x13
	return output;
}
    19e4:	b7 01       	movw	r22, r14
    19e6:	c8 01       	movw	r24, r16
    19e8:	df 91       	pop	r29
    19ea:	cf 91       	pop	r28
    19ec:	1f 91       	pop	r17
    19ee:	0f 91       	pop	r16
    19f0:	ff 90       	pop	r15
    19f2:	ef 90       	pop	r14
    19f4:	df 90       	pop	r13
    19f6:	cf 90       	pop	r12
    19f8:	bf 90       	pop	r11
    19fa:	af 90       	pop	r10
    19fc:	9f 90       	pop	r9
    19fe:	8f 90       	pop	r8
    1a00:	7f 90       	pop	r7
    1a02:	6f 90       	pop	r6
    1a04:	5f 90       	pop	r5
    1a06:	4f 90       	pop	r4
    1a08:	08 95       	ret

00001a0a <_Z12dmpDataReadyv>:
		Serial.println(kp);
		Serial.print("ki = ");
		Serial.println(ki);
		Serial.print("kd = ");
		Serial.println(kd);
  }
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
    1a10:	08 95       	ret

00001a12 <_ZN7MPU605013dmpInitializeEv>:
    1a12:	af 92       	push	r10
    1a14:	bf 92       	push	r11
    1a16:	cf 92       	push	r12
    1a18:	ef 92       	push	r14
    1a1a:	0f 93       	push	r16
    1a1c:	cf 93       	push	r28
    1a1e:	df 93       	push	r29
    1a20:	00 d0       	rcall	.+0      	; 0x1a22 <_ZN7MPU605013dmpInitializeEv+0x10>
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
    1a26:	5c 01       	movw	r10, r24
    1a28:	6f e1       	ldi	r22, 0x1F	; 31
    1a2a:	75 e0       	ldi	r23, 0x05	; 5
    1a2c:	8f e1       	ldi	r24, 0x1F	; 31
    1a2e:	92 e0       	ldi	r25, 0x02	; 2
    1a30:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1a34:	c5 01       	movw	r24, r10
    1a36:	0e 94 32 0a 	call	0x1464	; 0x1464 <_ZN7MPU60505resetEv>
    1a3a:	6e e1       	ldi	r22, 0x1E	; 30
    1a3c:	70 e0       	ldi	r23, 0x00	; 0
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <delay>
    1a46:	60 e0       	ldi	r22, 0x00	; 0
    1a48:	c5 01       	movw	r24, r10
    1a4a:	0e 94 39 0a 	call	0x1472	; 0x1472 <_ZN7MPU605015setSleepEnabledEb>
    1a4e:	21 e0       	ldi	r18, 0x01	; 1
    1a50:	41 e0       	ldi	r20, 0x01	; 1
    1a52:	60 e1       	ldi	r22, 0x10	; 16
    1a54:	c5 01       	movw	r24, r10
    1a56:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <_ZN7MPU605013setMemoryBankEhbb>
    1a5a:	66 e0       	ldi	r22, 0x06	; 6
    1a5c:	c5 01       	movw	r24, r10
    1a5e:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN7MPU605021setMemoryStartAddressEh>
    1a62:	61 e0       	ldi	r22, 0x01	; 1
    1a64:	75 e0       	ldi	r23, 0x05	; 5
    1a66:	8f e1       	ldi	r24, 0x1F	; 31
    1a68:	92 e0       	ldi	r25, 0x02	; 2
    1a6a:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1a6e:	67 ee       	ldi	r22, 0xE7	; 231
    1a70:	74 e0       	ldi	r23, 0x04	; 4
    1a72:	8f e1       	ldi	r24, 0x1F	; 31
    1a74:	92 e0       	ldi	r25, 0x02	; 2
    1a76:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    1a7a:	c5 01       	movw	r24, r10
    1a7c:	0e 94 0e 0b 	call	0x161c	; 0x161c <_ZN7MPU605014readMemoryByteEv>
    1a80:	4a e0       	ldi	r20, 0x0A	; 10
    1a82:	50 e0       	ldi	r21, 0x00	; 0
    1a84:	68 2f       	mov	r22, r24
    1a86:	8f e1       	ldi	r24, 0x1F	; 31
    1a88:	92 e0       	ldi	r25, 0x02	; 2
    1a8a:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print7printlnEhi>
    1a8e:	6f eb       	ldi	r22, 0xBF	; 191
    1a90:	74 e0       	ldi	r23, 0x04	; 4
    1a92:	8f e1       	ldi	r24, 0x1F	; 31
    1a94:	92 e0       	ldi	r25, 0x02	; 2
    1a96:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	40 e0       	ldi	r20, 0x00	; 0
    1a9e:	60 e0       	ldi	r22, 0x00	; 0
    1aa0:	c5 01       	movw	r24, r10
    1aa2:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <_ZN7MPU605013setMemoryBankEhbb>
    1aa6:	60 ea       	ldi	r22, 0xA0	; 160
    1aa8:	74 e0       	ldi	r23, 0x04	; 4
    1aaa:	8f e1       	ldi	r24, 0x1F	; 31
    1aac:	92 e0       	ldi	r25, 0x02	; 2
    1aae:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1ab2:	63 e9       	ldi	r22, 0x93	; 147
    1ab4:	74 e0       	ldi	r23, 0x04	; 4
    1ab6:	8f e1       	ldi	r24, 0x1F	; 31
    1ab8:	92 e0       	ldi	r25, 0x02	; 2
    1aba:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    1abe:	c5 01       	movw	r24, r10
    1ac0:	0e 94 aa 0a 	call	0x1554	; 0x1554 <_ZN7MPU605015getOTPBankValidEv>
    1ac4:	81 11       	cpse	r24, r1
    1ac6:	03 c0       	rjmp	.+6      	; 0x1ace <_ZN7MPU605013dmpInitializeEv+0xbc>
    1ac8:	63 e8       	ldi	r22, 0x83	; 131
    1aca:	74 e0       	ldi	r23, 0x04	; 4
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <_ZN7MPU605013dmpInitializeEv+0xc0>
    1ace:	6c e8       	ldi	r22, 0x8C	; 140
    1ad0:	74 e0       	ldi	r23, 0x04	; 4
    1ad2:	8f e1       	ldi	r24, 0x1F	; 31
    1ad4:	92 e0       	ldi	r25, 0x02	; 2
    1ad6:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1ada:	60 e6       	ldi	r22, 0x60	; 96
    1adc:	74 e0       	ldi	r23, 0x04	; 4
    1ade:	8f e1       	ldi	r24, 0x1F	; 31
    1ae0:	92 e0       	ldi	r25, 0x02	; 2
    1ae2:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1ae6:	4f e7       	ldi	r20, 0x7F	; 127
    1ae8:	60 e0       	ldi	r22, 0x00	; 0
    1aea:	c5 01       	movw	r24, r10
    1aec:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <_ZN7MPU605015setSlaveAddressEhh>
    1af0:	63 e4       	ldi	r22, 0x43	; 67
    1af2:	74 e0       	ldi	r23, 0x04	; 4
    1af4:	8f e1       	ldi	r24, 0x1F	; 31
    1af6:	92 e0       	ldi	r25, 0x02	; 2
    1af8:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1afc:	60 e0       	ldi	r22, 0x00	; 0
    1afe:	c5 01       	movw	r24, r10
    1b00:	0e 94 1d 0a 	call	0x143a	; 0x143a <_ZN7MPU605023setI2CMasterModeEnabledEb>
    1b04:	69 e1       	ldi	r22, 0x19	; 25
    1b06:	74 e0       	ldi	r23, 0x04	; 4
    1b08:	8f e1       	ldi	r24, 0x1F	; 31
    1b0a:	92 e0       	ldi	r25, 0x02	; 2
    1b0c:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1b10:	48 e6       	ldi	r20, 0x68	; 104
    1b12:	60 e0       	ldi	r22, 0x00	; 0
    1b14:	c5 01       	movw	r24, r10
    1b16:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <_ZN7MPU605015setSlaveAddressEhh>
    1b1a:	69 ef       	ldi	r22, 0xF9	; 249
    1b1c:	73 e0       	ldi	r23, 0x03	; 3
    1b1e:	8f e1       	ldi	r24, 0x1F	; 31
    1b20:	92 e0       	ldi	r25, 0x02	; 2
    1b22:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1b26:	c5 01       	movw	r24, r10
    1b28:	0e 94 2b 0a 	call	0x1456	; 0x1456 <_ZN7MPU605014resetI2CMasterEv>
    1b2c:	64 e1       	ldi	r22, 0x14	; 20
    1b2e:	70 e0       	ldi	r23, 0x00	; 0
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <delay>
    1b38:	67 ed       	ldi	r22, 0xD7	; 215
    1b3a:	73 e0       	ldi	r23, 0x03	; 3
    1b3c:	8f e1       	ldi	r24, 0x1F	; 31
    1b3e:	92 e0       	ldi	r25, 0x02	; 2
    1b40:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1b44:	63 e0       	ldi	r22, 0x03	; 3
    1b46:	c5 01       	movw	r24, r10
    1b48:	0e 94 40 0a 	call	0x1480	; 0x1480 <_ZN7MPU605014setClockSourceEh>
    1b4c:	66 ea       	ldi	r22, 0xA6	; 166
    1b4e:	73 e0       	ldi	r23, 0x03	; 3
    1b50:	8f e1       	ldi	r24, 0x1F	; 31
    1b52:	92 e0       	ldi	r25, 0x02	; 2
    1b54:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1b58:	62 e1       	ldi	r22, 0x12	; 18
    1b5a:	c5 01       	movw	r24, r10
    1b5c:	0e 94 fe 09 	call	0x13fc	; 0x13fc <_ZN7MPU605013setIntEnabledEh>
    1b60:	66 e8       	ldi	r22, 0x86	; 134
    1b62:	73 e0       	ldi	r23, 0x03	; 3
    1b64:	8f e1       	ldi	r24, 0x1F	; 31
    1b66:	92 e0       	ldi	r25, 0x02	; 2
    1b68:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1b6c:	64 e0       	ldi	r22, 0x04	; 4
    1b6e:	c5 01       	movw	r24, r10
    1b70:	0e 94 a9 09 	call	0x1352	; 0x1352 <_ZN7MPU60507setRateEh>
    1b74:	66 e5       	ldi	r22, 0x56	; 86
    1b76:	73 e0       	ldi	r23, 0x03	; 3
    1b78:	8f e1       	ldi	r24, 0x1F	; 31
    1b7a:	92 e0       	ldi	r25, 0x02	; 2
    1b7c:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1b80:	61 e0       	ldi	r22, 0x01	; 1
    1b82:	c5 01       	movw	r24, r10
    1b84:	0e 94 af 09 	call	0x135e	; 0x135e <_ZN7MPU605020setExternalFrameSyncEh>
    1b88:	64 e3       	ldi	r22, 0x34	; 52
    1b8a:	73 e0       	ldi	r23, 0x03	; 3
    1b8c:	8f e1       	ldi	r24, 0x1F	; 31
    1b8e:	92 e0       	ldi	r25, 0x02	; 2
    1b90:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1b94:	63 e0       	ldi	r22, 0x03	; 3
    1b96:	c5 01       	movw	r24, r10
    1b98:	0e 94 ba 09 	call	0x1374	; 0x1374 <_ZN7MPU605011setDLPFModeEh>
    1b9c:	64 e0       	ldi	r22, 0x04	; 4
    1b9e:	73 e0       	ldi	r23, 0x03	; 3
    1ba0:	8f e1       	ldi	r24, 0x1F	; 31
    1ba2:	92 e0       	ldi	r25, 0x02	; 2
    1ba4:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1ba8:	63 e0       	ldi	r22, 0x03	; 3
    1baa:	c5 01       	movw	r24, r10
    1bac:	0e 94 c5 09 	call	0x138a	; 0x138a <_ZN7MPU605021setFullScaleGyroRangeEh>
    1bb0:	6d ed       	ldi	r22, 0xDD	; 221
    1bb2:	72 e0       	ldi	r23, 0x02	; 2
    1bb4:	8f e1       	ldi	r24, 0x1F	; 31
    1bb6:	92 e0       	ldi	r25, 0x02	; 2
    1bb8:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    1bbc:	4a e0       	ldi	r20, 0x0A	; 10
    1bbe:	50 e0       	ldi	r21, 0x00	; 0
    1bc0:	69 e8       	ldi	r22, 0x89	; 137
    1bc2:	77 e0       	ldi	r23, 0x07	; 7
    1bc4:	8f e1       	ldi	r24, 0x1F	; 31
    1bc6:	92 e0       	ldi	r25, 0x02	; 2
    1bc8:	0e 94 ca 19 	call	0x3394	; 0x3394 <_ZN5Print5printEii>
    1bcc:	65 ed       	ldi	r22, 0xD5	; 213
    1bce:	72 e0       	ldi	r23, 0x02	; 2
    1bd0:	8f e1       	ldi	r24, 0x1F	; 31
    1bd2:	92 e0       	ldi	r25, 0x02	; 2
    1bd4:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1bd8:	ee 24       	eor	r14, r14
    1bda:	e3 94       	inc	r14
    1bdc:	00 e0       	ldi	r16, 0x00	; 0
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	49 e8       	ldi	r20, 0x89	; 137
    1be2:	57 e0       	ldi	r21, 0x07	; 7
    1be4:	66 e3       	ldi	r22, 0x36	; 54
    1be6:	75 e0       	ldi	r23, 0x05	; 5
    1be8:	c5 01       	movw	r24, r10
    1bea:	0e 94 08 0c 	call	0x1810	; 0x1810 <_ZN7MPU605020writeProgMemoryBlockEPKhjhhb>
    1bee:	88 23       	and	r24, r24
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <_ZN7MPU605013dmpInitializeEv+0x1e2>
    1bf2:	8a c0       	rjmp	.+276    	; 0x1d08 <_ZN7MPU605013dmpInitializeEv+0x2f6>
    1bf4:	6d ea       	ldi	r22, 0xAD	; 173
    1bf6:	72 e0       	ldi	r23, 0x02	; 2
    1bf8:	8f e1       	ldi	r24, 0x1F	; 31
    1bfa:	92 e0       	ldi	r25, 0x02	; 2
    1bfc:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1c00:	19 82       	std	Y+1, r1	; 0x01
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	8a 83       	std	Y+2, r24	; 0x02
    1c06:	c1 2c       	mov	r12, r1
    1c08:	06 e1       	ldi	r16, 0x16	; 22
    1c0a:	22 e0       	ldi	r18, 0x02	; 2
    1c0c:	42 e0       	ldi	r20, 0x02	; 2
    1c0e:	50 e0       	ldi	r21, 0x00	; 0
    1c10:	be 01       	movw	r22, r28
    1c12:	6f 5f       	subi	r22, 0xFF	; 255
    1c14:	7f 4f       	sbci	r23, 0xFF	; 255
    1c16:	c5 01       	movw	r24, r10
    1c18:	0e 94 20 0b 	call	0x1640	; 0x1640 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>
    1c1c:	63 e0       	ldi	r22, 0x03	; 3
    1c1e:	c5 01       	movw	r24, r10
    1c20:	0e 94 13 0c 	call	0x1826	; 0x1826 <_ZN7MPU605013setDMPConfig1Eh>
    1c24:	60 e0       	ldi	r22, 0x00	; 0
    1c26:	c5 01       	movw	r24, r10
    1c28:	0e 94 19 0c 	call	0x1832	; 0x1832 <_ZN7MPU605013setDMPConfig2Eh>
    1c2c:	63 e9       	ldi	r22, 0x93	; 147
    1c2e:	72 e0       	ldi	r23, 0x02	; 2
    1c30:	8f e1       	ldi	r24, 0x1F	; 31
    1c32:	92 e0       	ldi	r25, 0x02	; 2
    1c34:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1c38:	60 e0       	ldi	r22, 0x00	; 0
    1c3a:	c5 01       	movw	r24, r10
    1c3c:	0e 94 c1 0a 	call	0x1582	; 0x1582 <_ZN7MPU605015setOTPBankValidEb>
    1c40:	68 e6       	ldi	r22, 0x68	; 104
    1c42:	72 e0       	ldi	r23, 0x02	; 2
    1c44:	8f e1       	ldi	r24, 0x1F	; 31
    1c46:	92 e0       	ldi	r25, 0x02	; 2
    1c48:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1c4c:	62 e0       	ldi	r22, 0x02	; 2
    1c4e:	c5 01       	movw	r24, r10
    1c50:	0e 94 db 09 	call	0x13b6	; 0x13b6 <_ZN7MPU605027setMotionDetectionThresholdEh>
    1c54:	66 e3       	ldi	r22, 0x36	; 54
    1c56:	72 e0       	ldi	r23, 0x02	; 2
    1c58:	8f e1       	ldi	r24, 0x1F	; 31
    1c5a:	92 e0       	ldi	r25, 0x02	; 2
    1c5c:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1c60:	6c e9       	ldi	r22, 0x9C	; 156
    1c62:	c5 01       	movw	r24, r10
    1c64:	0e 94 e7 09 	call	0x13ce	; 0x13ce <_ZN7MPU605031setZeroMotionDetectionThresholdEh>
    1c68:	6b e0       	ldi	r22, 0x0B	; 11
    1c6a:	72 e0       	ldi	r23, 0x02	; 2
    1c6c:	8f e1       	ldi	r24, 0x1F	; 31
    1c6e:	92 e0       	ldi	r25, 0x02	; 2
    1c70:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1c74:	60 e5       	ldi	r22, 0x50	; 80
    1c76:	c5 01       	movw	r24, r10
    1c78:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <_ZN7MPU605026setMotionDetectionDurationEh>
    1c7c:	6c ed       	ldi	r22, 0xDC	; 220
    1c7e:	71 e0       	ldi	r23, 0x01	; 1
    1c80:	8f e1       	ldi	r24, 0x1F	; 31
    1c82:	92 e0       	ldi	r25, 0x02	; 2
    1c84:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1c88:	60 e0       	ldi	r22, 0x00	; 0
    1c8a:	c5 01       	movw	r24, r10
    1c8c:	0e 94 ed 09 	call	0x13da	; 0x13da <_ZN7MPU605030setZeroMotionDetectionDurationEh>
    1c90:	6b ec       	ldi	r22, 0xCB	; 203
    1c92:	71 e0       	ldi	r23, 0x01	; 1
    1c94:	8f e1       	ldi	r24, 0x1F	; 31
    1c96:	92 e0       	ldi	r25, 0x02	; 2
    1c98:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1c9c:	61 e0       	ldi	r22, 0x01	; 1
    1c9e:	c5 01       	movw	r24, r10
    1ca0:	0e 94 16 0a 	call	0x142c	; 0x142c <_ZN7MPU605014setFIFOEnabledEb>
    1ca4:	6a eb       	ldi	r22, 0xBA	; 186
    1ca6:	71 e0       	ldi	r23, 0x01	; 1
    1ca8:	8f e1       	ldi	r24, 0x1F	; 31
    1caa:	92 e0       	ldi	r25, 0x02	; 2
    1cac:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1cb0:	c5 01       	movw	r24, r10
    1cb2:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <_ZN7MPU60508resetDMPEv>
    1cb6:	6e e9       	ldi	r22, 0x9E	; 158
    1cb8:	71 e0       	ldi	r23, 0x01	; 1
    1cba:	8f e1       	ldi	r24, 0x1F	; 31
    1cbc:	92 e0       	ldi	r25, 0x02	; 2
    1cbe:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1cc2:	66 e7       	ldi	r22, 0x76	; 118
    1cc4:	71 e0       	ldi	r23, 0x01	; 1
    1cc6:	8f e1       	ldi	r24, 0x1F	; 31
    1cc8:	92 e0       	ldi	r25, 0x02	; 2
    1cca:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1cce:	60 e0       	ldi	r22, 0x00	; 0
    1cd0:	c5 01       	movw	r24, r10
    1cd2:	0e 94 ef 0a 	call	0x15de	; 0x15de <_ZN7MPU605013setDMPEnabledEb>
    1cd6:	6b e3       	ldi	r22, 0x3B	; 59
    1cd8:	71 e0       	ldi	r23, 0x01	; 1
    1cda:	8f e1       	ldi	r24, 0x1F	; 31
    1cdc:	92 e0       	ldi	r25, 0x02	; 2
    1cde:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1ce2:	8a e2       	ldi	r24, 0x2A	; 42
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	f5 01       	movw	r30, r10
    1ce8:	92 8b       	std	Z+18, r25	; 0x12
    1cea:	81 8b       	std	Z+17, r24	; 0x11
    1cec:	63 e0       	ldi	r22, 0x03	; 3
    1cee:	71 e0       	ldi	r23, 0x01	; 1
    1cf0:	8f e1       	ldi	r24, 0x1F	; 31
    1cf2:	92 e0       	ldi	r25, 0x02	; 2
    1cf4:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1cf8:	c5 01       	movw	r24, r10
    1cfa:	0e 94 24 0a 	call	0x1448	; 0x1448 <_ZN7MPU60509resetFIFOEv>
    1cfe:	c5 01       	movw	r24, r10
    1d00:	0e 94 04 0a 	call	0x1408	; 0x1408 <_ZN7MPU605012getIntStatusEv>
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	01 c0       	rjmp	.+2      	; 0x1d0a <_ZN7MPU605013dmpInitializeEv+0x2f8>
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	0f 91       	pop	r16
    1d14:	ef 90       	pop	r14
    1d16:	cf 90       	pop	r12
    1d18:	bf 90       	pop	r11
    1d1a:	af 90       	pop	r10
    1d1c:	08 95       	ret

00001d1e <_ZN7MPU605016dmpGetQuaternionEPiPKh>:
    1d1e:	cf 93       	push	r28
    1d20:	df 93       	push	r29
    1d22:	db 01       	movw	r26, r22
    1d24:	fa 01       	movw	r30, r20
    1d26:	30 97       	sbiw	r30, 0x00	; 0
    1d28:	19 f4       	brne	.+6      	; 0x1d30 <_ZN7MPU605016dmpGetQuaternionEPiPKh+0x12>
    1d2a:	ec 01       	movw	r28, r24
    1d2c:	ef 85       	ldd	r30, Y+15	; 0x0f
    1d2e:	f8 89       	ldd	r31, Y+16	; 0x10
    1d30:	80 81       	ld	r24, Z
    1d32:	91 81       	ldd	r25, Z+1	; 0x01
    1d34:	98 27       	eor	r25, r24
    1d36:	89 27       	eor	r24, r25
    1d38:	98 27       	eor	r25, r24
    1d3a:	11 96       	adiw	r26, 0x01	; 1
    1d3c:	9c 93       	st	X, r25
    1d3e:	8e 93       	st	-X, r24
    1d40:	84 81       	ldd	r24, Z+4	; 0x04
    1d42:	95 81       	ldd	r25, Z+5	; 0x05
    1d44:	98 27       	eor	r25, r24
    1d46:	89 27       	eor	r24, r25
    1d48:	98 27       	eor	r25, r24
    1d4a:	13 96       	adiw	r26, 0x03	; 3
    1d4c:	9c 93       	st	X, r25
    1d4e:	8e 93       	st	-X, r24
    1d50:	12 97       	sbiw	r26, 0x02	; 2
    1d52:	80 85       	ldd	r24, Z+8	; 0x08
    1d54:	91 85       	ldd	r25, Z+9	; 0x09
    1d56:	98 27       	eor	r25, r24
    1d58:	89 27       	eor	r24, r25
    1d5a:	98 27       	eor	r25, r24
    1d5c:	15 96       	adiw	r26, 0x05	; 5
    1d5e:	9c 93       	st	X, r25
    1d60:	8e 93       	st	-X, r24
    1d62:	14 97       	sbiw	r26, 0x04	; 4
    1d64:	84 85       	ldd	r24, Z+12	; 0x0c
    1d66:	95 85       	ldd	r25, Z+13	; 0x0d
    1d68:	98 27       	eor	r25, r24
    1d6a:	89 27       	eor	r24, r25
    1d6c:	98 27       	eor	r25, r24
    1d6e:	17 96       	adiw	r26, 0x07	; 7
    1d70:	9c 93       	st	X, r25
    1d72:	8e 93       	st	-X, r24
    1d74:	16 97       	sbiw	r26, 0x06	; 6
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	df 91       	pop	r29
    1d7a:	cf 91       	pop	r28
    1d7c:	08 95       	ret

00001d7e <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh>:
    1d7e:	ff 92       	push	r15
    1d80:	0f 93       	push	r16
    1d82:	1f 93       	push	r17
    1d84:	cf 93       	push	r28
    1d86:	df 93       	push	r29
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	28 97       	sbiw	r28, 0x08	; 8
    1d8e:	0f b6       	in	r0, 0x3f	; 63
    1d90:	f8 94       	cli
    1d92:	de bf       	out	0x3e, r29	; 62
    1d94:	0f be       	out	0x3f, r0	; 63
    1d96:	cd bf       	out	0x3d, r28	; 61
    1d98:	8b 01       	movw	r16, r22
    1d9a:	be 01       	movw	r22, r28
    1d9c:	6f 5f       	subi	r22, 0xFF	; 255
    1d9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1da0:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <_ZN7MPU605016dmpGetQuaternionEPiPKh>
    1da4:	f8 2e       	mov	r15, r24
    1da6:	81 11       	cpse	r24, r1
    1da8:	4c c0       	rjmp	.+152    	; 0x1e42 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0xc4>
    1daa:	69 81       	ldd	r22, Y+1	; 0x01
    1dac:	7a 81       	ldd	r23, Y+2	; 0x02
    1dae:	07 2e       	mov	r0, r23
    1db0:	00 0c       	add	r0, r0
    1db2:	88 0b       	sbc	r24, r24
    1db4:	99 0b       	sbc	r25, r25
    1db6:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__floatsisf>
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 e8       	ldi	r20, 0x80	; 128
    1dc0:	58 e3       	ldi	r21, 0x38	; 56
    1dc2:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__mulsf3>
    1dc6:	f8 01       	movw	r30, r16
    1dc8:	60 83       	st	Z, r22
    1dca:	71 83       	std	Z+1, r23	; 0x01
    1dcc:	82 83       	std	Z+2, r24	; 0x02
    1dce:	93 83       	std	Z+3, r25	; 0x03
    1dd0:	6b 81       	ldd	r22, Y+3	; 0x03
    1dd2:	7c 81       	ldd	r23, Y+4	; 0x04
    1dd4:	07 2e       	mov	r0, r23
    1dd6:	00 0c       	add	r0, r0
    1dd8:	88 0b       	sbc	r24, r24
    1dda:	99 0b       	sbc	r25, r25
    1ddc:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__floatsisf>
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	40 e8       	ldi	r20, 0x80	; 128
    1de6:	58 e3       	ldi	r21, 0x38	; 56
    1de8:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__mulsf3>
    1dec:	f8 01       	movw	r30, r16
    1dee:	64 83       	std	Z+4, r22	; 0x04
    1df0:	75 83       	std	Z+5, r23	; 0x05
    1df2:	86 83       	std	Z+6, r24	; 0x06
    1df4:	97 83       	std	Z+7, r25	; 0x07
    1df6:	6d 81       	ldd	r22, Y+5	; 0x05
    1df8:	7e 81       	ldd	r23, Y+6	; 0x06
    1dfa:	07 2e       	mov	r0, r23
    1dfc:	00 0c       	add	r0, r0
    1dfe:	88 0b       	sbc	r24, r24
    1e00:	99 0b       	sbc	r25, r25
    1e02:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__floatsisf>
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	40 e8       	ldi	r20, 0x80	; 128
    1e0c:	58 e3       	ldi	r21, 0x38	; 56
    1e0e:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__mulsf3>
    1e12:	f8 01       	movw	r30, r16
    1e14:	60 87       	std	Z+8, r22	; 0x08
    1e16:	71 87       	std	Z+9, r23	; 0x09
    1e18:	82 87       	std	Z+10, r24	; 0x0a
    1e1a:	93 87       	std	Z+11, r25	; 0x0b
    1e1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e1e:	78 85       	ldd	r23, Y+8	; 0x08
    1e20:	07 2e       	mov	r0, r23
    1e22:	00 0c       	add	r0, r0
    1e24:	88 0b       	sbc	r24, r24
    1e26:	99 0b       	sbc	r25, r25
    1e28:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__floatsisf>
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	40 e8       	ldi	r20, 0x80	; 128
    1e32:	58 e3       	ldi	r21, 0x38	; 56
    1e34:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__mulsf3>
    1e38:	f8 01       	movw	r30, r16
    1e3a:	64 87       	std	Z+12, r22	; 0x0c
    1e3c:	75 87       	std	Z+13, r23	; 0x0d
    1e3e:	86 87       	std	Z+14, r24	; 0x0e
    1e40:	97 87       	std	Z+15, r25	; 0x0f
    1e42:	8f 2d       	mov	r24, r15
    1e44:	28 96       	adiw	r28, 0x08	; 8
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	f8 94       	cli
    1e4a:	de bf       	out	0x3e, r29	; 62
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	cd bf       	out	0x3d, r28	; 61
    1e50:	df 91       	pop	r29
    1e52:	cf 91       	pop	r28
    1e54:	1f 91       	pop	r17
    1e56:	0f 91       	pop	r16
    1e58:	ff 90       	pop	r15
    1e5a:	08 95       	ret

00001e5c <_ZN7MPU605013dmpGetGravityEP11VectorFloatP10Quaternion>:
    1e5c:	4f 92       	push	r4
    1e5e:	5f 92       	push	r5
    1e60:	6f 92       	push	r6
    1e62:	7f 92       	push	r7
    1e64:	8f 92       	push	r8
    1e66:	9f 92       	push	r9
    1e68:	af 92       	push	r10
    1e6a:	bf 92       	push	r11
    1e6c:	cf 92       	push	r12
    1e6e:	df 92       	push	r13
    1e70:	ef 92       	push	r14
    1e72:	ff 92       	push	r15
    1e74:	cf 93       	push	r28
    1e76:	df 93       	push	r29
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
    1e7c:	2a 97       	sbiw	r28, 0x0a	; 10
    1e7e:	0f b6       	in	r0, 0x3f	; 63
    1e80:	f8 94       	cli
    1e82:	de bf       	out	0x3e, r29	; 62
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	cd bf       	out	0x3d, r28	; 61
    1e88:	7a 87       	std	Y+10, r23	; 0x0a
    1e8a:	69 87       	std	Y+9, r22	; 0x09
    1e8c:	fa 01       	movw	r30, r20
    1e8e:	c4 80       	ldd	r12, Z+4	; 0x04
    1e90:	d5 80       	ldd	r13, Z+5	; 0x05
    1e92:	e6 80       	ldd	r14, Z+6	; 0x06
    1e94:	f7 80       	ldd	r15, Z+7	; 0x07
    1e96:	44 84       	ldd	r4, Z+12	; 0x0c
    1e98:	55 84       	ldd	r5, Z+13	; 0x0d
    1e9a:	66 84       	ldd	r6, Z+14	; 0x0e
    1e9c:	77 84       	ldd	r7, Z+15	; 0x0f
    1e9e:	80 80       	ld	r8, Z
    1ea0:	91 80       	ldd	r9, Z+1	; 0x01
    1ea2:	a2 80       	ldd	r10, Z+2	; 0x02
    1ea4:	b3 80       	ldd	r11, Z+3	; 0x03
    1ea6:	80 85       	ldd	r24, Z+8	; 0x08
    1ea8:	91 85       	ldd	r25, Z+9	; 0x09
    1eaa:	a2 85       	ldd	r26, Z+10	; 0x0a
    1eac:	b3 85       	ldd	r27, Z+11	; 0x0b
    1eae:	89 83       	std	Y+1, r24	; 0x01
    1eb0:	9a 83       	std	Y+2, r25	; 0x02
    1eb2:	ab 83       	std	Y+3, r26	; 0x03
    1eb4:	bc 83       	std	Y+4, r27	; 0x04
    1eb6:	a3 01       	movw	r20, r6
    1eb8:	92 01       	movw	r18, r4
    1eba:	c7 01       	movw	r24, r14
    1ebc:	b6 01       	movw	r22, r12
    1ebe:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__mulsf3>
    1ec2:	6d 83       	std	Y+5, r22	; 0x05
    1ec4:	7e 83       	std	Y+6, r23	; 0x06
    1ec6:	8f 83       	std	Y+7, r24	; 0x07
    1ec8:	98 87       	std	Y+8, r25	; 0x08
    1eca:	29 81       	ldd	r18, Y+1	; 0x01
    1ecc:	3a 81       	ldd	r19, Y+2	; 0x02
    1ece:	4b 81       	ldd	r20, Y+3	; 0x03
    1ed0:	5c 81       	ldd	r21, Y+4	; 0x04
    1ed2:	c5 01       	movw	r24, r10
    1ed4:	b4 01       	movw	r22, r8
    1ed6:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__mulsf3>
    1eda:	9b 01       	movw	r18, r22
    1edc:	ac 01       	movw	r20, r24
    1ede:	6d 81       	ldd	r22, Y+5	; 0x05
    1ee0:	7e 81       	ldd	r23, Y+6	; 0x06
    1ee2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ee4:	98 85       	ldd	r25, Y+8	; 0x08
    1ee6:	0e 94 56 13 	call	0x26ac	; 0x26ac <__subsf3>
    1eea:	9b 01       	movw	r18, r22
    1eec:	ac 01       	movw	r20, r24
    1eee:	0e 94 57 13 	call	0x26ae	; 0x26ae <__addsf3>
    1ef2:	a9 85       	ldd	r26, Y+9	; 0x09
    1ef4:	ba 85       	ldd	r27, Y+10	; 0x0a
    1ef6:	6d 93       	st	X+, r22
    1ef8:	7d 93       	st	X+, r23
    1efa:	8d 93       	st	X+, r24
    1efc:	9c 93       	st	X, r25
    1efe:	13 97       	sbiw	r26, 0x03	; 3
    1f00:	a5 01       	movw	r20, r10
    1f02:	94 01       	movw	r18, r8
    1f04:	c7 01       	movw	r24, r14
    1f06:	b6 01       	movw	r22, r12
    1f08:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__mulsf3>
    1f0c:	6d 83       	std	Y+5, r22	; 0x05
    1f0e:	7e 83       	std	Y+6, r23	; 0x06
    1f10:	8f 83       	std	Y+7, r24	; 0x07
    1f12:	98 87       	std	Y+8, r25	; 0x08
    1f14:	29 81       	ldd	r18, Y+1	; 0x01
    1f16:	3a 81       	ldd	r19, Y+2	; 0x02
    1f18:	4b 81       	ldd	r20, Y+3	; 0x03
    1f1a:	5c 81       	ldd	r21, Y+4	; 0x04
    1f1c:	c3 01       	movw	r24, r6
    1f1e:	b2 01       	movw	r22, r4
    1f20:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__mulsf3>
    1f24:	9b 01       	movw	r18, r22
    1f26:	ac 01       	movw	r20, r24
    1f28:	6d 81       	ldd	r22, Y+5	; 0x05
    1f2a:	7e 81       	ldd	r23, Y+6	; 0x06
    1f2c:	8f 81       	ldd	r24, Y+7	; 0x07
    1f2e:	98 85       	ldd	r25, Y+8	; 0x08
    1f30:	0e 94 57 13 	call	0x26ae	; 0x26ae <__addsf3>
    1f34:	9b 01       	movw	r18, r22
    1f36:	ac 01       	movw	r20, r24
    1f38:	0e 94 57 13 	call	0x26ae	; 0x26ae <__addsf3>
    1f3c:	e9 85       	ldd	r30, Y+9	; 0x09
    1f3e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f40:	64 83       	std	Z+4, r22	; 0x04
    1f42:	75 83       	std	Z+5, r23	; 0x05
    1f44:	86 83       	std	Z+6, r24	; 0x06
    1f46:	97 83       	std	Z+7, r25	; 0x07
    1f48:	a5 01       	movw	r20, r10
    1f4a:	94 01       	movw	r18, r8
    1f4c:	c5 01       	movw	r24, r10
    1f4e:	b4 01       	movw	r22, r8
    1f50:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__mulsf3>
    1f54:	4b 01       	movw	r8, r22
    1f56:	5c 01       	movw	r10, r24
    1f58:	a7 01       	movw	r20, r14
    1f5a:	96 01       	movw	r18, r12
    1f5c:	c7 01       	movw	r24, r14
    1f5e:	b6 01       	movw	r22, r12
    1f60:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__mulsf3>
    1f64:	9b 01       	movw	r18, r22
    1f66:	ac 01       	movw	r20, r24
    1f68:	c5 01       	movw	r24, r10
    1f6a:	b4 01       	movw	r22, r8
    1f6c:	0e 94 56 13 	call	0x26ac	; 0x26ac <__subsf3>
    1f70:	6b 01       	movw	r12, r22
    1f72:	7c 01       	movw	r14, r24
    1f74:	29 81       	ldd	r18, Y+1	; 0x01
    1f76:	3a 81       	ldd	r19, Y+2	; 0x02
    1f78:	4b 81       	ldd	r20, Y+3	; 0x03
    1f7a:	5c 81       	ldd	r21, Y+4	; 0x04
    1f7c:	ca 01       	movw	r24, r20
    1f7e:	b9 01       	movw	r22, r18
    1f80:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__mulsf3>
    1f84:	9b 01       	movw	r18, r22
    1f86:	ac 01       	movw	r20, r24
    1f88:	c7 01       	movw	r24, r14
    1f8a:	b6 01       	movw	r22, r12
    1f8c:	0e 94 56 13 	call	0x26ac	; 0x26ac <__subsf3>
    1f90:	6b 01       	movw	r12, r22
    1f92:	7c 01       	movw	r14, r24
    1f94:	a3 01       	movw	r20, r6
    1f96:	92 01       	movw	r18, r4
    1f98:	c3 01       	movw	r24, r6
    1f9a:	b2 01       	movw	r22, r4
    1f9c:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__mulsf3>
    1fa0:	9b 01       	movw	r18, r22
    1fa2:	ac 01       	movw	r20, r24
    1fa4:	c7 01       	movw	r24, r14
    1fa6:	b6 01       	movw	r22, r12
    1fa8:	0e 94 57 13 	call	0x26ae	; 0x26ae <__addsf3>
    1fac:	a9 85       	ldd	r26, Y+9	; 0x09
    1fae:	ba 85       	ldd	r27, Y+10	; 0x0a
    1fb0:	18 96       	adiw	r26, 0x08	; 8
    1fb2:	6d 93       	st	X+, r22
    1fb4:	7d 93       	st	X+, r23
    1fb6:	8d 93       	st	X+, r24
    1fb8:	9c 93       	st	X, r25
    1fba:	1b 97       	sbiw	r26, 0x0b	; 11
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	2a 96       	adiw	r28, 0x0a	; 10
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	f8 94       	cli
    1fc4:	de bf       	out	0x3e, r29	; 62
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	cd bf       	out	0x3d, r28	; 61
    1fca:	df 91       	pop	r29
    1fcc:	cf 91       	pop	r28
    1fce:	ff 90       	pop	r15
    1fd0:	ef 90       	pop	r14
    1fd2:	df 90       	pop	r13
    1fd4:	cf 90       	pop	r12
    1fd6:	bf 90       	pop	r11
    1fd8:	af 90       	pop	r10
    1fda:	9f 90       	pop	r9
    1fdc:	8f 90       	pop	r8
    1fde:	7f 90       	pop	r7
    1fe0:	6f 90       	pop	r6
    1fe2:	5f 90       	pop	r5
    1fe4:	4f 90       	pop	r4
    1fe6:	08 95       	ret

00001fe8 <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat>:
    1fe8:	2f 92       	push	r2
    1fea:	3f 92       	push	r3
    1fec:	4f 92       	push	r4
    1fee:	5f 92       	push	r5
    1ff0:	6f 92       	push	r6
    1ff2:	7f 92       	push	r7
    1ff4:	8f 92       	push	r8
    1ff6:	9f 92       	push	r9
    1ff8:	af 92       	push	r10
    1ffa:	bf 92       	push	r11
    1ffc:	cf 92       	push	r12
    1ffe:	df 92       	push	r13
    2000:	ef 92       	push	r14
    2002:	ff 92       	push	r15
    2004:	0f 93       	push	r16
    2006:	1f 93       	push	r17
    2008:	cf 93       	push	r28
    200a:	df 93       	push	r29
    200c:	00 d0       	rcall	.+0      	; 0x200e <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x26>
    200e:	00 d0       	rcall	.+0      	; 0x2010 <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x28>
    2010:	00 d0       	rcall	.+0      	; 0x2012 <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x2a>
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	8b 01       	movw	r16, r22
    2018:	1a 01       	movw	r2, r20
    201a:	3e 83       	std	Y+6, r19	; 0x06
    201c:	2d 83       	std	Y+5, r18	; 0x05
    201e:	fa 01       	movw	r30, r20
    2020:	c0 80       	ld	r12, Z
    2022:	d1 80       	ldd	r13, Z+1	; 0x01
    2024:	e2 80       	ldd	r14, Z+2	; 0x02
    2026:	f3 80       	ldd	r15, Z+3	; 0x03
    2028:	a7 01       	movw	r20, r14
    202a:	96 01       	movw	r18, r12
    202c:	c7 01       	movw	r24, r14
    202e:	b6 01       	movw	r22, r12
    2030:	0e 94 57 13 	call	0x26ae	; 0x26ae <__addsf3>
    2034:	69 83       	std	Y+1, r22	; 0x01
    2036:	7a 83       	std	Y+2, r23	; 0x02
    2038:	8b 83       	std	Y+3, r24	; 0x03
    203a:	9c 83       	std	Y+4, r25	; 0x04
    203c:	f1 01       	movw	r30, r2
    203e:	84 80       	ldd	r8, Z+4	; 0x04
    2040:	95 80       	ldd	r9, Z+5	; 0x05
    2042:	a6 80       	ldd	r10, Z+6	; 0x06
    2044:	b7 80       	ldd	r11, Z+7	; 0x07
    2046:	a5 01       	movw	r20, r10
    2048:	94 01       	movw	r18, r8
    204a:	c5 01       	movw	r24, r10
    204c:	b4 01       	movw	r22, r8
    204e:	0e 94 57 13 	call	0x26ae	; 0x26ae <__addsf3>
    2052:	2b 01       	movw	r4, r22
    2054:	3c 01       	movw	r6, r24
    2056:	29 81       	ldd	r18, Y+1	; 0x01
    2058:	3a 81       	ldd	r19, Y+2	; 0x02
    205a:	4b 81       	ldd	r20, Y+3	; 0x03
    205c:	5c 81       	ldd	r21, Y+4	; 0x04
    205e:	c7 01       	movw	r24, r14
    2060:	b6 01       	movw	r22, r12
    2062:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__mulsf3>
    2066:	6b 01       	movw	r12, r22
    2068:	7c 01       	movw	r14, r24
    206a:	a3 01       	movw	r20, r6
    206c:	92 01       	movw	r18, r4
    206e:	c5 01       	movw	r24, r10
    2070:	b4 01       	movw	r22, r8
    2072:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__mulsf3>
    2076:	9b 01       	movw	r18, r22
    2078:	ac 01       	movw	r20, r24
    207a:	c7 01       	movw	r24, r14
    207c:	b6 01       	movw	r22, r12
    207e:	0e 94 57 13 	call	0x26ae	; 0x26ae <__addsf3>
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e8       	ldi	r20, 0x80	; 128
    2088:	5f e3       	ldi	r21, 0x3F	; 63
    208a:	0e 94 56 13 	call	0x26ac	; 0x26ac <__subsf3>
    208e:	6b 01       	movw	r12, r22
    2090:	7c 01       	movw	r14, r24
    2092:	f1 01       	movw	r30, r2
    2094:	20 85       	ldd	r18, Z+8	; 0x08
    2096:	31 85       	ldd	r19, Z+9	; 0x09
    2098:	42 85       	ldd	r20, Z+10	; 0x0a
    209a:	53 85       	ldd	r21, Z+11	; 0x0b
    209c:	c3 01       	movw	r24, r6
    209e:	b2 01       	movw	r22, r4
    20a0:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__mulsf3>
    20a4:	2b 01       	movw	r4, r22
    20a6:	3c 01       	movw	r6, r24
    20a8:	f1 01       	movw	r30, r2
    20aa:	24 85       	ldd	r18, Z+12	; 0x0c
    20ac:	35 85       	ldd	r19, Z+13	; 0x0d
    20ae:	46 85       	ldd	r20, Z+14	; 0x0e
    20b0:	57 85       	ldd	r21, Z+15	; 0x0f
    20b2:	69 81       	ldd	r22, Y+1	; 0x01
    20b4:	7a 81       	ldd	r23, Y+2	; 0x02
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ba:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__mulsf3>
    20be:	9b 01       	movw	r18, r22
    20c0:	ac 01       	movw	r20, r24
    20c2:	c3 01       	movw	r24, r6
    20c4:	b2 01       	movw	r22, r4
    20c6:	0e 94 56 13 	call	0x26ac	; 0x26ac <__subsf3>
    20ca:	a7 01       	movw	r20, r14
    20cc:	96 01       	movw	r18, r12
    20ce:	0e 94 d6 13 	call	0x27ac	; 0x27ac <atan2>
    20d2:	f8 01       	movw	r30, r16
    20d4:	60 83       	st	Z, r22
    20d6:	71 83       	std	Z+1, r23	; 0x01
    20d8:	82 83       	std	Z+2, r24	; 0x02
    20da:	93 83       	std	Z+3, r25	; 0x03
    20dc:	ed 81       	ldd	r30, Y+5	; 0x05
    20de:	fe 81       	ldd	r31, Y+6	; 0x06
    20e0:	64 81       	ldd	r22, Z+4	; 0x04
    20e2:	75 81       	ldd	r23, Z+5	; 0x05
    20e4:	86 81       	ldd	r24, Z+6	; 0x06
    20e6:	97 81       	ldd	r25, Z+7	; 0x07
    20e8:	c0 84       	ldd	r12, Z+8	; 0x08
    20ea:	d1 84       	ldd	r13, Z+9	; 0x09
    20ec:	e2 84       	ldd	r14, Z+10	; 0x0a
    20ee:	f3 84       	ldd	r15, Z+11	; 0x0b
    20f0:	9b 01       	movw	r18, r22
    20f2:	ac 01       	movw	r20, r24
    20f4:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__mulsf3>
    20f8:	4b 01       	movw	r8, r22
    20fa:	5c 01       	movw	r10, r24
    20fc:	a7 01       	movw	r20, r14
    20fe:	96 01       	movw	r18, r12
    2100:	c7 01       	movw	r24, r14
    2102:	b6 01       	movw	r22, r12
    2104:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__mulsf3>
    2108:	9b 01       	movw	r18, r22
    210a:	ac 01       	movw	r20, r24
    210c:	c5 01       	movw	r24, r10
    210e:	b4 01       	movw	r22, r8
    2110:	0e 94 57 13 	call	0x26ae	; 0x26ae <__addsf3>
    2114:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <sqrt>
    2118:	9b 01       	movw	r18, r22
    211a:	ac 01       	movw	r20, r24
    211c:	ed 81       	ldd	r30, Y+5	; 0x05
    211e:	fe 81       	ldd	r31, Y+6	; 0x06
    2120:	60 81       	ld	r22, Z
    2122:	71 81       	ldd	r23, Z+1	; 0x01
    2124:	82 81       	ldd	r24, Z+2	; 0x02
    2126:	93 81       	ldd	r25, Z+3	; 0x03
    2128:	0e 94 d6 13 	call	0x27ac	; 0x27ac <atan2>
    212c:	6b 01       	movw	r12, r22
    212e:	7c 01       	movw	r14, r24
    2130:	f8 01       	movw	r30, r16
    2132:	64 83       	std	Z+4, r22	; 0x04
    2134:	75 83       	std	Z+5, r23	; 0x05
    2136:	86 83       	std	Z+6, r24	; 0x06
    2138:	97 83       	std	Z+7, r25	; 0x07
    213a:	ed 81       	ldd	r30, Y+5	; 0x05
    213c:	fe 81       	ldd	r31, Y+6	; 0x06
    213e:	20 85       	ldd	r18, Z+8	; 0x08
    2140:	31 85       	ldd	r19, Z+9	; 0x09
    2142:	42 85       	ldd	r20, Z+10	; 0x0a
    2144:	53 85       	ldd	r21, Z+11	; 0x0b
    2146:	64 81       	ldd	r22, Z+4	; 0x04
    2148:	75 81       	ldd	r23, Z+5	; 0x05
    214a:	86 81       	ldd	r24, Z+6	; 0x06
    214c:	97 81       	ldd	r25, Z+7	; 0x07
    214e:	0e 94 d6 13 	call	0x27ac	; 0x27ac <atan2>
    2152:	f8 01       	movw	r30, r16
    2154:	60 87       	std	Z+8, r22	; 0x08
    2156:	71 87       	std	Z+9, r23	; 0x09
    2158:	82 87       	std	Z+10, r24	; 0x0a
    215a:	93 87       	std	Z+11, r25	; 0x0b
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	a9 01       	movw	r20, r18
    2162:	ed 81       	ldd	r30, Y+5	; 0x05
    2164:	fe 81       	ldd	r31, Y+6	; 0x06
    2166:	60 85       	ldd	r22, Z+8	; 0x08
    2168:	71 85       	ldd	r23, Z+9	; 0x09
    216a:	82 85       	ldd	r24, Z+10	; 0x0a
    216c:	93 85       	ldd	r25, Z+11	; 0x0b
    216e:	0e 94 35 14 	call	0x286a	; 0x286a <__cmpsf2>
    2172:	87 ff       	sbrs	r24, 7
    2174:	1b c0       	rjmp	.+54     	; 0x21ac <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x1c4>
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	a9 01       	movw	r20, r18
    217c:	c7 01       	movw	r24, r14
    217e:	b6 01       	movw	r22, r12
    2180:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <__gesf2>
    2184:	a7 01       	movw	r20, r14
    2186:	96 01       	movw	r18, r12
    2188:	18 16       	cp	r1, r24
    218a:	2c f4       	brge	.+10     	; 0x2196 <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x1ae>
    218c:	6b ed       	ldi	r22, 0xDB	; 219
    218e:	7f e0       	ldi	r23, 0x0F	; 15
    2190:	89 e4       	ldi	r24, 0x49	; 73
    2192:	90 e4       	ldi	r25, 0x40	; 64
    2194:	04 c0       	rjmp	.+8      	; 0x219e <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x1b6>
    2196:	6b ed       	ldi	r22, 0xDB	; 219
    2198:	7f e0       	ldi	r23, 0x0F	; 15
    219a:	89 e4       	ldi	r24, 0x49	; 73
    219c:	90 ec       	ldi	r25, 0xC0	; 192
    219e:	0e 94 56 13 	call	0x26ac	; 0x26ac <__subsf3>
    21a2:	f8 01       	movw	r30, r16
    21a4:	64 83       	std	Z+4, r22	; 0x04
    21a6:	75 83       	std	Z+5, r23	; 0x05
    21a8:	86 83       	std	Z+6, r24	; 0x06
    21aa:	97 83       	std	Z+7, r25	; 0x07
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	26 96       	adiw	r28, 0x06	; 6
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	de bf       	out	0x3e, r29	; 62
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	cd bf       	out	0x3d, r28	; 61
    21ba:	df 91       	pop	r29
    21bc:	cf 91       	pop	r28
    21be:	1f 91       	pop	r17
    21c0:	0f 91       	pop	r16
    21c2:	ff 90       	pop	r15
    21c4:	ef 90       	pop	r14
    21c6:	df 90       	pop	r13
    21c8:	cf 90       	pop	r12
    21ca:	bf 90       	pop	r11
    21cc:	af 90       	pop	r10
    21ce:	9f 90       	pop	r9
    21d0:	8f 90       	pop	r8
    21d2:	7f 90       	pop	r7
    21d4:	6f 90       	pop	r6
    21d6:	5f 90       	pop	r5
    21d8:	4f 90       	pop	r4
    21da:	3f 90       	pop	r3
    21dc:	2f 90       	pop	r2
    21de:	08 95       	ret

000021e0 <_Z10updateDatav>:
    21e0:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <dmpReady>
    21e4:	88 23       	and	r24, r24
    21e6:	09 f4       	brne	.+2      	; 0x21ea <_Z10updateDatav+0xa>
    21e8:	b8 c0       	rjmp	.+368    	; 0x235a <_Z10updateDatav+0x17a>
    21ea:	20 91 df 01 	lds	r18, 0x01DF	; 0x8001df <fifoCount>
    21ee:	30 91 e0 01 	lds	r19, 0x01E0	; 0x8001e0 <fifoCount+0x1>
    21f2:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <packetSize>
    21f6:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <packetSize+0x1>
    21fa:	40 91 72 01 	lds	r20, 0x0172	; 0x800172 <__data_end>
    21fe:	41 11       	cpse	r20, r1
    2200:	03 c0       	rjmp	.+6      	; 0x2208 <_Z10updateDatav+0x28>
    2202:	28 17       	cp	r18, r24
    2204:	39 07       	cpc	r19, r25
    2206:	c8 f3       	brcs	.-14     	; 0x21fa <_Z10updateDatav+0x1a>
    2208:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <__data_end>
    220c:	8c e0       	ldi	r24, 0x0C	; 12
    220e:	92 e0       	ldi	r25, 0x02	; 2
    2210:	0e 94 04 0a 	call	0x1408	; 0x1408 <_ZN7MPU605012getIntStatusEv>
    2214:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <mpuIntStatus>
    2218:	8c e0       	ldi	r24, 0x0C	; 12
    221a:	92 e0       	ldi	r25, 0x02	; 2
    221c:	0e 94 5f 0a 	call	0x14be	; 0x14be <_ZN7MPU605012getFIFOCountEv>
    2220:	9c 01       	movw	r18, r24
    2222:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <fifoCount+0x1>
    2226:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <fifoCount>
    222a:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <mpuIntStatus>
    222e:	94 fd       	sbrc	r25, 4
    2230:	03 c0       	rjmp	.+6      	; 0x2238 <_Z10updateDatav+0x58>
    2232:	21 15       	cp	r18, r1
    2234:	34 40       	sbci	r19, 0x04	; 4
    2236:	51 f4       	brne	.+20     	; 0x224c <_Z10updateDatav+0x6c>
    2238:	8c e0       	ldi	r24, 0x0C	; 12
    223a:	92 e0       	ldi	r25, 0x02	; 2
    223c:	0e 94 24 0a 	call	0x1448	; 0x1448 <_ZN7MPU60509resetFIFOEv>
    2240:	64 ef       	ldi	r22, 0xF4	; 244
    2242:	70 e0       	ldi	r23, 0x00	; 0
    2244:	8f e1       	ldi	r24, 0x1F	; 31
    2246:	92 e0       	ldi	r25, 0x02	; 2
    2248:	0c 94 e9 18 	jmp	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    224c:	91 ff       	sbrs	r25, 1
    224e:	85 c0       	rjmp	.+266    	; 0x235a <_Z10updateDatav+0x17a>
    2250:	40 91 e1 01 	lds	r20, 0x01E1	; 0x8001e1 <packetSize>
    2254:	50 91 e2 01 	lds	r21, 0x01E2	; 0x8001e2 <packetSize+0x1>
    2258:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <fifoCount>
    225c:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <fifoCount+0x1>
    2260:	84 17       	cp	r24, r20
    2262:	95 07       	cpc	r25, r21
    2264:	48 f4       	brcc	.+18     	; 0x2278 <_Z10updateDatav+0x98>
    2266:	8c e0       	ldi	r24, 0x0C	; 12
    2268:	92 e0       	ldi	r25, 0x02	; 2
    226a:	0e 94 5f 0a 	call	0x14be	; 0x14be <_ZN7MPU605012getFIFOCountEv>
    226e:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <fifoCount+0x1>
    2272:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <fifoCount>
    2276:	ec cf       	rjmp	.-40     	; 0x2250 <_Z10updateDatav+0x70>
    2278:	6f e9       	ldi	r22, 0x9F	; 159
    227a:	71 e0       	ldi	r23, 0x01	; 1
    227c:	8c e0       	ldi	r24, 0x0C	; 12
    227e:	92 e0       	ldi	r25, 0x02	; 2
    2280:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <_ZN7MPU605012getFIFOBytesEPhh>
    2284:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <fifoCount>
    2288:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <fifoCount+0x1>
    228c:	20 91 e1 01 	lds	r18, 0x01E1	; 0x8001e1 <packetSize>
    2290:	30 91 e2 01 	lds	r19, 0x01E2	; 0x8001e2 <packetSize+0x1>
    2294:	82 1b       	sub	r24, r18
    2296:	93 0b       	sbc	r25, r19
    2298:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <fifoCount+0x1>
    229c:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <fifoCount>
    22a0:	4f e9       	ldi	r20, 0x9F	; 159
    22a2:	51 e0       	ldi	r21, 0x01	; 1
    22a4:	6f e8       	ldi	r22, 0x8F	; 143
    22a6:	71 e0       	ldi	r23, 0x01	; 1
    22a8:	8c e0       	ldi	r24, 0x0C	; 12
    22aa:	92 e0       	ldi	r25, 0x02	; 2
    22ac:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh>
    22b0:	4f e8       	ldi	r20, 0x8F	; 143
    22b2:	51 e0       	ldi	r21, 0x01	; 1
    22b4:	63 e8       	ldi	r22, 0x83	; 131
    22b6:	71 e0       	ldi	r23, 0x01	; 1
    22b8:	8c e0       	ldi	r24, 0x0C	; 12
    22ba:	92 e0       	ldi	r25, 0x02	; 2
    22bc:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <_ZN7MPU605013dmpGetGravityEP11VectorFloatP10Quaternion>
    22c0:	23 e8       	ldi	r18, 0x83	; 131
    22c2:	31 e0       	ldi	r19, 0x01	; 1
    22c4:	4f e8       	ldi	r20, 0x8F	; 143
    22c6:	51 e0       	ldi	r21, 0x01	; 1
    22c8:	67 e7       	ldi	r22, 0x77	; 119
    22ca:	71 e0       	ldi	r23, 0x01	; 1
    22cc:	8c e0       	ldi	r24, 0x0C	; 12
    22ce:	92 e0       	ldi	r25, 0x02	; 2
    22d0:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat>
    22d4:	20 ee       	ldi	r18, 0xE0	; 224
    22d6:	3e e2       	ldi	r19, 0x2E	; 46
    22d8:	45 e6       	ldi	r20, 0x65	; 101
    22da:	52 e4       	ldi	r21, 0x42	; 66
    22dc:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <ypr>
    22e0:	70 91 78 01 	lds	r23, 0x0178	; 0x800178 <ypr+0x1>
    22e4:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <ypr+0x2>
    22e8:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <ypr+0x3>
    22ec:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__mulsf3>
    22f0:	60 93 77 01 	sts	0x0177, r22	; 0x800177 <ypr>
    22f4:	70 93 78 01 	sts	0x0178, r23	; 0x800178 <ypr+0x1>
    22f8:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <ypr+0x2>
    22fc:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <ypr+0x3>
    2300:	20 ee       	ldi	r18, 0xE0	; 224
    2302:	3e e2       	ldi	r19, 0x2E	; 46
    2304:	45 e6       	ldi	r20, 0x65	; 101
    2306:	52 e4       	ldi	r21, 0x42	; 66
    2308:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <ypr+0x4>
    230c:	70 91 7c 01 	lds	r23, 0x017C	; 0x80017c <ypr+0x5>
    2310:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <ypr+0x6>
    2314:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <ypr+0x7>
    2318:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__mulsf3>
    231c:	60 93 7b 01 	sts	0x017B, r22	; 0x80017b <ypr+0x4>
    2320:	70 93 7c 01 	sts	0x017C, r23	; 0x80017c <ypr+0x5>
    2324:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <ypr+0x6>
    2328:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <ypr+0x7>
    232c:	20 ee       	ldi	r18, 0xE0	; 224
    232e:	3e e2       	ldi	r19, 0x2E	; 46
    2330:	45 e6       	ldi	r20, 0x65	; 101
    2332:	52 e4       	ldi	r21, 0x42	; 66
    2334:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <ypr+0x8>
    2338:	70 91 80 01 	lds	r23, 0x0180	; 0x800180 <ypr+0x9>
    233c:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <ypr+0xa>
    2340:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <ypr+0xb>
    2344:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__mulsf3>
    2348:	60 93 7f 01 	sts	0x017F, r22	; 0x80017f <ypr+0x8>
    234c:	70 93 80 01 	sts	0x0180, r23	; 0x800180 <ypr+0x9>
    2350:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <ypr+0xa>
    2354:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <ypr+0xb>
    2358:	08 95       	ret
    235a:	08 95       	ret

0000235c <_GLOBAL__sub_I__ZN7MPU605013dmpInitializeEv>:
			k.remove(0,1);
			pid.setKd(k.toDouble());
		}
	}
 
}
    235c:	0f 93       	push	r16
    235e:	1f 93       	push	r17

//uncomment to turn on data filter
//#define TURN_ON_FILTER
 
 
MPU6050 mpu;
    2360:	68 e6       	ldi	r22, 0x68	; 104
    2362:	8c e0       	ldi	r24, 0x0C	; 12
    2364:	92 e0       	ldi	r25, 0x02	; 2
    2366:	0e 94 a6 09 	call	0x134c	; 0x134c <_ZN7MPU6050C1Eh>
#ifdef TURN_ON_FILTER
Kalman kalmanX, kalmanY, kalmanZ;
#endif
GimbalMot gm;
    236a:	86 e0       	ldi	r24, 0x06	; 6
    236c:	92 e0       	ldi	r25, 0x02	; 2
    236e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <_ZN9GimbalMotC1Ev>
PID pid(-125,125);
    2372:	00 e0       	ldi	r16, 0x00	; 0
    2374:	10 e0       	ldi	r17, 0x00	; 0
    2376:	2a ef       	ldi	r18, 0xFA	; 250
    2378:	32 e4       	ldi	r19, 0x42	; 66
    237a:	40 e0       	ldi	r20, 0x00	; 0
    237c:	50 e0       	ldi	r21, 0x00	; 0
    237e:	6a ef       	ldi	r22, 0xFA	; 250
    2380:	72 ec       	ldi	r23, 0xC2	; 194
    2382:	86 ee       	ldi	r24, 0xE6	; 230
    2384:	91 e0       	ldi	r25, 0x01	; 1
    2386:	0e 94 1f 0c 	call	0x183e	; 0x183e <_ZN3PIDC1Edd>
        float x;
        float y;
        float z;
        
        Quaternion() {
            w = 1.0f;
    238a:	ef e8       	ldi	r30, 0x8F	; 143
    238c:	f1 e0       	ldi	r31, 0x01	; 1
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	a0 e8       	ldi	r26, 0x80	; 128
    2394:	bf e3       	ldi	r27, 0x3F	; 63
    2396:	80 83       	st	Z, r24
    2398:	91 83       	std	Z+1, r25	; 0x01
    239a:	a2 83       	std	Z+2, r26	; 0x02
    239c:	b3 83       	std	Z+3, r27	; 0x03
            x = 0.0f;
    239e:	14 82       	std	Z+4, r1	; 0x04
    23a0:	15 82       	std	Z+5, r1	; 0x05
    23a2:	16 82       	std	Z+6, r1	; 0x06
    23a4:	17 82       	std	Z+7, r1	; 0x07
            y = 0.0f;
    23a6:	10 86       	std	Z+8, r1	; 0x08
    23a8:	11 86       	std	Z+9, r1	; 0x09
    23aa:	12 86       	std	Z+10, r1	; 0x0a
    23ac:	13 86       	std	Z+11, r1	; 0x0b
            z = 0.0f;
    23ae:	14 86       	std	Z+12, r1	; 0x0c
    23b0:	15 86       	std	Z+13, r1	; 0x0d
    23b2:	16 86       	std	Z+14, r1	; 0x0e
    23b4:	17 86       	std	Z+15, r1	; 0x0f
        float x;
        float y;
        float z;

        VectorFloat() {
            x = 0;
    23b6:	e3 e8       	ldi	r30, 0x83	; 131
    23b8:	f1 e0       	ldi	r31, 0x01	; 1
    23ba:	10 82       	st	Z, r1
    23bc:	11 82       	std	Z+1, r1	; 0x01
    23be:	12 82       	std	Z+2, r1	; 0x02
    23c0:	13 82       	std	Z+3, r1	; 0x03
            y = 0;
    23c2:	14 82       	std	Z+4, r1	; 0x04
    23c4:	15 82       	std	Z+5, r1	; 0x05
    23c6:	16 82       	std	Z+6, r1	; 0x06
    23c8:	17 82       	std	Z+7, r1	; 0x07
            z = 0;
    23ca:	10 86       	std	Z+8, r1	; 0x08
    23cc:	11 86       	std	Z+9, r1	; 0x09
    23ce:	12 86       	std	Z+10, r1	; 0x0a
    23d0:	13 86       	std	Z+11, r1	; 0x0b
			k.remove(0,1);
			pid.setKd(k.toDouble());
		}
	}
 
}
    23d2:	1f 91       	pop	r17
    23d4:	0f 91       	pop	r16
    23d6:	08 95       	ret

000023d8 <_GLOBAL__sub_D__ZN7MPU605013dmpInitializeEv>:
 
MPU6050 mpu;
#ifdef TURN_ON_FILTER
Kalman kalmanX, kalmanY, kalmanZ;
#endif
GimbalMot gm;
    23d8:	86 e0       	ldi	r24, 0x06	; 6
    23da:	92 e0       	ldi	r25, 0x02	; 2
    23dc:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <_ZN9GimbalMotD1Ev>

000023e0 <setup>:
  
  
 
 
void setup()
{
    23e0:	cf 92       	push	r12
    23e2:	df 92       	push	r13
    23e4:	ef 92       	push	r14
    23e6:	ff 92       	push	r15
    23e8:	0f 93       	push	r16
    23ea:	1f 93       	push	r17
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    23ec:	26 e0       	ldi	r18, 0x06	; 6
    23ee:	40 e0       	ldi	r20, 0x00	; 0
    23f0:	52 ec       	ldi	r21, 0xC2	; 194
    23f2:	61 e0       	ldi	r22, 0x01	; 1
    23f4:	70 e0       	ldi	r23, 0x00	; 0
    23f6:	8f e1       	ldi	r24, 0x1F	; 31
    23f8:	92 e0       	ldi	r25, 0x02	; 2
    23fa:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <_ZN14HardwareSerial5beginEmh>
    Serial.begin(115200);
    Serial.flush();
    23fe:	8f e1       	ldi	r24, 0x1F	; 31
    2400:	92 e0       	ldi	r25, 0x02	; 2
    2402:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <_ZN14HardwareSerial5flushEv>
	 Serial.println("init start");
    2406:	6b e2       	ldi	r22, 0x2B	; 43
    2408:	71 e0       	ldi	r23, 0x01	; 1
    240a:	8f e1       	ldi	r24, 0x1F	; 31
    240c:	92 e0       	ldi	r25, 0x02	; 2
    240e:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <_ZN5Print7printlnEPKc>
// join I2C bus (I2Cdev library doesn't do this automatically)
#if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
  Wire.begin();
    2412:	86 ec       	ldi	r24, 0xC6	; 198
    2414:	92 e0       	ldi	r25, 0x02	; 2
    2416:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <_ZN7TwoWire5beginEv>
  TWBR = 24; // 400kHz I2C clock (200kHz if CPU is 8MHz)
    241a:	88 e1       	ldi	r24, 0x18	; 24
    241c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
#elif I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE
  Fastwire::setup(400, true);
#endif

 //Serial.println(F("init start"));
mpu.initialize();
    2420:	8c e0       	ldi	r24, 0x0C	; 12
    2422:	92 e0       	ldi	r25, 0x02	; 2
    2424:	0e 94 4b 0a 	call	0x1496	; 0x1496 <_ZN7MPU605010initializeEv>
//Serial.println(F("init done"));
devStatus = mpu.dmpInitialize();
    2428:	8c e0       	ldi	r24, 0x0C	; 12
    242a:	92 e0       	ldi	r25, 0x02	; 2
    242c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <_ZN7MPU605013dmpInitializeEv>
    2430:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <devStatus>
 //Serial.println(devStatus);
 //Serial.println(mpu.getDLPFMode());
// supply your own gyro offsets here, scaled for min sensitivity
mpu.setXGyroOffset(220);
    2434:	6c ed       	ldi	r22, 0xDC	; 220
    2436:	70 e0       	ldi	r23, 0x00	; 0
    2438:	8c e0       	ldi	r24, 0x0C	; 12
    243a:	92 e0       	ldi	r25, 0x02	; 2
    243c:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_ZN7MPU605014setXGyroOffsetEi>
mpu.setYGyroOffset(76);
    2440:	6c e4       	ldi	r22, 0x4C	; 76
    2442:	70 e0       	ldi	r23, 0x00	; 0
    2444:	8c e0       	ldi	r24, 0x0C	; 12
    2446:	92 e0       	ldi	r25, 0x02	; 2
    2448:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <_ZN7MPU605014setYGyroOffsetEi>
mpu.setZGyroOffset(-85);
    244c:	6b ea       	ldi	r22, 0xAB	; 171
    244e:	7f ef       	ldi	r23, 0xFF	; 255
    2450:	8c e0       	ldi	r24, 0x0C	; 12
    2452:	92 e0       	ldi	r25, 0x02	; 2
    2454:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <_ZN7MPU605014setZGyroOffsetEi>
mpu.setZAccelOffset(1688); // 1688 factory default for my test chip
    2458:	68 e9       	ldi	r22, 0x98	; 152
    245a:	76 e0       	ldi	r23, 0x06	; 6
    245c:	8c e0       	ldi	r24, 0x0C	; 12
    245e:	92 e0       	ldi	r25, 0x02	; 2
    2460:	0e 94 c8 0a 	call	0x1590	; 0x1590 <_ZN7MPU605015setZAccelOffsetEi>
 
// make sure it worked (returns 0 if so)
  if (devStatus == 0)
    2464:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <devStatus>
    2468:	81 11       	cpse	r24, r1
    246a:	1e c0       	rjmp	.+60     	; 0x24a8 <setup+0xc8>
  {
    // turn on the DMP, now that it's ready
    mpu.setDMPEnabled(true);
    246c:	61 e0       	ldi	r22, 0x01	; 1
    246e:	8c e0       	ldi	r24, 0x0C	; 12
    2470:	92 e0       	ldi	r25, 0x02	; 2
    2472:	0e 94 ef 0a 	call	0x15de	; 0x15de <_ZN7MPU605013setDMPEnabledEb>
	//mpu.setDLPFMode(0);
	//mpu.setDHPFMode(0);
	//mpu.CalibrateGyro(10);
	//mpu.CalibrateAccel(10);
    // enable Arduino interrupt detection
    attachInterrupt(0, dmpDataReady, RISING);
    2476:	43 e0       	ldi	r20, 0x03	; 3
    2478:	50 e0       	ldi	r21, 0x00	; 0
    247a:	65 e0       	ldi	r22, 0x05	; 5
    247c:	7d e0       	ldi	r23, 0x0D	; 13
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	0e 94 15 1b 	call	0x362a	; 0x362a <attachInterrupt>
    mpuIntStatus = mpu.getIntStatus();
    2484:	8c e0       	ldi	r24, 0x0C	; 12
    2486:	92 e0       	ldi	r25, 0x02	; 2
    2488:	0e 94 04 0a 	call	0x1408	; 0x1408 <_ZN7MPU605012getIntStatusEv>
    248c:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <mpuIntStatus>
    // set our DMP Ready flag so the main loop() function knows it's okay to use it
    dmpReady = true;
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <dmpReady>

    // get expected DMP packet size for later comparison
    packetSize = mpu.dmpGetFIFOPacketSize();
    2496:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <mpu+0x11>
    249a:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <mpu+0x12>
    249e:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <packetSize+0x1>
    24a2:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <packetSize>
    24a6:	14 c0       	rjmp	.+40     	; 0x24d0 <setup+0xf0>
  {
    // ERROR!
    // 1 = initial memory load failed
    // 2 = DMP configuration updates failed
    // (if it's going to break, usually the code will be 1)
    Serial.print(F("DMP Initialization failed (code "));
    24a8:	63 ed       	ldi	r22, 0xD3	; 211
    24aa:	70 e0       	ldi	r23, 0x00	; 0
    24ac:	8f e1       	ldi	r24, 0x1F	; 31
    24ae:	92 e0       	ldi	r25, 0x02	; 2
    24b0:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(devStatus);
    24b4:	4a e0       	ldi	r20, 0x0A	; 10
    24b6:	50 e0       	ldi	r21, 0x00	; 0
    24b8:	60 91 e3 01 	lds	r22, 0x01E3	; 0x8001e3 <devStatus>
    24bc:	8f e1       	ldi	r24, 0x1F	; 31
    24be:	92 e0       	ldi	r25, 0x02	; 2
    24c0:	0e 94 63 19 	call	0x32c6	; 0x32c6 <_ZN5Print5printEhi>
    Serial.println(F(")"));
    24c4:	61 ed       	ldi	r22, 0xD1	; 209
    24c6:	70 e0       	ldi	r23, 0x00	; 0
    24c8:	8f e1       	ldi	r24, 0x1F	; 31
    24ca:	92 e0       	ldi	r25, 0x02	; 2
    24cc:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
  #ifdef TURN_ON_FILTER
  kalmanX.setAngle(0);
  kalmanY.setAngle(0);
  kalmanZ.setAngle(0);
  #endif
  pid.setPos(0);
    24d0:	40 e0       	ldi	r20, 0x00	; 0
    24d2:	50 e0       	ldi	r21, 0x00	; 0
    24d4:	ba 01       	movw	r22, r20
    24d6:	86 ee       	ldi	r24, 0xE6	; 230
    24d8:	91 e0       	ldi	r25, 0x01	; 1
    24da:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <_ZN3PID6setPosEd>
  gm.init(3, 5, 6, 9, 10, 11);
    24de:	8b e0       	ldi	r24, 0x0B	; 11
    24e0:	c8 2e       	mov	r12, r24
    24e2:	d1 2c       	mov	r13, r1
    24e4:	9a e0       	ldi	r25, 0x0A	; 10
    24e6:	e9 2e       	mov	r14, r25
    24e8:	f1 2c       	mov	r15, r1
    24ea:	09 e0       	ldi	r16, 0x09	; 9
    24ec:	10 e0       	ldi	r17, 0x00	; 0
    24ee:	26 e0       	ldi	r18, 0x06	; 6
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	45 e0       	ldi	r20, 0x05	; 5
    24f4:	50 e0       	ldi	r21, 0x00	; 0
    24f6:	63 e0       	ldi	r22, 0x03	; 3
    24f8:	70 e0       	ldi	r23, 0x00	; 0
    24fa:	86 e0       	ldi	r24, 0x06	; 6
    24fc:	92 e0       	ldi	r25, 0x02	; 2
    24fe:	0e 94 c8 06 	call	0xd90	; 0xd90 <_ZN9GimbalMot4initEiiiiii>
  Serial.println("init end");
    2502:	66 e3       	ldi	r22, 0x36	; 54
    2504:	71 e0       	ldi	r23, 0x01	; 1
    2506:	8f e1       	ldi	r24, 0x1F	; 31
    2508:	92 e0       	ldi	r25, 0x02	; 2
    250a:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <_ZN5Print7printlnEPKc>
	
  //uncomment if tuning needed 
  //tunePID();
  
  tst = micros();
    250e:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <micros>
    2512:	60 93 73 01 	sts	0x0173, r22	; 0x800173 <tst>
    2516:	70 93 74 01 	sts	0x0174, r23	; 0x800174 <tst+0x1>
    251a:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <tst+0x2>
    251e:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <tst+0x3>
}
    2522:	1f 91       	pop	r17
    2524:	0f 91       	pop	r16
    2526:	ff 90       	pop	r15
    2528:	ef 90       	pop	r14
    252a:	df 90       	pop	r13
    252c:	cf 90       	pop	r12
    252e:	08 95       	ret

00002530 <loop>:
 
 
void loop()
{
    2530:	0f 93       	push	r16
    2532:	1f 93       	push	r17
    2534:	cf 93       	push	r28
    2536:	df 93       	push	r29
    2538:	00 d0       	rcall	.+0      	; 0x253a <loop+0xa>
    253a:	00 d0       	rcall	.+0      	; 0x253c <loop+0xc>
    253c:	00 d0       	rcall	.+0      	; 0x253e <loop+0xe>
    253e:	cd b7       	in	r28, 0x3d	; 61
    2540:	de b7       	in	r29, 0x3e	; 62
	
	updateData();
    2542:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <_Z10updateDatav>
	#ifdef TURN_ON_FILTER
	filterData();
	#endif
	  
	
    Serial.println(ypr[2]); // needed to be regulated on model
    2546:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <ypr+0x8>
    254a:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <ypr+0x9>
    254e:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <ypr+0xa>
    2552:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <ypr+0xb>
    2556:	22 e0       	ldi	r18, 0x02	; 2
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	8f e1       	ldi	r24, 0x1F	; 31
    255c:	92 e0       	ldi	r25, 0x02	; 2
    255e:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print7printlnEdi>
	
	if(micros() - tst > 1000)
    2562:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <micros>
    2566:	00 91 73 01 	lds	r16, 0x0173	; 0x800173 <tst>
    256a:	10 91 74 01 	lds	r17, 0x0174	; 0x800174 <tst+0x1>
    256e:	20 91 75 01 	lds	r18, 0x0175	; 0x800175 <tst+0x2>
    2572:	30 91 76 01 	lds	r19, 0x0176	; 0x800176 <tst+0x3>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	80 1b       	sub	r24, r16
    257c:	91 0b       	sbc	r25, r17
    257e:	a2 0b       	sbc	r26, r18
    2580:	b3 0b       	sbc	r27, r19
    2582:	89 3e       	cpi	r24, 0xE9	; 233
    2584:	93 40       	sbci	r25, 0x03	; 3
    2586:	a1 05       	cpc	r26, r1
    2588:	b1 05       	cpc	r27, r1
    258a:	e0 f0       	brcs	.+56     	; 0x25c4 <loop+0x94>
	{			
		tst = micros();
    258c:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <micros>
    2590:	60 93 73 01 	sts	0x0173, r22	; 0x800173 <tst>
    2594:	70 93 74 01 	sts	0x0174, r23	; 0x800174 <tst+0x1>
    2598:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <tst+0x2>
    259c:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <tst+0x3>
		auto vel = pid.calcReg(ypr[2]);
    25a0:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <ypr+0x8>
    25a4:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <ypr+0x9>
    25a8:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <ypr+0xa>
    25ac:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <ypr+0xb>
    25b0:	86 ee       	ldi	r24, 0xE6	; 230
    25b2:	91 e0       	ldi	r25, 0x01	; 1
    25b4:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_ZN3PID7calcRegEd>
		gm.setVelX(vel);
    25b8:	0e 94 ac 14 	call	0x2958	; 0x2958 <__fixsfsi>
    25bc:	86 e0       	ldi	r24, 0x06	; 6
    25be:	92 e0       	ldi	r25, 0x02	; 2
    25c0:	0e 94 7f 07 	call	0xefe	; 0xefe <_ZN9GimbalMot7setVelXEi>
	}
	//set kp, ki and kd from serial
	if (Serial.available() > 0) {
    25c4:	8f e1       	ldi	r24, 0x1F	; 31
    25c6:	92 e0       	ldi	r25, 0x02	; 2
    25c8:	0e 94 94 16 	call	0x2d28	; 0x2d28 <_ZN14HardwareSerial9availableEv>
    25cc:	18 16       	cp	r1, r24
    25ce:	19 06       	cpc	r1, r25
    25d0:	0c f0       	brlt	.+2      	; 0x25d4 <loop+0xa4>
    25d2:	61 c0       	rjmp	.+194    	; 0x2696 <loop+0x166>
		auto k = Serial.readStringUntil('\n');
    25d4:	4a e0       	ldi	r20, 0x0A	; 10
    25d6:	6f e1       	ldi	r22, 0x1F	; 31
    25d8:	72 e0       	ldi	r23, 0x02	; 2
    25da:	ce 01       	movw	r24, r28
    25dc:	01 96       	adiw	r24, 0x01	; 1
    25de:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <_ZN6Stream15readStringUntilEc>
		if(k[0] == 'p')
    25e2:	60 e0       	ldi	r22, 0x00	; 0
    25e4:	70 e0       	ldi	r23, 0x00	; 0
    25e6:	ce 01       	movw	r24, r28
    25e8:	01 96       	adiw	r24, 0x01	; 1
    25ea:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <_ZN6StringixEj>
    25ee:	fc 01       	movw	r30, r24
    25f0:	80 81       	ld	r24, Z
    25f2:	80 37       	cpi	r24, 0x70	; 112
    25f4:	99 f4       	brne	.+38     	; 0x261c <loop+0xec>
		{
			k.remove(0,1);
    25f6:	41 e0       	ldi	r20, 0x01	; 1
    25f8:	50 e0       	ldi	r21, 0x00	; 0
    25fa:	60 e0       	ldi	r22, 0x00	; 0
    25fc:	70 e0       	ldi	r23, 0x00	; 0
    25fe:	ce 01       	movw	r24, r28
    2600:	01 96       	adiw	r24, 0x01	; 1
    2602:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <_ZN6String6removeEjj>
			pid.setKp(k.toDouble());
    2606:	ce 01       	movw	r24, r28
    2608:	01 96       	adiw	r24, 0x01	; 1
    260a:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <_ZNK6String8toDoubleEv>
    260e:	ab 01       	movw	r20, r22
    2610:	bc 01       	movw	r22, r24
    2612:	86 ee       	ldi	r24, 0xE6	; 230
    2614:	91 e0       	ldi	r25, 0x01	; 1
    2616:	0e 94 4f 0c 	call	0x189e	; 0x189e <_ZN3PID5setKpEd>
    261a:	39 c0       	rjmp	.+114    	; 0x268e <loop+0x15e>
		}
		else if(k[0] == 'i')
    261c:	60 e0       	ldi	r22, 0x00	; 0
    261e:	70 e0       	ldi	r23, 0x00	; 0
    2620:	ce 01       	movw	r24, r28
    2622:	01 96       	adiw	r24, 0x01	; 1
    2624:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <_ZN6StringixEj>
    2628:	fc 01       	movw	r30, r24
    262a:	80 81       	ld	r24, Z
    262c:	89 36       	cpi	r24, 0x69	; 105
    262e:	99 f4       	brne	.+38     	; 0x2656 <loop+0x126>
		{
			k.remove(0,1);
    2630:	41 e0       	ldi	r20, 0x01	; 1
    2632:	50 e0       	ldi	r21, 0x00	; 0
    2634:	60 e0       	ldi	r22, 0x00	; 0
    2636:	70 e0       	ldi	r23, 0x00	; 0
    2638:	ce 01       	movw	r24, r28
    263a:	01 96       	adiw	r24, 0x01	; 1
    263c:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <_ZN6String6removeEjj>
			pid.setKi(k.toDouble());
    2640:	ce 01       	movw	r24, r28
    2642:	01 96       	adiw	r24, 0x01	; 1
    2644:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <_ZNK6String8toDoubleEv>
    2648:	ab 01       	movw	r20, r22
    264a:	bc 01       	movw	r22, r24
    264c:	86 ee       	ldi	r24, 0xE6	; 230
    264e:	91 e0       	ldi	r25, 0x01	; 1
    2650:	0e 94 55 0c 	call	0x18aa	; 0x18aa <_ZN3PID5setKiEd>
    2654:	1c c0       	rjmp	.+56     	; 0x268e <loop+0x15e>
		}
		else if(k[0] == 'd')
    2656:	60 e0       	ldi	r22, 0x00	; 0
    2658:	70 e0       	ldi	r23, 0x00	; 0
    265a:	ce 01       	movw	r24, r28
    265c:	01 96       	adiw	r24, 0x01	; 1
    265e:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <_ZN6StringixEj>
    2662:	fc 01       	movw	r30, r24
    2664:	80 81       	ld	r24, Z
    2666:	84 36       	cpi	r24, 0x64	; 100
    2668:	91 f4       	brne	.+36     	; 0x268e <loop+0x15e>
		{
			k.remove(0,1);
    266a:	41 e0       	ldi	r20, 0x01	; 1
    266c:	50 e0       	ldi	r21, 0x00	; 0
    266e:	60 e0       	ldi	r22, 0x00	; 0
    2670:	70 e0       	ldi	r23, 0x00	; 0
    2672:	ce 01       	movw	r24, r28
    2674:	01 96       	adiw	r24, 0x01	; 1
    2676:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <_ZN6String6removeEjj>
			pid.setKd(k.toDouble());
    267a:	ce 01       	movw	r24, r28
    267c:	01 96       	adiw	r24, 0x01	; 1
    267e:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <_ZNK6String8toDoubleEv>
    2682:	ab 01       	movw	r20, r22
    2684:	bc 01       	movw	r22, r24
    2686:	86 ee       	ldi	r24, 0xE6	; 230
    2688:	91 e0       	ldi	r25, 0x01	; 1
    268a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <_ZN3PID5setKdEd>
		auto vel = pid.calcReg(ypr[2]);
		gm.setVelX(vel);
	}
	//set kp, ki and kd from serial
	if (Serial.available() > 0) {
		auto k = Serial.readStringUntil('\n');
    268e:	ce 01       	movw	r24, r28
    2690:	01 96       	adiw	r24, 0x01	; 1
    2692:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <_ZN6StringD1Ev>
			k.remove(0,1);
			pid.setKd(k.toDouble());
		}
	}
 
}
    2696:	26 96       	adiw	r28, 0x06	; 6
    2698:	0f b6       	in	r0, 0x3f	; 63
    269a:	f8 94       	cli
    269c:	de bf       	out	0x3e, r29	; 62
    269e:	0f be       	out	0x3f, r0	; 63
    26a0:	cd bf       	out	0x3d, r28	; 61
    26a2:	df 91       	pop	r29
    26a4:	cf 91       	pop	r28
    26a6:	1f 91       	pop	r17
    26a8:	0f 91       	pop	r16
    26aa:	08 95       	ret

000026ac <__subsf3>:
    26ac:	50 58       	subi	r21, 0x80	; 128

000026ae <__addsf3>:
    26ae:	bb 27       	eor	r27, r27
    26b0:	aa 27       	eor	r26, r26
    26b2:	0e 94 6e 13 	call	0x26dc	; 0x26dc <__addsf3x>
    26b6:	0c 94 81 15 	jmp	0x2b02	; 0x2b02 <__fp_round>
    26ba:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <__fp_pscA>
    26be:	38 f0       	brcs	.+14     	; 0x26ce <__addsf3+0x20>
    26c0:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__fp_pscB>
    26c4:	20 f0       	brcs	.+8      	; 0x26ce <__addsf3+0x20>
    26c6:	39 f4       	brne	.+14     	; 0x26d6 <__addsf3+0x28>
    26c8:	9f 3f       	cpi	r25, 0xFF	; 255
    26ca:	19 f4       	brne	.+6      	; 0x26d2 <__addsf3+0x24>
    26cc:	26 f4       	brtc	.+8      	; 0x26d6 <__addsf3+0x28>
    26ce:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <__fp_nan>
    26d2:	0e f4       	brtc	.+2      	; 0x26d6 <__addsf3+0x28>
    26d4:	e0 95       	com	r30
    26d6:	e7 fb       	bst	r30, 7
    26d8:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <__fp_inf>

000026dc <__addsf3x>:
    26dc:	e9 2f       	mov	r30, r25
    26de:	0e 94 92 15 	call	0x2b24	; 0x2b24 <__fp_split3>
    26e2:	58 f3       	brcs	.-42     	; 0x26ba <__addsf3+0xc>
    26e4:	ba 17       	cp	r27, r26
    26e6:	62 07       	cpc	r22, r18
    26e8:	73 07       	cpc	r23, r19
    26ea:	84 07       	cpc	r24, r20
    26ec:	95 07       	cpc	r25, r21
    26ee:	20 f0       	brcs	.+8      	; 0x26f8 <__addsf3x+0x1c>
    26f0:	79 f4       	brne	.+30     	; 0x2710 <__addsf3x+0x34>
    26f2:	a6 f5       	brtc	.+104    	; 0x275c <__addsf3x+0x80>
    26f4:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <__fp_zero>
    26f8:	0e f4       	brtc	.+2      	; 0x26fc <__addsf3x+0x20>
    26fa:	e0 95       	com	r30
    26fc:	0b 2e       	mov	r0, r27
    26fe:	ba 2f       	mov	r27, r26
    2700:	a0 2d       	mov	r26, r0
    2702:	0b 01       	movw	r0, r22
    2704:	b9 01       	movw	r22, r18
    2706:	90 01       	movw	r18, r0
    2708:	0c 01       	movw	r0, r24
    270a:	ca 01       	movw	r24, r20
    270c:	a0 01       	movw	r20, r0
    270e:	11 24       	eor	r1, r1
    2710:	ff 27       	eor	r31, r31
    2712:	59 1b       	sub	r21, r25
    2714:	99 f0       	breq	.+38     	; 0x273c <__addsf3x+0x60>
    2716:	59 3f       	cpi	r21, 0xF9	; 249
    2718:	50 f4       	brcc	.+20     	; 0x272e <__addsf3x+0x52>
    271a:	50 3e       	cpi	r21, 0xE0	; 224
    271c:	68 f1       	brcs	.+90     	; 0x2778 <__addsf3x+0x9c>
    271e:	1a 16       	cp	r1, r26
    2720:	f0 40       	sbci	r31, 0x00	; 0
    2722:	a2 2f       	mov	r26, r18
    2724:	23 2f       	mov	r18, r19
    2726:	34 2f       	mov	r19, r20
    2728:	44 27       	eor	r20, r20
    272a:	58 5f       	subi	r21, 0xF8	; 248
    272c:	f3 cf       	rjmp	.-26     	; 0x2714 <__addsf3x+0x38>
    272e:	46 95       	lsr	r20
    2730:	37 95       	ror	r19
    2732:	27 95       	ror	r18
    2734:	a7 95       	ror	r26
    2736:	f0 40       	sbci	r31, 0x00	; 0
    2738:	53 95       	inc	r21
    273a:	c9 f7       	brne	.-14     	; 0x272e <__addsf3x+0x52>
    273c:	7e f4       	brtc	.+30     	; 0x275c <__addsf3x+0x80>
    273e:	1f 16       	cp	r1, r31
    2740:	ba 0b       	sbc	r27, r26
    2742:	62 0b       	sbc	r22, r18
    2744:	73 0b       	sbc	r23, r19
    2746:	84 0b       	sbc	r24, r20
    2748:	ba f0       	brmi	.+46     	; 0x2778 <__addsf3x+0x9c>
    274a:	91 50       	subi	r25, 0x01	; 1
    274c:	a1 f0       	breq	.+40     	; 0x2776 <__addsf3x+0x9a>
    274e:	ff 0f       	add	r31, r31
    2750:	bb 1f       	adc	r27, r27
    2752:	66 1f       	adc	r22, r22
    2754:	77 1f       	adc	r23, r23
    2756:	88 1f       	adc	r24, r24
    2758:	c2 f7       	brpl	.-16     	; 0x274a <__addsf3x+0x6e>
    275a:	0e c0       	rjmp	.+28     	; 0x2778 <__addsf3x+0x9c>
    275c:	ba 0f       	add	r27, r26
    275e:	62 1f       	adc	r22, r18
    2760:	73 1f       	adc	r23, r19
    2762:	84 1f       	adc	r24, r20
    2764:	48 f4       	brcc	.+18     	; 0x2778 <__addsf3x+0x9c>
    2766:	87 95       	ror	r24
    2768:	77 95       	ror	r23
    276a:	67 95       	ror	r22
    276c:	b7 95       	ror	r27
    276e:	f7 95       	ror	r31
    2770:	9e 3f       	cpi	r25, 0xFE	; 254
    2772:	08 f0       	brcs	.+2      	; 0x2776 <__addsf3x+0x9a>
    2774:	b0 cf       	rjmp	.-160    	; 0x26d6 <__addsf3+0x28>
    2776:	93 95       	inc	r25
    2778:	88 0f       	add	r24, r24
    277a:	08 f0       	brcs	.+2      	; 0x277e <__addsf3x+0xa2>
    277c:	99 27       	eor	r25, r25
    277e:	ee 0f       	add	r30, r30
    2780:	97 95       	ror	r25
    2782:	87 95       	ror	r24
    2784:	08 95       	ret
    2786:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <__fp_pscA>
    278a:	60 f0       	brcs	.+24     	; 0x27a4 <__addsf3x+0xc8>
    278c:	80 e8       	ldi	r24, 0x80	; 128
    278e:	91 e0       	ldi	r25, 0x01	; 1
    2790:	09 f4       	brne	.+2      	; 0x2794 <__addsf3x+0xb8>
    2792:	9e ef       	ldi	r25, 0xFE	; 254
    2794:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__fp_pscB>
    2798:	28 f0       	brcs	.+10     	; 0x27a4 <__addsf3x+0xc8>
    279a:	40 e8       	ldi	r20, 0x80	; 128
    279c:	51 e0       	ldi	r21, 0x01	; 1
    279e:	71 f4       	brne	.+28     	; 0x27bc <atan2+0x10>
    27a0:	5e ef       	ldi	r21, 0xFE	; 254
    27a2:	0c c0       	rjmp	.+24     	; 0x27bc <atan2+0x10>
    27a4:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <__fp_nan>
    27a8:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <__fp_zero>

000027ac <atan2>:
    27ac:	e9 2f       	mov	r30, r25
    27ae:	e0 78       	andi	r30, 0x80	; 128
    27b0:	0e 94 92 15 	call	0x2b24	; 0x2b24 <__fp_split3>
    27b4:	40 f3       	brcs	.-48     	; 0x2786 <__addsf3x+0xaa>
    27b6:	09 2e       	mov	r0, r25
    27b8:	05 2a       	or	r0, r21
    27ba:	b1 f3       	breq	.-20     	; 0x27a8 <__addsf3x+0xcc>
    27bc:	26 17       	cp	r18, r22
    27be:	37 07       	cpc	r19, r23
    27c0:	48 07       	cpc	r20, r24
    27c2:	59 07       	cpc	r21, r25
    27c4:	38 f0       	brcs	.+14     	; 0x27d4 <atan2+0x28>
    27c6:	0e 2e       	mov	r0, r30
    27c8:	07 f8       	bld	r0, 7
    27ca:	e0 25       	eor	r30, r0
    27cc:	69 f0       	breq	.+26     	; 0x27e8 <atan2+0x3c>
    27ce:	e0 25       	eor	r30, r0
    27d0:	e0 64       	ori	r30, 0x40	; 64
    27d2:	0a c0       	rjmp	.+20     	; 0x27e8 <atan2+0x3c>
    27d4:	ef 63       	ori	r30, 0x3F	; 63
    27d6:	07 f8       	bld	r0, 7
    27d8:	00 94       	com	r0
    27da:	07 fa       	bst	r0, 7
    27dc:	db 01       	movw	r26, r22
    27de:	b9 01       	movw	r22, r18
    27e0:	9d 01       	movw	r18, r26
    27e2:	dc 01       	movw	r26, r24
    27e4:	ca 01       	movw	r24, r20
    27e6:	ad 01       	movw	r20, r26
    27e8:	ef 93       	push	r30
    27ea:	0e 94 51 14 	call	0x28a2	; 0x28a2 <__divsf3_pse>
    27ee:	0e 94 81 15 	call	0x2b02	; 0x2b02 <__fp_round>
    27f2:	0e 94 06 14 	call	0x280c	; 0x280c <atan>
    27f6:	5f 91       	pop	r21
    27f8:	55 23       	and	r21, r21
    27fa:	39 f0       	breq	.+14     	; 0x280a <atan2+0x5e>
    27fc:	2b ed       	ldi	r18, 0xDB	; 219
    27fe:	3f e0       	ldi	r19, 0x0F	; 15
    2800:	49 e4       	ldi	r20, 0x49	; 73
    2802:	50 fd       	sbrc	r21, 0
    2804:	49 ec       	ldi	r20, 0xC9	; 201
    2806:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__addsf3>
    280a:	08 95       	ret

0000280c <atan>:
    280c:	df 93       	push	r29
    280e:	dd 27       	eor	r29, r29
    2810:	b9 2f       	mov	r27, r25
    2812:	bf 77       	andi	r27, 0x7F	; 127
    2814:	40 e8       	ldi	r20, 0x80	; 128
    2816:	5f e3       	ldi	r21, 0x3F	; 63
    2818:	16 16       	cp	r1, r22
    281a:	17 06       	cpc	r1, r23
    281c:	48 07       	cpc	r20, r24
    281e:	5b 07       	cpc	r21, r27
    2820:	18 f4       	brcc	.+6      	; 0x2828 <atan+0x1c>
    2822:	d9 2f       	mov	r29, r25
    2824:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <inverse>
    2828:	9f 93       	push	r25
    282a:	8f 93       	push	r24
    282c:	7f 93       	push	r23
    282e:	6f 93       	push	r22
    2830:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <square>
    2834:	e8 e6       	ldi	r30, 0x68	; 104
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__fp_powser>
    283c:	0e 94 81 15 	call	0x2b02	; 0x2b02 <__fp_round>
    2840:	2f 91       	pop	r18
    2842:	3f 91       	pop	r19
    2844:	4f 91       	pop	r20
    2846:	5f 91       	pop	r21
    2848:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <__mulsf3x>
    284c:	dd 23       	and	r29, r29
    284e:	51 f0       	breq	.+20     	; 0x2864 <atan+0x58>
    2850:	90 58       	subi	r25, 0x80	; 128
    2852:	a2 ea       	ldi	r26, 0xA2	; 162
    2854:	2a ed       	ldi	r18, 0xDA	; 218
    2856:	3f e0       	ldi	r19, 0x0F	; 15
    2858:	49 ec       	ldi	r20, 0xC9	; 201
    285a:	5f e3       	ldi	r21, 0x3F	; 63
    285c:	d0 78       	andi	r29, 0x80	; 128
    285e:	5d 27       	eor	r21, r29
    2860:	0e 94 6e 13 	call	0x26dc	; 0x26dc <__addsf3x>
    2864:	df 91       	pop	r29
    2866:	0c 94 81 15 	jmp	0x2b02	; 0x2b02 <__fp_round>

0000286a <__cmpsf2>:
    286a:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__fp_cmp>
    286e:	08 f4       	brcc	.+2      	; 0x2872 <__cmpsf2+0x8>
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	08 95       	ret

00002874 <__divsf3>:
    2874:	0e 94 4e 14 	call	0x289c	; 0x289c <__divsf3x>
    2878:	0c 94 81 15 	jmp	0x2b02	; 0x2b02 <__fp_round>
    287c:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__fp_pscB>
    2880:	58 f0       	brcs	.+22     	; 0x2898 <__divsf3+0x24>
    2882:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <__fp_pscA>
    2886:	40 f0       	brcs	.+16     	; 0x2898 <__divsf3+0x24>
    2888:	29 f4       	brne	.+10     	; 0x2894 <__divsf3+0x20>
    288a:	5f 3f       	cpi	r21, 0xFF	; 255
    288c:	29 f0       	breq	.+10     	; 0x2898 <__divsf3+0x24>
    288e:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <__fp_inf>
    2892:	51 11       	cpse	r21, r1
    2894:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <__fp_szero>
    2898:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <__fp_nan>

0000289c <__divsf3x>:
    289c:	0e 94 92 15 	call	0x2b24	; 0x2b24 <__fp_split3>
    28a0:	68 f3       	brcs	.-38     	; 0x287c <__divsf3+0x8>

000028a2 <__divsf3_pse>:
    28a2:	99 23       	and	r25, r25
    28a4:	b1 f3       	breq	.-20     	; 0x2892 <__divsf3+0x1e>
    28a6:	55 23       	and	r21, r21
    28a8:	91 f3       	breq	.-28     	; 0x288e <__divsf3+0x1a>
    28aa:	95 1b       	sub	r25, r21
    28ac:	55 0b       	sbc	r21, r21
    28ae:	bb 27       	eor	r27, r27
    28b0:	aa 27       	eor	r26, r26
    28b2:	62 17       	cp	r22, r18
    28b4:	73 07       	cpc	r23, r19
    28b6:	84 07       	cpc	r24, r20
    28b8:	38 f0       	brcs	.+14     	; 0x28c8 <__divsf3_pse+0x26>
    28ba:	9f 5f       	subi	r25, 0xFF	; 255
    28bc:	5f 4f       	sbci	r21, 0xFF	; 255
    28be:	22 0f       	add	r18, r18
    28c0:	33 1f       	adc	r19, r19
    28c2:	44 1f       	adc	r20, r20
    28c4:	aa 1f       	adc	r26, r26
    28c6:	a9 f3       	breq	.-22     	; 0x28b2 <__divsf3_pse+0x10>
    28c8:	35 d0       	rcall	.+106    	; 0x2934 <__divsf3_pse+0x92>
    28ca:	0e 2e       	mov	r0, r30
    28cc:	3a f0       	brmi	.+14     	; 0x28dc <__divsf3_pse+0x3a>
    28ce:	e0 e8       	ldi	r30, 0x80	; 128
    28d0:	32 d0       	rcall	.+100    	; 0x2936 <__divsf3_pse+0x94>
    28d2:	91 50       	subi	r25, 0x01	; 1
    28d4:	50 40       	sbci	r21, 0x00	; 0
    28d6:	e6 95       	lsr	r30
    28d8:	00 1c       	adc	r0, r0
    28da:	ca f7       	brpl	.-14     	; 0x28ce <__divsf3_pse+0x2c>
    28dc:	2b d0       	rcall	.+86     	; 0x2934 <__divsf3_pse+0x92>
    28de:	fe 2f       	mov	r31, r30
    28e0:	29 d0       	rcall	.+82     	; 0x2934 <__divsf3_pse+0x92>
    28e2:	66 0f       	add	r22, r22
    28e4:	77 1f       	adc	r23, r23
    28e6:	88 1f       	adc	r24, r24
    28e8:	bb 1f       	adc	r27, r27
    28ea:	26 17       	cp	r18, r22
    28ec:	37 07       	cpc	r19, r23
    28ee:	48 07       	cpc	r20, r24
    28f0:	ab 07       	cpc	r26, r27
    28f2:	b0 e8       	ldi	r27, 0x80	; 128
    28f4:	09 f0       	breq	.+2      	; 0x28f8 <__divsf3_pse+0x56>
    28f6:	bb 0b       	sbc	r27, r27
    28f8:	80 2d       	mov	r24, r0
    28fa:	bf 01       	movw	r22, r30
    28fc:	ff 27       	eor	r31, r31
    28fe:	93 58       	subi	r25, 0x83	; 131
    2900:	5f 4f       	sbci	r21, 0xFF	; 255
    2902:	3a f0       	brmi	.+14     	; 0x2912 <__divsf3_pse+0x70>
    2904:	9e 3f       	cpi	r25, 0xFE	; 254
    2906:	51 05       	cpc	r21, r1
    2908:	78 f0       	brcs	.+30     	; 0x2928 <__divsf3_pse+0x86>
    290a:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <__fp_inf>
    290e:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <__fp_szero>
    2912:	5f 3f       	cpi	r21, 0xFF	; 255
    2914:	e4 f3       	brlt	.-8      	; 0x290e <__divsf3_pse+0x6c>
    2916:	98 3e       	cpi	r25, 0xE8	; 232
    2918:	d4 f3       	brlt	.-12     	; 0x290e <__divsf3_pse+0x6c>
    291a:	86 95       	lsr	r24
    291c:	77 95       	ror	r23
    291e:	67 95       	ror	r22
    2920:	b7 95       	ror	r27
    2922:	f7 95       	ror	r31
    2924:	9f 5f       	subi	r25, 0xFF	; 255
    2926:	c9 f7       	brne	.-14     	; 0x291a <__divsf3_pse+0x78>
    2928:	88 0f       	add	r24, r24
    292a:	91 1d       	adc	r25, r1
    292c:	96 95       	lsr	r25
    292e:	87 95       	ror	r24
    2930:	97 f9       	bld	r25, 7
    2932:	08 95       	ret
    2934:	e1 e0       	ldi	r30, 0x01	; 1
    2936:	66 0f       	add	r22, r22
    2938:	77 1f       	adc	r23, r23
    293a:	88 1f       	adc	r24, r24
    293c:	bb 1f       	adc	r27, r27
    293e:	62 17       	cp	r22, r18
    2940:	73 07       	cpc	r23, r19
    2942:	84 07       	cpc	r24, r20
    2944:	ba 07       	cpc	r27, r26
    2946:	20 f0       	brcs	.+8      	; 0x2950 <__divsf3_pse+0xae>
    2948:	62 1b       	sub	r22, r18
    294a:	73 0b       	sbc	r23, r19
    294c:	84 0b       	sbc	r24, r20
    294e:	ba 0b       	sbc	r27, r26
    2950:	ee 1f       	adc	r30, r30
    2952:	88 f7       	brcc	.-30     	; 0x2936 <__divsf3_pse+0x94>
    2954:	e0 95       	com	r30
    2956:	08 95       	ret

00002958 <__fixsfsi>:
    2958:	0e 94 b3 14 	call	0x2966	; 0x2966 <__fixunssfsi>
    295c:	68 94       	set
    295e:	b1 11       	cpse	r27, r1
    2960:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <__fp_szero>
    2964:	08 95       	ret

00002966 <__fixunssfsi>:
    2966:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__fp_splitA>
    296a:	88 f0       	brcs	.+34     	; 0x298e <__fixunssfsi+0x28>
    296c:	9f 57       	subi	r25, 0x7F	; 127
    296e:	98 f0       	brcs	.+38     	; 0x2996 <__fixunssfsi+0x30>
    2970:	b9 2f       	mov	r27, r25
    2972:	99 27       	eor	r25, r25
    2974:	b7 51       	subi	r27, 0x17	; 23
    2976:	b0 f0       	brcs	.+44     	; 0x29a4 <__fixunssfsi+0x3e>
    2978:	e1 f0       	breq	.+56     	; 0x29b2 <__fixunssfsi+0x4c>
    297a:	66 0f       	add	r22, r22
    297c:	77 1f       	adc	r23, r23
    297e:	88 1f       	adc	r24, r24
    2980:	99 1f       	adc	r25, r25
    2982:	1a f0       	brmi	.+6      	; 0x298a <__fixunssfsi+0x24>
    2984:	ba 95       	dec	r27
    2986:	c9 f7       	brne	.-14     	; 0x297a <__fixunssfsi+0x14>
    2988:	14 c0       	rjmp	.+40     	; 0x29b2 <__fixunssfsi+0x4c>
    298a:	b1 30       	cpi	r27, 0x01	; 1
    298c:	91 f0       	breq	.+36     	; 0x29b2 <__fixunssfsi+0x4c>
    298e:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <__fp_zero>
    2992:	b1 e0       	ldi	r27, 0x01	; 1
    2994:	08 95       	ret
    2996:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <__fp_zero>
    299a:	67 2f       	mov	r22, r23
    299c:	78 2f       	mov	r23, r24
    299e:	88 27       	eor	r24, r24
    29a0:	b8 5f       	subi	r27, 0xF8	; 248
    29a2:	39 f0       	breq	.+14     	; 0x29b2 <__fixunssfsi+0x4c>
    29a4:	b9 3f       	cpi	r27, 0xF9	; 249
    29a6:	cc f3       	brlt	.-14     	; 0x299a <__fixunssfsi+0x34>
    29a8:	86 95       	lsr	r24
    29aa:	77 95       	ror	r23
    29ac:	67 95       	ror	r22
    29ae:	b3 95       	inc	r27
    29b0:	d9 f7       	brne	.-10     	; 0x29a8 <__fixunssfsi+0x42>
    29b2:	3e f4       	brtc	.+14     	; 0x29c2 <__fixunssfsi+0x5c>
    29b4:	90 95       	com	r25
    29b6:	80 95       	com	r24
    29b8:	70 95       	com	r23
    29ba:	61 95       	neg	r22
    29bc:	7f 4f       	sbci	r23, 0xFF	; 255
    29be:	8f 4f       	sbci	r24, 0xFF	; 255
    29c0:	9f 4f       	sbci	r25, 0xFF	; 255
    29c2:	08 95       	ret

000029c4 <__floatunsisf>:
    29c4:	e8 94       	clt
    29c6:	09 c0       	rjmp	.+18     	; 0x29da <__floatsisf+0x12>

000029c8 <__floatsisf>:
    29c8:	97 fb       	bst	r25, 7
    29ca:	3e f4       	brtc	.+14     	; 0x29da <__floatsisf+0x12>
    29cc:	90 95       	com	r25
    29ce:	80 95       	com	r24
    29d0:	70 95       	com	r23
    29d2:	61 95       	neg	r22
    29d4:	7f 4f       	sbci	r23, 0xFF	; 255
    29d6:	8f 4f       	sbci	r24, 0xFF	; 255
    29d8:	9f 4f       	sbci	r25, 0xFF	; 255
    29da:	99 23       	and	r25, r25
    29dc:	a9 f0       	breq	.+42     	; 0x2a08 <__floatsisf+0x40>
    29de:	f9 2f       	mov	r31, r25
    29e0:	96 e9       	ldi	r25, 0x96	; 150
    29e2:	bb 27       	eor	r27, r27
    29e4:	93 95       	inc	r25
    29e6:	f6 95       	lsr	r31
    29e8:	87 95       	ror	r24
    29ea:	77 95       	ror	r23
    29ec:	67 95       	ror	r22
    29ee:	b7 95       	ror	r27
    29f0:	f1 11       	cpse	r31, r1
    29f2:	f8 cf       	rjmp	.-16     	; 0x29e4 <__floatsisf+0x1c>
    29f4:	fa f4       	brpl	.+62     	; 0x2a34 <__floatsisf+0x6c>
    29f6:	bb 0f       	add	r27, r27
    29f8:	11 f4       	brne	.+4      	; 0x29fe <__floatsisf+0x36>
    29fa:	60 ff       	sbrs	r22, 0
    29fc:	1b c0       	rjmp	.+54     	; 0x2a34 <__floatsisf+0x6c>
    29fe:	6f 5f       	subi	r22, 0xFF	; 255
    2a00:	7f 4f       	sbci	r23, 0xFF	; 255
    2a02:	8f 4f       	sbci	r24, 0xFF	; 255
    2a04:	9f 4f       	sbci	r25, 0xFF	; 255
    2a06:	16 c0       	rjmp	.+44     	; 0x2a34 <__floatsisf+0x6c>
    2a08:	88 23       	and	r24, r24
    2a0a:	11 f0       	breq	.+4      	; 0x2a10 <__floatsisf+0x48>
    2a0c:	96 e9       	ldi	r25, 0x96	; 150
    2a0e:	11 c0       	rjmp	.+34     	; 0x2a32 <__floatsisf+0x6a>
    2a10:	77 23       	and	r23, r23
    2a12:	21 f0       	breq	.+8      	; 0x2a1c <__floatsisf+0x54>
    2a14:	9e e8       	ldi	r25, 0x8E	; 142
    2a16:	87 2f       	mov	r24, r23
    2a18:	76 2f       	mov	r23, r22
    2a1a:	05 c0       	rjmp	.+10     	; 0x2a26 <__floatsisf+0x5e>
    2a1c:	66 23       	and	r22, r22
    2a1e:	71 f0       	breq	.+28     	; 0x2a3c <__floatsisf+0x74>
    2a20:	96 e8       	ldi	r25, 0x86	; 134
    2a22:	86 2f       	mov	r24, r22
    2a24:	70 e0       	ldi	r23, 0x00	; 0
    2a26:	60 e0       	ldi	r22, 0x00	; 0
    2a28:	2a f0       	brmi	.+10     	; 0x2a34 <__floatsisf+0x6c>
    2a2a:	9a 95       	dec	r25
    2a2c:	66 0f       	add	r22, r22
    2a2e:	77 1f       	adc	r23, r23
    2a30:	88 1f       	adc	r24, r24
    2a32:	da f7       	brpl	.-10     	; 0x2a2a <__floatsisf+0x62>
    2a34:	88 0f       	add	r24, r24
    2a36:	96 95       	lsr	r25
    2a38:	87 95       	ror	r24
    2a3a:	97 f9       	bld	r25, 7
    2a3c:	08 95       	ret

00002a3e <__fp_cmp>:
    2a3e:	99 0f       	add	r25, r25
    2a40:	00 08       	sbc	r0, r0
    2a42:	55 0f       	add	r21, r21
    2a44:	aa 0b       	sbc	r26, r26
    2a46:	e0 e8       	ldi	r30, 0x80	; 128
    2a48:	fe ef       	ldi	r31, 0xFE	; 254
    2a4a:	16 16       	cp	r1, r22
    2a4c:	17 06       	cpc	r1, r23
    2a4e:	e8 07       	cpc	r30, r24
    2a50:	f9 07       	cpc	r31, r25
    2a52:	c0 f0       	brcs	.+48     	; 0x2a84 <__fp_cmp+0x46>
    2a54:	12 16       	cp	r1, r18
    2a56:	13 06       	cpc	r1, r19
    2a58:	e4 07       	cpc	r30, r20
    2a5a:	f5 07       	cpc	r31, r21
    2a5c:	98 f0       	brcs	.+38     	; 0x2a84 <__fp_cmp+0x46>
    2a5e:	62 1b       	sub	r22, r18
    2a60:	73 0b       	sbc	r23, r19
    2a62:	84 0b       	sbc	r24, r20
    2a64:	95 0b       	sbc	r25, r21
    2a66:	39 f4       	brne	.+14     	; 0x2a76 <__fp_cmp+0x38>
    2a68:	0a 26       	eor	r0, r26
    2a6a:	61 f0       	breq	.+24     	; 0x2a84 <__fp_cmp+0x46>
    2a6c:	23 2b       	or	r18, r19
    2a6e:	24 2b       	or	r18, r20
    2a70:	25 2b       	or	r18, r21
    2a72:	21 f4       	brne	.+8      	; 0x2a7c <__fp_cmp+0x3e>
    2a74:	08 95       	ret
    2a76:	0a 26       	eor	r0, r26
    2a78:	09 f4       	brne	.+2      	; 0x2a7c <__fp_cmp+0x3e>
    2a7a:	a1 40       	sbci	r26, 0x01	; 1
    2a7c:	a6 95       	lsr	r26
    2a7e:	8f ef       	ldi	r24, 0xFF	; 255
    2a80:	81 1d       	adc	r24, r1
    2a82:	81 1d       	adc	r24, r1
    2a84:	08 95       	ret

00002a86 <__fp_inf>:
    2a86:	97 f9       	bld	r25, 7
    2a88:	9f 67       	ori	r25, 0x7F	; 127
    2a8a:	80 e8       	ldi	r24, 0x80	; 128
    2a8c:	70 e0       	ldi	r23, 0x00	; 0
    2a8e:	60 e0       	ldi	r22, 0x00	; 0
    2a90:	08 95       	ret

00002a92 <__fp_nan>:
    2a92:	9f ef       	ldi	r25, 0xFF	; 255
    2a94:	80 ec       	ldi	r24, 0xC0	; 192
    2a96:	08 95       	ret

00002a98 <__fp_powser>:
    2a98:	df 93       	push	r29
    2a9a:	cf 93       	push	r28
    2a9c:	1f 93       	push	r17
    2a9e:	0f 93       	push	r16
    2aa0:	ff 92       	push	r15
    2aa2:	ef 92       	push	r14
    2aa4:	df 92       	push	r13
    2aa6:	7b 01       	movw	r14, r22
    2aa8:	8c 01       	movw	r16, r24
    2aaa:	68 94       	set
    2aac:	06 c0       	rjmp	.+12     	; 0x2aba <__fp_powser+0x22>
    2aae:	da 2e       	mov	r13, r26
    2ab0:	ef 01       	movw	r28, r30
    2ab2:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <__mulsf3x>
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	e8 94       	clt
    2aba:	a5 91       	lpm	r26, Z+
    2abc:	25 91       	lpm	r18, Z+
    2abe:	35 91       	lpm	r19, Z+
    2ac0:	45 91       	lpm	r20, Z+
    2ac2:	55 91       	lpm	r21, Z+
    2ac4:	a6 f3       	brts	.-24     	; 0x2aae <__fp_powser+0x16>
    2ac6:	ef 01       	movw	r28, r30
    2ac8:	0e 94 6e 13 	call	0x26dc	; 0x26dc <__addsf3x>
    2acc:	fe 01       	movw	r30, r28
    2ace:	97 01       	movw	r18, r14
    2ad0:	a8 01       	movw	r20, r16
    2ad2:	da 94       	dec	r13
    2ad4:	69 f7       	brne	.-38     	; 0x2ab0 <__fp_powser+0x18>
    2ad6:	df 90       	pop	r13
    2ad8:	ef 90       	pop	r14
    2ada:	ff 90       	pop	r15
    2adc:	0f 91       	pop	r16
    2ade:	1f 91       	pop	r17
    2ae0:	cf 91       	pop	r28
    2ae2:	df 91       	pop	r29
    2ae4:	08 95       	ret

00002ae6 <__fp_pscA>:
    2ae6:	00 24       	eor	r0, r0
    2ae8:	0a 94       	dec	r0
    2aea:	16 16       	cp	r1, r22
    2aec:	17 06       	cpc	r1, r23
    2aee:	18 06       	cpc	r1, r24
    2af0:	09 06       	cpc	r0, r25
    2af2:	08 95       	ret

00002af4 <__fp_pscB>:
    2af4:	00 24       	eor	r0, r0
    2af6:	0a 94       	dec	r0
    2af8:	12 16       	cp	r1, r18
    2afa:	13 06       	cpc	r1, r19
    2afc:	14 06       	cpc	r1, r20
    2afe:	05 06       	cpc	r0, r21
    2b00:	08 95       	ret

00002b02 <__fp_round>:
    2b02:	09 2e       	mov	r0, r25
    2b04:	03 94       	inc	r0
    2b06:	00 0c       	add	r0, r0
    2b08:	11 f4       	brne	.+4      	; 0x2b0e <__fp_round+0xc>
    2b0a:	88 23       	and	r24, r24
    2b0c:	52 f0       	brmi	.+20     	; 0x2b22 <__fp_round+0x20>
    2b0e:	bb 0f       	add	r27, r27
    2b10:	40 f4       	brcc	.+16     	; 0x2b22 <__fp_round+0x20>
    2b12:	bf 2b       	or	r27, r31
    2b14:	11 f4       	brne	.+4      	; 0x2b1a <__fp_round+0x18>
    2b16:	60 ff       	sbrs	r22, 0
    2b18:	04 c0       	rjmp	.+8      	; 0x2b22 <__fp_round+0x20>
    2b1a:	6f 5f       	subi	r22, 0xFF	; 255
    2b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b1e:	8f 4f       	sbci	r24, 0xFF	; 255
    2b20:	9f 4f       	sbci	r25, 0xFF	; 255
    2b22:	08 95       	ret

00002b24 <__fp_split3>:
    2b24:	57 fd       	sbrc	r21, 7
    2b26:	90 58       	subi	r25, 0x80	; 128
    2b28:	44 0f       	add	r20, r20
    2b2a:	55 1f       	adc	r21, r21
    2b2c:	59 f0       	breq	.+22     	; 0x2b44 <__fp_splitA+0x10>
    2b2e:	5f 3f       	cpi	r21, 0xFF	; 255
    2b30:	71 f0       	breq	.+28     	; 0x2b4e <__fp_splitA+0x1a>
    2b32:	47 95       	ror	r20

00002b34 <__fp_splitA>:
    2b34:	88 0f       	add	r24, r24
    2b36:	97 fb       	bst	r25, 7
    2b38:	99 1f       	adc	r25, r25
    2b3a:	61 f0       	breq	.+24     	; 0x2b54 <__fp_splitA+0x20>
    2b3c:	9f 3f       	cpi	r25, 0xFF	; 255
    2b3e:	79 f0       	breq	.+30     	; 0x2b5e <__fp_splitA+0x2a>
    2b40:	87 95       	ror	r24
    2b42:	08 95       	ret
    2b44:	12 16       	cp	r1, r18
    2b46:	13 06       	cpc	r1, r19
    2b48:	14 06       	cpc	r1, r20
    2b4a:	55 1f       	adc	r21, r21
    2b4c:	f2 cf       	rjmp	.-28     	; 0x2b32 <__fp_split3+0xe>
    2b4e:	46 95       	lsr	r20
    2b50:	f1 df       	rcall	.-30     	; 0x2b34 <__fp_splitA>
    2b52:	08 c0       	rjmp	.+16     	; 0x2b64 <__fp_splitA+0x30>
    2b54:	16 16       	cp	r1, r22
    2b56:	17 06       	cpc	r1, r23
    2b58:	18 06       	cpc	r1, r24
    2b5a:	99 1f       	adc	r25, r25
    2b5c:	f1 cf       	rjmp	.-30     	; 0x2b40 <__fp_splitA+0xc>
    2b5e:	86 95       	lsr	r24
    2b60:	71 05       	cpc	r23, r1
    2b62:	61 05       	cpc	r22, r1
    2b64:	08 94       	sec
    2b66:	08 95       	ret

00002b68 <__fp_zero>:
    2b68:	e8 94       	clt

00002b6a <__fp_szero>:
    2b6a:	bb 27       	eor	r27, r27
    2b6c:	66 27       	eor	r22, r22
    2b6e:	77 27       	eor	r23, r23
    2b70:	cb 01       	movw	r24, r22
    2b72:	97 f9       	bld	r25, 7
    2b74:	08 95       	ret

00002b76 <__gesf2>:
    2b76:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__fp_cmp>
    2b7a:	08 f4       	brcc	.+2      	; 0x2b7e <__gesf2+0x8>
    2b7c:	8f ef       	ldi	r24, 0xFF	; 255
    2b7e:	08 95       	ret

00002b80 <inverse>:
    2b80:	9b 01       	movw	r18, r22
    2b82:	ac 01       	movw	r20, r24
    2b84:	60 e0       	ldi	r22, 0x00	; 0
    2b86:	70 e0       	ldi	r23, 0x00	; 0
    2b88:	80 e8       	ldi	r24, 0x80	; 128
    2b8a:	9f e3       	ldi	r25, 0x3F	; 63
    2b8c:	0c 94 3a 14 	jmp	0x2874	; 0x2874 <__divsf3>

00002b90 <__mulsf3>:
    2b90:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <__mulsf3x>
    2b94:	0c 94 81 15 	jmp	0x2b02	; 0x2b02 <__fp_round>
    2b98:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <__fp_pscA>
    2b9c:	38 f0       	brcs	.+14     	; 0x2bac <__mulsf3+0x1c>
    2b9e:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__fp_pscB>
    2ba2:	20 f0       	brcs	.+8      	; 0x2bac <__mulsf3+0x1c>
    2ba4:	95 23       	and	r25, r21
    2ba6:	11 f0       	breq	.+4      	; 0x2bac <__mulsf3+0x1c>
    2ba8:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <__fp_inf>
    2bac:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <__fp_nan>
    2bb0:	11 24       	eor	r1, r1
    2bb2:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <__fp_szero>

00002bb6 <__mulsf3x>:
    2bb6:	0e 94 92 15 	call	0x2b24	; 0x2b24 <__fp_split3>
    2bba:	70 f3       	brcs	.-36     	; 0x2b98 <__mulsf3+0x8>

00002bbc <__mulsf3_pse>:
    2bbc:	95 9f       	mul	r25, r21
    2bbe:	c1 f3       	breq	.-16     	; 0x2bb0 <__mulsf3+0x20>
    2bc0:	95 0f       	add	r25, r21
    2bc2:	50 e0       	ldi	r21, 0x00	; 0
    2bc4:	55 1f       	adc	r21, r21
    2bc6:	62 9f       	mul	r22, r18
    2bc8:	f0 01       	movw	r30, r0
    2bca:	72 9f       	mul	r23, r18
    2bcc:	bb 27       	eor	r27, r27
    2bce:	f0 0d       	add	r31, r0
    2bd0:	b1 1d       	adc	r27, r1
    2bd2:	63 9f       	mul	r22, r19
    2bd4:	aa 27       	eor	r26, r26
    2bd6:	f0 0d       	add	r31, r0
    2bd8:	b1 1d       	adc	r27, r1
    2bda:	aa 1f       	adc	r26, r26
    2bdc:	64 9f       	mul	r22, r20
    2bde:	66 27       	eor	r22, r22
    2be0:	b0 0d       	add	r27, r0
    2be2:	a1 1d       	adc	r26, r1
    2be4:	66 1f       	adc	r22, r22
    2be6:	82 9f       	mul	r24, r18
    2be8:	22 27       	eor	r18, r18
    2bea:	b0 0d       	add	r27, r0
    2bec:	a1 1d       	adc	r26, r1
    2bee:	62 1f       	adc	r22, r18
    2bf0:	73 9f       	mul	r23, r19
    2bf2:	b0 0d       	add	r27, r0
    2bf4:	a1 1d       	adc	r26, r1
    2bf6:	62 1f       	adc	r22, r18
    2bf8:	83 9f       	mul	r24, r19
    2bfa:	a0 0d       	add	r26, r0
    2bfc:	61 1d       	adc	r22, r1
    2bfe:	22 1f       	adc	r18, r18
    2c00:	74 9f       	mul	r23, r20
    2c02:	33 27       	eor	r19, r19
    2c04:	a0 0d       	add	r26, r0
    2c06:	61 1d       	adc	r22, r1
    2c08:	23 1f       	adc	r18, r19
    2c0a:	84 9f       	mul	r24, r20
    2c0c:	60 0d       	add	r22, r0
    2c0e:	21 1d       	adc	r18, r1
    2c10:	82 2f       	mov	r24, r18
    2c12:	76 2f       	mov	r23, r22
    2c14:	6a 2f       	mov	r22, r26
    2c16:	11 24       	eor	r1, r1
    2c18:	9f 57       	subi	r25, 0x7F	; 127
    2c1a:	50 40       	sbci	r21, 0x00	; 0
    2c1c:	9a f0       	brmi	.+38     	; 0x2c44 <__mulsf3_pse+0x88>
    2c1e:	f1 f0       	breq	.+60     	; 0x2c5c <__mulsf3_pse+0xa0>
    2c20:	88 23       	and	r24, r24
    2c22:	4a f0       	brmi	.+18     	; 0x2c36 <__mulsf3_pse+0x7a>
    2c24:	ee 0f       	add	r30, r30
    2c26:	ff 1f       	adc	r31, r31
    2c28:	bb 1f       	adc	r27, r27
    2c2a:	66 1f       	adc	r22, r22
    2c2c:	77 1f       	adc	r23, r23
    2c2e:	88 1f       	adc	r24, r24
    2c30:	91 50       	subi	r25, 0x01	; 1
    2c32:	50 40       	sbci	r21, 0x00	; 0
    2c34:	a9 f7       	brne	.-22     	; 0x2c20 <__mulsf3_pse+0x64>
    2c36:	9e 3f       	cpi	r25, 0xFE	; 254
    2c38:	51 05       	cpc	r21, r1
    2c3a:	80 f0       	brcs	.+32     	; 0x2c5c <__mulsf3_pse+0xa0>
    2c3c:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <__fp_inf>
    2c40:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <__fp_szero>
    2c44:	5f 3f       	cpi	r21, 0xFF	; 255
    2c46:	e4 f3       	brlt	.-8      	; 0x2c40 <__mulsf3_pse+0x84>
    2c48:	98 3e       	cpi	r25, 0xE8	; 232
    2c4a:	d4 f3       	brlt	.-12     	; 0x2c40 <__mulsf3_pse+0x84>
    2c4c:	86 95       	lsr	r24
    2c4e:	77 95       	ror	r23
    2c50:	67 95       	ror	r22
    2c52:	b7 95       	ror	r27
    2c54:	f7 95       	ror	r31
    2c56:	e7 95       	ror	r30
    2c58:	9f 5f       	subi	r25, 0xFF	; 255
    2c5a:	c1 f7       	brne	.-16     	; 0x2c4c <__mulsf3_pse+0x90>
    2c5c:	fe 2b       	or	r31, r30
    2c5e:	88 0f       	add	r24, r24
    2c60:	91 1d       	adc	r25, r1
    2c62:	96 95       	lsr	r25
    2c64:	87 95       	ror	r24
    2c66:	97 f9       	bld	r25, 7
    2c68:	08 95       	ret
    2c6a:	19 f4       	brne	.+6      	; 0x2c72 <__mulsf3_pse+0xb6>
    2c6c:	16 f4       	brtc	.+4      	; 0x2c72 <__mulsf3_pse+0xb6>
    2c6e:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <__fp_nan>
    2c72:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__fp_mpack>

00002c76 <sqrt>:
    2c76:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__fp_splitA>
    2c7a:	b8 f3       	brcs	.-18     	; 0x2c6a <__mulsf3_pse+0xae>
    2c7c:	99 23       	and	r25, r25
    2c7e:	c9 f3       	breq	.-14     	; 0x2c72 <__mulsf3_pse+0xb6>
    2c80:	b6 f3       	brts	.-20     	; 0x2c6e <__mulsf3_pse+0xb2>
    2c82:	9f 57       	subi	r25, 0x7F	; 127
    2c84:	55 0b       	sbc	r21, r21
    2c86:	87 ff       	sbrs	r24, 7
    2c88:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <__fp_norm2>
    2c8c:	00 24       	eor	r0, r0
    2c8e:	a0 e6       	ldi	r26, 0x60	; 96
    2c90:	40 ea       	ldi	r20, 0xA0	; 160
    2c92:	90 01       	movw	r18, r0
    2c94:	80 58       	subi	r24, 0x80	; 128
    2c96:	56 95       	lsr	r21
    2c98:	97 95       	ror	r25
    2c9a:	28 f4       	brcc	.+10     	; 0x2ca6 <sqrt+0x30>
    2c9c:	80 5c       	subi	r24, 0xC0	; 192
    2c9e:	66 0f       	add	r22, r22
    2ca0:	77 1f       	adc	r23, r23
    2ca2:	88 1f       	adc	r24, r24
    2ca4:	20 f0       	brcs	.+8      	; 0x2cae <sqrt+0x38>
    2ca6:	26 17       	cp	r18, r22
    2ca8:	37 07       	cpc	r19, r23
    2caa:	48 07       	cpc	r20, r24
    2cac:	30 f4       	brcc	.+12     	; 0x2cba <sqrt+0x44>
    2cae:	62 1b       	sub	r22, r18
    2cb0:	73 0b       	sbc	r23, r19
    2cb2:	84 0b       	sbc	r24, r20
    2cb4:	20 29       	or	r18, r0
    2cb6:	31 29       	or	r19, r1
    2cb8:	4a 2b       	or	r20, r26
    2cba:	a6 95       	lsr	r26
    2cbc:	17 94       	ror	r1
    2cbe:	07 94       	ror	r0
    2cc0:	20 25       	eor	r18, r0
    2cc2:	31 25       	eor	r19, r1
    2cc4:	4a 27       	eor	r20, r26
    2cc6:	58 f7       	brcc	.-42     	; 0x2c9e <sqrt+0x28>
    2cc8:	66 0f       	add	r22, r22
    2cca:	77 1f       	adc	r23, r23
    2ccc:	88 1f       	adc	r24, r24
    2cce:	20 f0       	brcs	.+8      	; 0x2cd8 <sqrt+0x62>
    2cd0:	26 17       	cp	r18, r22
    2cd2:	37 07       	cpc	r19, r23
    2cd4:	48 07       	cpc	r20, r24
    2cd6:	30 f4       	brcc	.+12     	; 0x2ce4 <sqrt+0x6e>
    2cd8:	62 0b       	sbc	r22, r18
    2cda:	73 0b       	sbc	r23, r19
    2cdc:	84 0b       	sbc	r24, r20
    2cde:	20 0d       	add	r18, r0
    2ce0:	31 1d       	adc	r19, r1
    2ce2:	41 1d       	adc	r20, r1
    2ce4:	a0 95       	com	r26
    2ce6:	81 f7       	brne	.-32     	; 0x2cc8 <sqrt+0x52>
    2ce8:	b9 01       	movw	r22, r18
    2cea:	84 2f       	mov	r24, r20
    2cec:	91 58       	subi	r25, 0x81	; 129
    2cee:	88 0f       	add	r24, r24
    2cf0:	96 95       	lsr	r25
    2cf2:	87 95       	ror	r24
    2cf4:	08 95       	ret

00002cf6 <square>:
    2cf6:	9b 01       	movw	r18, r22
    2cf8:	ac 01       	movw	r20, r24
    2cfa:	0c 94 c8 15 	jmp	0x2b90	; 0x2b90 <__mulsf3>

00002cfe <__fp_mpack>:
    2cfe:	9f 3f       	cpi	r25, 0xFF	; 255
    2d00:	31 f0       	breq	.+12     	; 0x2d0e <__fp_mpack_finite+0xc>

00002d02 <__fp_mpack_finite>:
    2d02:	91 50       	subi	r25, 0x01	; 1
    2d04:	20 f4       	brcc	.+8      	; 0x2d0e <__fp_mpack_finite+0xc>
    2d06:	87 95       	ror	r24
    2d08:	77 95       	ror	r23
    2d0a:	67 95       	ror	r22
    2d0c:	b7 95       	ror	r27
    2d0e:	88 0f       	add	r24, r24
    2d10:	91 1d       	adc	r25, r1
    2d12:	96 95       	lsr	r25
    2d14:	87 95       	ror	r24
    2d16:	97 f9       	bld	r25, 7
    2d18:	08 95       	ret

00002d1a <__fp_norm2>:
    2d1a:	91 50       	subi	r25, 0x01	; 1
    2d1c:	50 40       	sbci	r21, 0x00	; 0
    2d1e:	66 0f       	add	r22, r22
    2d20:	77 1f       	adc	r23, r23
    2d22:	88 1f       	adc	r24, r24
    2d24:	d2 f7       	brpl	.-12     	; 0x2d1a <__fp_norm2>
    2d26:	08 95       	ret

00002d28 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2d28:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2d2a:	91 8d       	ldd	r25, Z+25	; 0x19
    2d2c:	22 8d       	ldd	r18, Z+26	; 0x1a
    2d2e:	89 2f       	mov	r24, r25
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	80 5c       	subi	r24, 0xC0	; 192
    2d34:	9f 4f       	sbci	r25, 0xFF	; 255
    2d36:	82 1b       	sub	r24, r18
    2d38:	91 09       	sbc	r25, r1
}
    2d3a:	8f 73       	andi	r24, 0x3F	; 63
    2d3c:	99 27       	eor	r25, r25
    2d3e:	08 95       	ret

00002d40 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2d40:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2d42:	91 8d       	ldd	r25, Z+25	; 0x19
    2d44:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d46:	98 17       	cp	r25, r24
    2d48:	31 f0       	breq	.+12     	; 0x2d56 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2d4a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d4c:	e8 0f       	add	r30, r24
    2d4e:	f1 1d       	adc	r31, r1
    2d50:	85 8d       	ldd	r24, Z+29	; 0x1d
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2d56:	8f ef       	ldi	r24, 0xFF	; 255
    2d58:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    2d5a:	08 95       	ret

00002d5c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    2d5c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2d5e:	91 8d       	ldd	r25, Z+25	; 0x19
    2d60:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d62:	98 17       	cp	r25, r24
    2d64:	61 f0       	breq	.+24     	; 0x2d7e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2d66:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d68:	df 01       	movw	r26, r30
    2d6a:	a8 0f       	add	r26, r24
    2d6c:	b1 1d       	adc	r27, r1
    2d6e:	5d 96       	adiw	r26, 0x1d	; 29
    2d70:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2d72:	92 8d       	ldd	r25, Z+26	; 0x1a
    2d74:	9f 5f       	subi	r25, 0xFF	; 255
    2d76:	9f 73       	andi	r25, 0x3F	; 63
    2d78:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2d7e:	8f ef       	ldi	r24, 0xFF	; 255
    2d80:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2d82:	08 95       	ret

00002d84 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    2d84:	fc 01       	movw	r30, r24
    2d86:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    2d88:	44 8d       	ldd	r20, Z+28	; 0x1c
    2d8a:	25 2f       	mov	r18, r21
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	84 2f       	mov	r24, r20
    2d90:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    2d92:	82 1b       	sub	r24, r18
    2d94:	93 0b       	sbc	r25, r19
    2d96:	54 17       	cp	r21, r20
    2d98:	10 f0       	brcs	.+4      	; 0x2d9e <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    2d9a:	cf 96       	adiw	r24, 0x3f	; 63
    2d9c:	08 95       	ret
  return tail - head - 1;
    2d9e:	01 97       	sbiw	r24, 0x01	; 1
}
    2da0:	08 95       	ret

00002da2 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2da2:	80 e3       	ldi	r24, 0x30	; 48
    2da4:	98 e1       	ldi	r25, 0x18	; 24
    2da6:	89 2b       	or	r24, r25
    2da8:	49 f0       	breq	.+18     	; 0x2dbc <_Z14serialEventRunv+0x1a>
    2daa:	80 e0       	ldi	r24, 0x00	; 0
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	89 2b       	or	r24, r25
    2db0:	29 f0       	breq	.+10     	; 0x2dbc <_Z14serialEventRunv+0x1a>
    2db2:	0e 94 30 18 	call	0x3060	; 0x3060 <_Z17Serial0_availablev>
    2db6:	81 11       	cpse	r24, r1
    2db8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2dbc:	08 95       	ret

00002dbe <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2dbe:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2dc0:	84 8d       	ldd	r24, Z+28	; 0x1c
    2dc2:	df 01       	movw	r26, r30
    2dc4:	a8 0f       	add	r26, r24
    2dc6:	b1 1d       	adc	r27, r1
    2dc8:	a3 5a       	subi	r26, 0xA3	; 163
    2dca:	bf 4f       	sbci	r27, 0xFF	; 255
    2dcc:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2dce:	84 8d       	ldd	r24, Z+28	; 0x1c
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	01 96       	adiw	r24, 0x01	; 1
    2dd4:	8f 73       	andi	r24, 0x3F	; 63
    2dd6:	99 27       	eor	r25, r25
    2dd8:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    2dda:	a6 89       	ldd	r26, Z+22	; 0x16
    2ddc:	b7 89       	ldd	r27, Z+23	; 0x17
    2dde:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2de0:	a0 89       	ldd	r26, Z+16	; 0x10
    2de2:	b1 89       	ldd	r27, Z+17	; 0x11
    2de4:	8c 91       	ld	r24, X
    2de6:	83 70       	andi	r24, 0x03	; 3
    2de8:	80 64       	ori	r24, 0x40	; 64
    2dea:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    2dec:	93 8d       	ldd	r25, Z+27	; 0x1b
    2dee:	84 8d       	ldd	r24, Z+28	; 0x1c
    2df0:	98 13       	cpse	r25, r24
    2df2:	06 c0       	rjmp	.+12     	; 0x2e00 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2df4:	02 88       	ldd	r0, Z+18	; 0x12
    2df6:	f3 89       	ldd	r31, Z+19	; 0x13
    2df8:	e0 2d       	mov	r30, r0
    2dfa:	80 81       	ld	r24, Z
    2dfc:	8f 7d       	andi	r24, 0xDF	; 223
    2dfe:	80 83       	st	Z, r24
    2e00:	08 95       	ret

00002e02 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    2e02:	ef 92       	push	r14
    2e04:	ff 92       	push	r15
    2e06:	0f 93       	push	r16
    2e08:	1f 93       	push	r17
    2e0a:	cf 93       	push	r28
    2e0c:	df 93       	push	r29
    2e0e:	ec 01       	movw	r28, r24
  _written = true;
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2e14:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e16:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e18:	98 13       	cpse	r25, r24
    2e1a:	05 c0       	rjmp	.+10     	; 0x2e26 <_ZN14HardwareSerial5writeEh+0x24>
    2e1c:	e8 89       	ldd	r30, Y+16	; 0x10
    2e1e:	f9 89       	ldd	r31, Y+17	; 0x11
    2e20:	80 81       	ld	r24, Z
    2e22:	85 fd       	sbrc	r24, 5
    2e24:	26 c0       	rjmp	.+76     	; 0x2e72 <_ZN14HardwareSerial5writeEh+0x70>
    2e26:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2e28:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2e2a:	10 e0       	ldi	r17, 0x00	; 0
    2e2c:	0f 5f       	subi	r16, 0xFF	; 255
    2e2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e30:	0f 73       	andi	r16, 0x3F	; 63
    2e32:	11 27       	eor	r17, r17
    2e34:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2e36:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e38:	e8 12       	cpse	r14, r24
    2e3a:	0c c0       	rjmp	.+24     	; 0x2e54 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    2e3c:	0f b6       	in	r0, 0x3f	; 63
    2e3e:	07 fc       	sbrc	r0, 7
    2e40:	fa cf       	rjmp	.-12     	; 0x2e36 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2e42:	e8 89       	ldd	r30, Y+16	; 0x10
    2e44:	f9 89       	ldd	r31, Y+17	; 0x11
    2e46:	80 81       	ld	r24, Z
    2e48:	85 ff       	sbrs	r24, 5
    2e4a:	f5 cf       	rjmp	.-22     	; 0x2e36 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    2e4c:	ce 01       	movw	r24, r28
    2e4e:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2e52:	f1 cf       	rjmp	.-30     	; 0x2e36 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2e54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e56:	fe 01       	movw	r30, r28
    2e58:	e8 0f       	add	r30, r24
    2e5a:	f1 1d       	adc	r31, r1
    2e5c:	e3 5a       	subi	r30, 0xA3	; 163
    2e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e60:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2e62:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2e64:	f8 94       	cli
    _tx_buffer_head = i;
    2e66:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    2e68:	ea 89       	ldd	r30, Y+18	; 0x12
    2e6a:	fb 89       	ldd	r31, Y+19	; 0x13
    2e6c:	80 81       	ld	r24, Z
    2e6e:	80 62       	ori	r24, 0x20	; 32
    2e70:	0a c0       	rjmp	.+20     	; 0x2e86 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2e72:	9f b7       	in	r25, 0x3f	; 63
    2e74:	f8 94       	cli
      *_udr = c;
    2e76:	ee 89       	ldd	r30, Y+22	; 0x16
    2e78:	ff 89       	ldd	r31, Y+23	; 0x17
    2e7a:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2e7c:	e8 89       	ldd	r30, Y+16	; 0x10
    2e7e:	f9 89       	ldd	r31, Y+17	; 0x11
    2e80:	80 81       	ld	r24, Z
    2e82:	83 70       	andi	r24, 0x03	; 3
    2e84:	80 64       	ori	r24, 0x40	; 64
    2e86:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2e88:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	df 91       	pop	r29
    2e90:	cf 91       	pop	r28
    2e92:	1f 91       	pop	r17
    2e94:	0f 91       	pop	r16
    2e96:	ff 90       	pop	r15
    2e98:	ef 90       	pop	r14
    2e9a:	08 95       	ret

00002e9c <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2e9c:	cf 93       	push	r28
    2e9e:	df 93       	push	r29
    2ea0:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2ea2:	88 8d       	ldd	r24, Y+24	; 0x18
    2ea4:	88 23       	and	r24, r24
    2ea6:	c9 f0       	breq	.+50     	; 0x2eda <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2ea8:	ea 89       	ldd	r30, Y+18	; 0x12
    2eaa:	fb 89       	ldd	r31, Y+19	; 0x13
    2eac:	80 81       	ld	r24, Z
    2eae:	85 fd       	sbrc	r24, 5
    2eb0:	05 c0       	rjmp	.+10     	; 0x2ebc <_ZN14HardwareSerial5flushEv+0x20>
    2eb2:	a8 89       	ldd	r26, Y+16	; 0x10
    2eb4:	b9 89       	ldd	r27, Y+17	; 0x11
    2eb6:	8c 91       	ld	r24, X
    2eb8:	86 fd       	sbrc	r24, 6
    2eba:	0f c0       	rjmp	.+30     	; 0x2eda <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2ebc:	0f b6       	in	r0, 0x3f	; 63
    2ebe:	07 fc       	sbrc	r0, 7
    2ec0:	f5 cf       	rjmp	.-22     	; 0x2eac <_ZN14HardwareSerial5flushEv+0x10>
    2ec2:	80 81       	ld	r24, Z
    2ec4:	85 ff       	sbrs	r24, 5
    2ec6:	f2 cf       	rjmp	.-28     	; 0x2eac <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    2ec8:	a8 89       	ldd	r26, Y+16	; 0x10
    2eca:	b9 89       	ldd	r27, Y+17	; 0x11
    2ecc:	8c 91       	ld	r24, X
    2ece:	85 ff       	sbrs	r24, 5
    2ed0:	ed cf       	rjmp	.-38     	; 0x2eac <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    2ed2:	ce 01       	movw	r24, r28
    2ed4:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2ed8:	e7 cf       	rjmp	.-50     	; 0x2ea8 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2eda:	df 91       	pop	r29
    2edc:	cf 91       	pop	r28
    2ede:	08 95       	ret

00002ee0 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    2ee0:	cf 92       	push	r12
    2ee2:	df 92       	push	r13
    2ee4:	ef 92       	push	r14
    2ee6:	ff 92       	push	r15
    2ee8:	1f 93       	push	r17
    2eea:	cf 93       	push	r28
    2eec:	df 93       	push	r29
    2eee:	ec 01       	movw	r28, r24
    2ef0:	6a 01       	movw	r12, r20
    2ef2:	7b 01       	movw	r14, r22
    2ef4:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    2ef6:	e8 89       	ldd	r30, Y+16	; 0x10
    2ef8:	f9 89       	ldd	r31, Y+17	; 0x11
    2efa:	82 e0       	ldi	r24, 0x02	; 2
    2efc:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2efe:	41 15       	cp	r20, r1
    2f00:	51 4e       	sbci	r21, 0xE1	; 225
    2f02:	61 05       	cpc	r22, r1
    2f04:	71 05       	cpc	r23, r1
    2f06:	b1 f0       	breq	.+44     	; 0x2f34 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2f08:	60 e0       	ldi	r22, 0x00	; 0
    2f0a:	79 e0       	ldi	r23, 0x09	; 9
    2f0c:	8d e3       	ldi	r24, 0x3D	; 61
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	a7 01       	movw	r20, r14
    2f12:	96 01       	movw	r18, r12
    2f14:	0e 94 a7 23 	call	0x474e	; 0x474e <__udivmodsi4>
    2f18:	da 01       	movw	r26, r20
    2f1a:	c9 01       	movw	r24, r18
    2f1c:	01 97       	sbiw	r24, 0x01	; 1
    2f1e:	a1 09       	sbc	r26, r1
    2f20:	b1 09       	sbc	r27, r1
    2f22:	b6 95       	lsr	r27
    2f24:	a7 95       	ror	r26
    2f26:	97 95       	ror	r25
    2f28:	87 95       	ror	r24
    2f2a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2f2c:	21 15       	cp	r18, r1
    2f2e:	80 e1       	ldi	r24, 0x10	; 16
    2f30:	38 07       	cpc	r19, r24
    2f32:	a8 f0       	brcs	.+42     	; 0x2f5e <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    2f34:	e8 89       	ldd	r30, Y+16	; 0x10
    2f36:	f9 89       	ldd	r31, Y+17	; 0x11
    2f38:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2f3a:	60 e8       	ldi	r22, 0x80	; 128
    2f3c:	74 e8       	ldi	r23, 0x84	; 132
    2f3e:	8e e1       	ldi	r24, 0x1E	; 30
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	a7 01       	movw	r20, r14
    2f44:	96 01       	movw	r18, r12
    2f46:	0e 94 a7 23 	call	0x474e	; 0x474e <__udivmodsi4>
    2f4a:	da 01       	movw	r26, r20
    2f4c:	c9 01       	movw	r24, r18
    2f4e:	01 97       	sbiw	r24, 0x01	; 1
    2f50:	a1 09       	sbc	r26, r1
    2f52:	b1 09       	sbc	r27, r1
    2f54:	b6 95       	lsr	r27
    2f56:	a7 95       	ror	r26
    2f58:	97 95       	ror	r25
    2f5a:	87 95       	ror	r24
    2f5c:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2f5e:	ec 85       	ldd	r30, Y+12	; 0x0c
    2f60:	fd 85       	ldd	r31, Y+13	; 0x0d
    2f62:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    2f64:	ee 85       	ldd	r30, Y+14	; 0x0e
    2f66:	ff 85       	ldd	r31, Y+15	; 0x0f
    2f68:	20 83       	st	Z, r18

  _written = false;
    2f6a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2f6c:	ec 89       	ldd	r30, Y+20	; 0x14
    2f6e:	fd 89       	ldd	r31, Y+21	; 0x15
    2f70:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    2f72:	ea 89       	ldd	r30, Y+18	; 0x12
    2f74:	fb 89       	ldd	r31, Y+19	; 0x13
    2f76:	80 81       	ld	r24, Z
    2f78:	80 61       	ori	r24, 0x10	; 16
    2f7a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    2f7c:	ea 89       	ldd	r30, Y+18	; 0x12
    2f7e:	fb 89       	ldd	r31, Y+19	; 0x13
    2f80:	80 81       	ld	r24, Z
    2f82:	88 60       	ori	r24, 0x08	; 8
    2f84:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    2f86:	ea 89       	ldd	r30, Y+18	; 0x12
    2f88:	fb 89       	ldd	r31, Y+19	; 0x13
    2f8a:	80 81       	ld	r24, Z
    2f8c:	80 68       	ori	r24, 0x80	; 128
    2f8e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2f90:	ea 89       	ldd	r30, Y+18	; 0x12
    2f92:	fb 89       	ldd	r31, Y+19	; 0x13
    2f94:	80 81       	ld	r24, Z
    2f96:	8f 7d       	andi	r24, 0xDF	; 223
    2f98:	80 83       	st	Z, r24
}
    2f9a:	df 91       	pop	r29
    2f9c:	cf 91       	pop	r28
    2f9e:	1f 91       	pop	r17
    2fa0:	ff 90       	pop	r15
    2fa2:	ef 90       	pop	r14
    2fa4:	df 90       	pop	r13
    2fa6:	cf 90       	pop	r12
    2fa8:	08 95       	ret

00002faa <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	08 95       	ret

00002fb0 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2fb0:	1f 92       	push	r1
    2fb2:	0f 92       	push	r0
    2fb4:	0f b6       	in	r0, 0x3f	; 63
    2fb6:	0f 92       	push	r0
    2fb8:	11 24       	eor	r1, r1
    2fba:	2f 93       	push	r18
    2fbc:	8f 93       	push	r24
    2fbe:	9f 93       	push	r25
    2fc0:	ef 93       	push	r30
    2fc2:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2fc4:	e0 91 2f 02 	lds	r30, 0x022F	; 0x80022f <Serial+0x10>
    2fc8:	f0 91 30 02 	lds	r31, 0x0230	; 0x800230 <Serial+0x11>
    2fcc:	80 81       	ld	r24, Z
    2fce:	e0 91 35 02 	lds	r30, 0x0235	; 0x800235 <Serial+0x16>
    2fd2:	f0 91 36 02 	lds	r31, 0x0236	; 0x800236 <Serial+0x17>
    2fd6:	82 fd       	sbrc	r24, 2
    2fd8:	12 c0       	rjmp	.+36     	; 0x2ffe <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2fda:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2fdc:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <Serial+0x19>
    2fe0:	8f 5f       	subi	r24, 0xFF	; 255
    2fe2:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2fe4:	20 91 39 02 	lds	r18, 0x0239	; 0x800239 <Serial+0x1a>
    2fe8:	82 17       	cp	r24, r18
    2fea:	51 f0       	breq	.+20     	; 0x3000 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    2fec:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <Serial+0x19>
    2ff0:	f0 e0       	ldi	r31, 0x00	; 0
    2ff2:	e1 5e       	subi	r30, 0xE1	; 225
    2ff4:	fd 4f       	sbci	r31, 0xFD	; 253
    2ff6:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2ff8:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <Serial+0x19>
    2ffc:	01 c0       	rjmp	.+2      	; 0x3000 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2ffe:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    3000:	ff 91       	pop	r31
    3002:	ef 91       	pop	r30
    3004:	9f 91       	pop	r25
    3006:	8f 91       	pop	r24
    3008:	2f 91       	pop	r18
    300a:	0f 90       	pop	r0
    300c:	0f be       	out	0x3f, r0	; 63
    300e:	0f 90       	pop	r0
    3010:	1f 90       	pop	r1
    3012:	18 95       	reti

00003014 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    3014:	1f 92       	push	r1
    3016:	0f 92       	push	r0
    3018:	0f b6       	in	r0, 0x3f	; 63
    301a:	0f 92       	push	r0
    301c:	11 24       	eor	r1, r1
    301e:	2f 93       	push	r18
    3020:	3f 93       	push	r19
    3022:	4f 93       	push	r20
    3024:	5f 93       	push	r21
    3026:	6f 93       	push	r22
    3028:	7f 93       	push	r23
    302a:	8f 93       	push	r24
    302c:	9f 93       	push	r25
    302e:	af 93       	push	r26
    3030:	bf 93       	push	r27
    3032:	ef 93       	push	r30
    3034:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    3036:	8f e1       	ldi	r24, 0x1F	; 31
    3038:	92 e0       	ldi	r25, 0x02	; 2
    303a:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    303e:	ff 91       	pop	r31
    3040:	ef 91       	pop	r30
    3042:	bf 91       	pop	r27
    3044:	af 91       	pop	r26
    3046:	9f 91       	pop	r25
    3048:	8f 91       	pop	r24
    304a:	7f 91       	pop	r23
    304c:	6f 91       	pop	r22
    304e:	5f 91       	pop	r21
    3050:	4f 91       	pop	r20
    3052:	3f 91       	pop	r19
    3054:	2f 91       	pop	r18
    3056:	0f 90       	pop	r0
    3058:	0f be       	out	0x3f, r0	; 63
    305a:	0f 90       	pop	r0
    305c:	1f 90       	pop	r1
    305e:	18 95       	reti

00003060 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    3060:	8f e1       	ldi	r24, 0x1F	; 31
    3062:	92 e0       	ldi	r25, 0x02	; 2
    3064:	0e 94 94 16 	call	0x2d28	; 0x2d28 <_ZN14HardwareSerial9availableEv>
    3068:	21 e0       	ldi	r18, 0x01	; 1
    306a:	89 2b       	or	r24, r25
    306c:	09 f4       	brne	.+2      	; 0x3070 <_Z17Serial0_availablev+0x10>
    306e:	20 e0       	ldi	r18, 0x00	; 0
}
    3070:	82 2f       	mov	r24, r18
    3072:	08 95       	ret

00003074 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3074:	ef e1       	ldi	r30, 0x1F	; 31
    3076:	f2 e0       	ldi	r31, 0x02	; 2
    3078:	13 82       	std	Z+3, r1	; 0x03
    307a:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    307c:	88 ee       	ldi	r24, 0xE8	; 232
    307e:	93 e0       	ldi	r25, 0x03	; 3
    3080:	a0 e0       	ldi	r26, 0x00	; 0
    3082:	b0 e0       	ldi	r27, 0x00	; 0
    3084:	84 83       	std	Z+4, r24	; 0x04
    3086:	95 83       	std	Z+5, r25	; 0x05
    3088:	a6 83       	std	Z+6, r26	; 0x06
    308a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    308c:	83 e4       	ldi	r24, 0x43	; 67
    308e:	91 e0       	ldi	r25, 0x01	; 1
    3090:	91 83       	std	Z+1, r25	; 0x01
    3092:	80 83       	st	Z, r24
    3094:	85 ec       	ldi	r24, 0xC5	; 197
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	95 87       	std	Z+13, r25	; 0x0d
    309a:	84 87       	std	Z+12, r24	; 0x0c
    309c:	84 ec       	ldi	r24, 0xC4	; 196
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	97 87       	std	Z+15, r25	; 0x0f
    30a2:	86 87       	std	Z+14, r24	; 0x0e
    30a4:	80 ec       	ldi	r24, 0xC0	; 192
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	91 8b       	std	Z+17, r25	; 0x11
    30aa:	80 8b       	std	Z+16, r24	; 0x10
    30ac:	81 ec       	ldi	r24, 0xC1	; 193
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	93 8b       	std	Z+19, r25	; 0x13
    30b2:	82 8b       	std	Z+18, r24	; 0x12
    30b4:	82 ec       	ldi	r24, 0xC2	; 194
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	95 8b       	std	Z+21, r25	; 0x15
    30ba:	84 8b       	std	Z+20, r24	; 0x14
    30bc:	86 ec       	ldi	r24, 0xC6	; 198
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	97 8b       	std	Z+23, r25	; 0x17
    30c2:	86 8b       	std	Z+22, r24	; 0x16
    30c4:	11 8e       	std	Z+25, r1	; 0x19
    30c6:	12 8e       	std	Z+26, r1	; 0x1a
    30c8:	13 8e       	std	Z+27, r1	; 0x1b
    30ca:	14 8e       	std	Z+28, r1	; 0x1c
    30cc:	08 95       	ret

000030ce <initVariant>:
    30ce:	08 95       	ret

000030d0 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    30d0:	0e 94 3a 1c 	call	0x3874	; 0x3874 <init>

	initVariant();
    30d4:	0e 94 67 18 	call	0x30ce	; 0x30ce <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    30d8:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    30dc:	c1 ed       	ldi	r28, 0xD1	; 209
    30de:	d6 e1       	ldi	r29, 0x16	; 22
#endif
	
	setup();
    
	for (;;) {
		loop();
    30e0:	0e 94 98 12 	call	0x2530	; 0x2530 <loop>
		if (serialEventRun) serialEventRun();
    30e4:	20 97       	sbiw	r28, 0x00	; 0
    30e6:	e1 f3       	breq	.-8      	; 0x30e0 <main+0x10>
    30e8:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <_Z14serialEventRunv>
    30ec:	f9 cf       	rjmp	.-14     	; 0x30e0 <main+0x10>

000030ee <_Znwj>:
    30ee:	0c 94 e9 23 	jmp	0x47d2	; 0x47d2 <malloc>

000030f2 <_ZdlPv>:
    30f2:	0c 94 81 24 	jmp	0x4902	; 0x4902 <free>

000030f6 <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    30f6:	cf 92       	push	r12
    30f8:	df 92       	push	r13
    30fa:	ef 92       	push	r14
    30fc:	ff 92       	push	r15
    30fe:	0f 93       	push	r16
    3100:	1f 93       	push	r17
    3102:	cf 93       	push	r28
    3104:	df 93       	push	r29
    3106:	6c 01       	movw	r12, r24
    3108:	7a 01       	movw	r14, r20
    310a:	8b 01       	movw	r16, r22
    310c:	c0 e0       	ldi	r28, 0x00	; 0
    310e:	d0 e0       	ldi	r29, 0x00	; 0
    3110:	ce 15       	cp	r28, r14
    3112:	df 05       	cpc	r29, r15
    3114:	81 f0       	breq	.+32     	; 0x3136 <_ZN5Print5writeEPKhj+0x40>
    3116:	d8 01       	movw	r26, r16
    3118:	6d 91       	ld	r22, X+
    311a:	8d 01       	movw	r16, r26
    311c:	d6 01       	movw	r26, r12
    311e:	ed 91       	ld	r30, X+
    3120:	fc 91       	ld	r31, X
    3122:	01 90       	ld	r0, Z+
    3124:	f0 81       	ld	r31, Z
    3126:	e0 2d       	mov	r30, r0
    3128:	c6 01       	movw	r24, r12
    312a:	09 95       	icall
    312c:	89 2b       	or	r24, r25
    312e:	11 f0       	breq	.+4      	; 0x3134 <_ZN5Print5writeEPKhj+0x3e>
    3130:	21 96       	adiw	r28, 0x01	; 1
    3132:	ee cf       	rjmp	.-36     	; 0x3110 <_ZN5Print5writeEPKhj+0x1a>
    3134:	7e 01       	movw	r14, r28
    3136:	c7 01       	movw	r24, r14
    3138:	df 91       	pop	r29
    313a:	cf 91       	pop	r28
    313c:	1f 91       	pop	r17
    313e:	0f 91       	pop	r16
    3140:	ff 90       	pop	r15
    3142:	ef 90       	pop	r14
    3144:	df 90       	pop	r13
    3146:	cf 90       	pop	r12
    3148:	08 95       	ret

0000314a <_ZN5Print5writeEPKc>:
    314a:	61 15       	cp	r22, r1
    314c:	71 05       	cpc	r23, r1
    314e:	79 f0       	breq	.+30     	; 0x316e <_ZN5Print5writeEPKc+0x24>
    3150:	fb 01       	movw	r30, r22
    3152:	01 90       	ld	r0, Z+
    3154:	00 20       	and	r0, r0
    3156:	e9 f7       	brne	.-6      	; 0x3152 <_ZN5Print5writeEPKc+0x8>
    3158:	31 97       	sbiw	r30, 0x01	; 1
    315a:	af 01       	movw	r20, r30
    315c:	46 1b       	sub	r20, r22
    315e:	57 0b       	sbc	r21, r23
    3160:	dc 01       	movw	r26, r24
    3162:	ed 91       	ld	r30, X+
    3164:	fc 91       	ld	r31, X
    3166:	02 80       	ldd	r0, Z+2	; 0x02
    3168:	f3 81       	ldd	r31, Z+3	; 0x03
    316a:	e0 2d       	mov	r30, r0
    316c:	09 94       	ijmp
    316e:	80 e0       	ldi	r24, 0x00	; 0
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	08 95       	ret

00003174 <_ZN5Print5printEPK19__FlashStringHelper>:
    3174:	ef 92       	push	r14
    3176:	ff 92       	push	r15
    3178:	0f 93       	push	r16
    317a:	1f 93       	push	r17
    317c:	cf 93       	push	r28
    317e:	df 93       	push	r29
    3180:	8c 01       	movw	r16, r24
    3182:	7b 01       	movw	r14, r22
    3184:	c0 e0       	ldi	r28, 0x00	; 0
    3186:	d0 e0       	ldi	r29, 0x00	; 0
    3188:	f7 01       	movw	r30, r14
    318a:	ec 0f       	add	r30, r28
    318c:	fd 1f       	adc	r31, r29
    318e:	64 91       	lpm	r22, Z
    3190:	66 23       	and	r22, r22
    3192:	61 f0       	breq	.+24     	; 0x31ac <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    3194:	d8 01       	movw	r26, r16
    3196:	ed 91       	ld	r30, X+
    3198:	fc 91       	ld	r31, X
    319a:	01 90       	ld	r0, Z+
    319c:	f0 81       	ld	r31, Z
    319e:	e0 2d       	mov	r30, r0
    31a0:	c8 01       	movw	r24, r16
    31a2:	09 95       	icall
    31a4:	89 2b       	or	r24, r25
    31a6:	11 f0       	breq	.+4      	; 0x31ac <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    31a8:	21 96       	adiw	r28, 0x01	; 1
    31aa:	ee cf       	rjmp	.-36     	; 0x3188 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    31ac:	ce 01       	movw	r24, r28
    31ae:	df 91       	pop	r29
    31b0:	cf 91       	pop	r28
    31b2:	1f 91       	pop	r17
    31b4:	0f 91       	pop	r16
    31b6:	ff 90       	pop	r15
    31b8:	ef 90       	pop	r14
    31ba:	08 95       	ret

000031bc <_ZN5Print5printEc>:
    31bc:	dc 01       	movw	r26, r24
    31be:	ed 91       	ld	r30, X+
    31c0:	fc 91       	ld	r31, X
    31c2:	01 90       	ld	r0, Z+
    31c4:	f0 81       	ld	r31, Z
    31c6:	e0 2d       	mov	r30, r0
    31c8:	09 94       	ijmp

000031ca <_ZN5Print7printlnEv>:
    31ca:	61 e5       	ldi	r22, 0x51	; 81
    31cc:	71 e0       	ldi	r23, 0x01	; 1
    31ce:	0c 94 a5 18 	jmp	0x314a	; 0x314a <_ZN5Print5writeEPKc>

000031d2 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    31d2:	0f 93       	push	r16
    31d4:	1f 93       	push	r17
    31d6:	cf 93       	push	r28
    31d8:	df 93       	push	r29
    31da:	ec 01       	movw	r28, r24
    31dc:	0e 94 ba 18 	call	0x3174	; 0x3174 <_ZN5Print5printEPK19__FlashStringHelper>
    31e0:	8c 01       	movw	r16, r24
    31e2:	ce 01       	movw	r24, r28
    31e4:	0e 94 e5 18 	call	0x31ca	; 0x31ca <_ZN5Print7printlnEv>
    31e8:	80 0f       	add	r24, r16
    31ea:	91 1f       	adc	r25, r17
    31ec:	df 91       	pop	r29
    31ee:	cf 91       	pop	r28
    31f0:	1f 91       	pop	r17
    31f2:	0f 91       	pop	r16
    31f4:	08 95       	ret

000031f6 <_ZN5Print7printlnEPKc>:
    31f6:	0f 93       	push	r16
    31f8:	1f 93       	push	r17
    31fa:	cf 93       	push	r28
    31fc:	df 93       	push	r29
    31fe:	ec 01       	movw	r28, r24
    3200:	0e 94 a5 18 	call	0x314a	; 0x314a <_ZN5Print5writeEPKc>
    3204:	8c 01       	movw	r16, r24
    3206:	ce 01       	movw	r24, r28
    3208:	0e 94 e5 18 	call	0x31ca	; 0x31ca <_ZN5Print7printlnEv>
    320c:	80 0f       	add	r24, r16
    320e:	91 1f       	adc	r25, r17
    3210:	df 91       	pop	r29
    3212:	cf 91       	pop	r28
    3214:	1f 91       	pop	r17
    3216:	0f 91       	pop	r16
    3218:	08 95       	ret

0000321a <_ZN5Print11printNumberEmh>:
    321a:	8f 92       	push	r8
    321c:	9f 92       	push	r9
    321e:	af 92       	push	r10
    3220:	bf 92       	push	r11
    3222:	ef 92       	push	r14
    3224:	ff 92       	push	r15
    3226:	0f 93       	push	r16
    3228:	1f 93       	push	r17
    322a:	cf 93       	push	r28
    322c:	df 93       	push	r29
    322e:	cd b7       	in	r28, 0x3d	; 61
    3230:	de b7       	in	r29, 0x3e	; 62
    3232:	a1 97       	sbiw	r28, 0x21	; 33
    3234:	0f b6       	in	r0, 0x3f	; 63
    3236:	f8 94       	cli
    3238:	de bf       	out	0x3e, r29	; 62
    323a:	0f be       	out	0x3f, r0	; 63
    323c:	cd bf       	out	0x3d, r28	; 61
    323e:	7c 01       	movw	r14, r24
    3240:	fa 01       	movw	r30, r20
    3242:	cb 01       	movw	r24, r22
    3244:	19 a2       	std	Y+33, r1	; 0x21
    3246:	22 30       	cpi	r18, 0x02	; 2
    3248:	08 f4       	brcc	.+2      	; 0x324c <_ZN5Print11printNumberEmh+0x32>
    324a:	2a e0       	ldi	r18, 0x0A	; 10
    324c:	8e 01       	movw	r16, r28
    324e:	0f 5d       	subi	r16, 0xDF	; 223
    3250:	1f 4f       	sbci	r17, 0xFF	; 255
    3252:	82 2e       	mov	r8, r18
    3254:	91 2c       	mov	r9, r1
    3256:	a1 2c       	mov	r10, r1
    3258:	b1 2c       	mov	r11, r1
    325a:	bf 01       	movw	r22, r30
    325c:	a5 01       	movw	r20, r10
    325e:	94 01       	movw	r18, r8
    3260:	0e 94 a7 23 	call	0x474e	; 0x474e <__udivmodsi4>
    3264:	f9 01       	movw	r30, r18
    3266:	ca 01       	movw	r24, r20
    3268:	01 50       	subi	r16, 0x01	; 1
    326a:	11 09       	sbc	r17, r1
    326c:	6a 30       	cpi	r22, 0x0A	; 10
    326e:	10 f4       	brcc	.+4      	; 0x3274 <_ZN5Print11printNumberEmh+0x5a>
    3270:	60 5d       	subi	r22, 0xD0	; 208
    3272:	01 c0       	rjmp	.+2      	; 0x3276 <_ZN5Print11printNumberEmh+0x5c>
    3274:	69 5c       	subi	r22, 0xC9	; 201
    3276:	d8 01       	movw	r26, r16
    3278:	6c 93       	st	X, r22
    327a:	23 2b       	or	r18, r19
    327c:	24 2b       	or	r18, r20
    327e:	25 2b       	or	r18, r21
    3280:	61 f7       	brne	.-40     	; 0x325a <_ZN5Print11printNumberEmh+0x40>
    3282:	b8 01       	movw	r22, r16
    3284:	c7 01       	movw	r24, r14
    3286:	0e 94 a5 18 	call	0x314a	; 0x314a <_ZN5Print5writeEPKc>
    328a:	a1 96       	adiw	r28, 0x21	; 33
    328c:	0f b6       	in	r0, 0x3f	; 63
    328e:	f8 94       	cli
    3290:	de bf       	out	0x3e, r29	; 62
    3292:	0f be       	out	0x3f, r0	; 63
    3294:	cd bf       	out	0x3d, r28	; 61
    3296:	df 91       	pop	r29
    3298:	cf 91       	pop	r28
    329a:	1f 91       	pop	r17
    329c:	0f 91       	pop	r16
    329e:	ff 90       	pop	r15
    32a0:	ef 90       	pop	r14
    32a2:	bf 90       	pop	r11
    32a4:	af 90       	pop	r10
    32a6:	9f 90       	pop	r9
    32a8:	8f 90       	pop	r8
    32aa:	08 95       	ret

000032ac <_ZN5Print5printEmi>:
    32ac:	21 15       	cp	r18, r1
    32ae:	31 05       	cpc	r19, r1
    32b0:	41 f4       	brne	.+16     	; 0x32c2 <_ZN5Print5printEmi+0x16>
    32b2:	dc 01       	movw	r26, r24
    32b4:	ed 91       	ld	r30, X+
    32b6:	fc 91       	ld	r31, X
    32b8:	01 90       	ld	r0, Z+
    32ba:	f0 81       	ld	r31, Z
    32bc:	e0 2d       	mov	r30, r0
    32be:	64 2f       	mov	r22, r20
    32c0:	09 94       	ijmp
    32c2:	0c 94 0d 19 	jmp	0x321a	; 0x321a <_ZN5Print11printNumberEmh>

000032c6 <_ZN5Print5printEhi>:
    32c6:	9a 01       	movw	r18, r20
    32c8:	46 2f       	mov	r20, r22
    32ca:	50 e0       	ldi	r21, 0x00	; 0
    32cc:	60 e0       	ldi	r22, 0x00	; 0
    32ce:	70 e0       	ldi	r23, 0x00	; 0
    32d0:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <_ZN5Print5printEmi>

000032d4 <_ZN5Print7printlnEhi>:
    32d4:	0f 93       	push	r16
    32d6:	1f 93       	push	r17
    32d8:	cf 93       	push	r28
    32da:	df 93       	push	r29
    32dc:	ec 01       	movw	r28, r24
    32de:	0e 94 63 19 	call	0x32c6	; 0x32c6 <_ZN5Print5printEhi>
    32e2:	8c 01       	movw	r16, r24
    32e4:	ce 01       	movw	r24, r28
    32e6:	0e 94 e5 18 	call	0x31ca	; 0x31ca <_ZN5Print7printlnEv>
    32ea:	80 0f       	add	r24, r16
    32ec:	91 1f       	adc	r25, r17
    32ee:	df 91       	pop	r29
    32f0:	cf 91       	pop	r28
    32f2:	1f 91       	pop	r17
    32f4:	0f 91       	pop	r16
    32f6:	08 95       	ret

000032f8 <_ZN5Print5printEji>:
    32f8:	9a 01       	movw	r18, r20
    32fa:	ab 01       	movw	r20, r22
    32fc:	60 e0       	ldi	r22, 0x00	; 0
    32fe:	70 e0       	ldi	r23, 0x00	; 0
    3300:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <_ZN5Print5printEmi>

00003304 <_ZN5Print5printEli>:
    3304:	cf 92       	push	r12
    3306:	df 92       	push	r13
    3308:	ef 92       	push	r14
    330a:	ff 92       	push	r15
    330c:	0f 93       	push	r16
    330e:	1f 93       	push	r17
    3310:	cf 93       	push	r28
    3312:	df 93       	push	r29
    3314:	21 15       	cp	r18, r1
    3316:	31 05       	cpc	r19, r1
    3318:	81 f4       	brne	.+32     	; 0x333a <_ZN5Print5printEli+0x36>
    331a:	dc 01       	movw	r26, r24
    331c:	ed 91       	ld	r30, X+
    331e:	fc 91       	ld	r31, X
    3320:	01 90       	ld	r0, Z+
    3322:	f0 81       	ld	r31, Z
    3324:	e0 2d       	mov	r30, r0
    3326:	64 2f       	mov	r22, r20
    3328:	df 91       	pop	r29
    332a:	cf 91       	pop	r28
    332c:	1f 91       	pop	r17
    332e:	0f 91       	pop	r16
    3330:	ff 90       	pop	r15
    3332:	ef 90       	pop	r14
    3334:	df 90       	pop	r13
    3336:	cf 90       	pop	r12
    3338:	09 94       	ijmp
    333a:	2a 30       	cpi	r18, 0x0A	; 10
    333c:	31 05       	cpc	r19, r1
    333e:	01 f5       	brne	.+64     	; 0x3380 <_ZN5Print5printEli+0x7c>
    3340:	77 ff       	sbrs	r23, 7
    3342:	1d c0       	rjmp	.+58     	; 0x337e <_ZN5Print5printEli+0x7a>
    3344:	6a 01       	movw	r12, r20
    3346:	7b 01       	movw	r14, r22
    3348:	ec 01       	movw	r28, r24
    334a:	6d e2       	ldi	r22, 0x2D	; 45
    334c:	0e 94 de 18 	call	0x31bc	; 0x31bc <_ZN5Print5printEc>
    3350:	8c 01       	movw	r16, r24
    3352:	44 27       	eor	r20, r20
    3354:	55 27       	eor	r21, r21
    3356:	ba 01       	movw	r22, r20
    3358:	4c 19       	sub	r20, r12
    335a:	5d 09       	sbc	r21, r13
    335c:	6e 09       	sbc	r22, r14
    335e:	7f 09       	sbc	r23, r15
    3360:	2a e0       	ldi	r18, 0x0A	; 10
    3362:	ce 01       	movw	r24, r28
    3364:	0e 94 0d 19 	call	0x321a	; 0x321a <_ZN5Print11printNumberEmh>
    3368:	80 0f       	add	r24, r16
    336a:	91 1f       	adc	r25, r17
    336c:	df 91       	pop	r29
    336e:	cf 91       	pop	r28
    3370:	1f 91       	pop	r17
    3372:	0f 91       	pop	r16
    3374:	ff 90       	pop	r15
    3376:	ef 90       	pop	r14
    3378:	df 90       	pop	r13
    337a:	cf 90       	pop	r12
    337c:	08 95       	ret
    337e:	2a e0       	ldi	r18, 0x0A	; 10
    3380:	df 91       	pop	r29
    3382:	cf 91       	pop	r28
    3384:	1f 91       	pop	r17
    3386:	0f 91       	pop	r16
    3388:	ff 90       	pop	r15
    338a:	ef 90       	pop	r14
    338c:	df 90       	pop	r13
    338e:	cf 90       	pop	r12
    3390:	0c 94 0d 19 	jmp	0x321a	; 0x321a <_ZN5Print11printNumberEmh>

00003394 <_ZN5Print5printEii>:
    3394:	9a 01       	movw	r18, r20
    3396:	ab 01       	movw	r20, r22
    3398:	77 0f       	add	r23, r23
    339a:	66 0b       	sbc	r22, r22
    339c:	77 0b       	sbc	r23, r23
    339e:	0c 94 82 19 	jmp	0x3304	; 0x3304 <_ZN5Print5printEli>

000033a2 <_ZN5Print10printFloatEdh>:
    33a2:	7f 92       	push	r7
    33a4:	8f 92       	push	r8
    33a6:	9f 92       	push	r9
    33a8:	af 92       	push	r10
    33aa:	bf 92       	push	r11
    33ac:	cf 92       	push	r12
    33ae:	df 92       	push	r13
    33b0:	ef 92       	push	r14
    33b2:	ff 92       	push	r15
    33b4:	0f 93       	push	r16
    33b6:	1f 93       	push	r17
    33b8:	cf 93       	push	r28
    33ba:	df 93       	push	r29
    33bc:	8c 01       	movw	r16, r24
    33be:	6a 01       	movw	r12, r20
    33c0:	7b 01       	movw	r14, r22
    33c2:	72 2e       	mov	r7, r18
    33c4:	9a 01       	movw	r18, r20
    33c6:	ab 01       	movw	r20, r22
    33c8:	c7 01       	movw	r24, r14
    33ca:	b6 01       	movw	r22, r12
    33cc:	0e 94 a2 23 	call	0x4744	; 0x4744 <__unordsf2>
    33d0:	88 23       	and	r24, r24
    33d2:	19 f0       	breq	.+6      	; 0x33da <_ZN5Print10printFloatEdh+0x38>
    33d4:	64 e5       	ldi	r22, 0x54	; 84
    33d6:	71 e0       	ldi	r23, 0x01	; 1
    33d8:	27 c0       	rjmp	.+78     	; 0x3428 <_ZN5Print10printFloatEdh+0x86>
    33da:	46 01       	movw	r8, r12
    33dc:	57 01       	movw	r10, r14
    33de:	e8 94       	clt
    33e0:	b7 f8       	bld	r11, 7
    33e2:	2f ef       	ldi	r18, 0xFF	; 255
    33e4:	3f ef       	ldi	r19, 0xFF	; 255
    33e6:	4f e7       	ldi	r20, 0x7F	; 127
    33e8:	5f e7       	ldi	r21, 0x7F	; 127
    33ea:	c5 01       	movw	r24, r10
    33ec:	b4 01       	movw	r22, r8
    33ee:	0e 94 a2 23 	call	0x4744	; 0x4744 <__unordsf2>
    33f2:	81 11       	cpse	r24, r1
    33f4:	0d c0       	rjmp	.+26     	; 0x3410 <_ZN5Print10printFloatEdh+0x6e>
    33f6:	2f ef       	ldi	r18, 0xFF	; 255
    33f8:	3f ef       	ldi	r19, 0xFF	; 255
    33fa:	4f e7       	ldi	r20, 0x7F	; 127
    33fc:	5f e7       	ldi	r21, 0x7F	; 127
    33fe:	c5 01       	movw	r24, r10
    3400:	b4 01       	movw	r22, r8
    3402:	0e 94 35 14 	call	0x286a	; 0x286a <__cmpsf2>
    3406:	18 16       	cp	r1, r24
    3408:	1c f4       	brge	.+6      	; 0x3410 <_ZN5Print10printFloatEdh+0x6e>
    340a:	68 e5       	ldi	r22, 0x58	; 88
    340c:	71 e0       	ldi	r23, 0x01	; 1
    340e:	0c c0       	rjmp	.+24     	; 0x3428 <_ZN5Print10printFloatEdh+0x86>
    3410:	2f ef       	ldi	r18, 0xFF	; 255
    3412:	3f ef       	ldi	r19, 0xFF	; 255
    3414:	4f e7       	ldi	r20, 0x7F	; 127
    3416:	5f e4       	ldi	r21, 0x4F	; 79
    3418:	c7 01       	movw	r24, r14
    341a:	b6 01       	movw	r22, r12
    341c:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <__gesf2>
    3420:	18 16       	cp	r1, r24
    3422:	94 f4       	brge	.+36     	; 0x3448 <_ZN5Print10printFloatEdh+0xa6>
    3424:	6c e5       	ldi	r22, 0x5C	; 92
    3426:	71 e0       	ldi	r23, 0x01	; 1
    3428:	c8 01       	movw	r24, r16
    342a:	df 91       	pop	r29
    342c:	cf 91       	pop	r28
    342e:	1f 91       	pop	r17
    3430:	0f 91       	pop	r16
    3432:	ff 90       	pop	r15
    3434:	ef 90       	pop	r14
    3436:	df 90       	pop	r13
    3438:	cf 90       	pop	r12
    343a:	bf 90       	pop	r11
    343c:	af 90       	pop	r10
    343e:	9f 90       	pop	r9
    3440:	8f 90       	pop	r8
    3442:	7f 90       	pop	r7
    3444:	0c 94 a5 18 	jmp	0x314a	; 0x314a <_ZN5Print5writeEPKc>
    3448:	2f ef       	ldi	r18, 0xFF	; 255
    344a:	3f ef       	ldi	r19, 0xFF	; 255
    344c:	4f e7       	ldi	r20, 0x7F	; 127
    344e:	5f ec       	ldi	r21, 0xCF	; 207
    3450:	c7 01       	movw	r24, r14
    3452:	b6 01       	movw	r22, r12
    3454:	0e 94 35 14 	call	0x286a	; 0x286a <__cmpsf2>
    3458:	87 fd       	sbrc	r24, 7
    345a:	e4 cf       	rjmp	.-56     	; 0x3424 <_ZN5Print10printFloatEdh+0x82>
    345c:	20 e0       	ldi	r18, 0x00	; 0
    345e:	30 e0       	ldi	r19, 0x00	; 0
    3460:	a9 01       	movw	r20, r18
    3462:	c7 01       	movw	r24, r14
    3464:	b6 01       	movw	r22, r12
    3466:	0e 94 35 14 	call	0x286a	; 0x286a <__cmpsf2>
    346a:	87 ff       	sbrs	r24, 7
    346c:	0a c0       	rjmp	.+20     	; 0x3482 <_ZN5Print10printFloatEdh+0xe0>
    346e:	6d e2       	ldi	r22, 0x2D	; 45
    3470:	c8 01       	movw	r24, r16
    3472:	0e 94 de 18 	call	0x31bc	; 0x31bc <_ZN5Print5printEc>
    3476:	ec 01       	movw	r28, r24
    3478:	f7 fa       	bst	r15, 7
    347a:	f0 94       	com	r15
    347c:	f7 f8       	bld	r15, 7
    347e:	f0 94       	com	r15
    3480:	02 c0       	rjmp	.+4      	; 0x3486 <_ZN5Print10printFloatEdh+0xe4>
    3482:	c0 e0       	ldi	r28, 0x00	; 0
    3484:	d0 e0       	ldi	r29, 0x00	; 0
    3486:	b1 2c       	mov	r11, r1
    3488:	60 e0       	ldi	r22, 0x00	; 0
    348a:	70 e0       	ldi	r23, 0x00	; 0
    348c:	80 e0       	ldi	r24, 0x00	; 0
    348e:	9f e3       	ldi	r25, 0x3F	; 63
    3490:	7b 14       	cp	r7, r11
    3492:	41 f0       	breq	.+16     	; 0x34a4 <_ZN5Print10printFloatEdh+0x102>
    3494:	20 e0       	ldi	r18, 0x00	; 0
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	40 e2       	ldi	r20, 0x20	; 32
    349a:	51 e4       	ldi	r21, 0x41	; 65
    349c:	0e 94 3a 14 	call	0x2874	; 0x2874 <__divsf3>
    34a0:	b3 94       	inc	r11
    34a2:	f6 cf       	rjmp	.-20     	; 0x3490 <_ZN5Print10printFloatEdh+0xee>
    34a4:	a7 01       	movw	r20, r14
    34a6:	96 01       	movw	r18, r12
    34a8:	0e 94 57 13 	call	0x26ae	; 0x26ae <__addsf3>
    34ac:	6b 01       	movw	r12, r22
    34ae:	7c 01       	movw	r14, r24
    34b0:	0e 94 b3 14 	call	0x2966	; 0x2966 <__fixunssfsi>
    34b4:	4b 01       	movw	r8, r22
    34b6:	5c 01       	movw	r10, r24
    34b8:	2a e0       	ldi	r18, 0x0A	; 10
    34ba:	ab 01       	movw	r20, r22
    34bc:	bc 01       	movw	r22, r24
    34be:	c8 01       	movw	r24, r16
    34c0:	0e 94 0d 19 	call	0x321a	; 0x321a <_ZN5Print11printNumberEmh>
    34c4:	c8 0f       	add	r28, r24
    34c6:	d9 1f       	adc	r29, r25
    34c8:	77 20       	and	r7, r7
    34ca:	b9 f1       	breq	.+110    	; 0x353a <_ZN5Print10printFloatEdh+0x198>
    34cc:	c5 01       	movw	r24, r10
    34ce:	b4 01       	movw	r22, r8
    34d0:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__floatunsisf>
    34d4:	9b 01       	movw	r18, r22
    34d6:	ac 01       	movw	r20, r24
    34d8:	c7 01       	movw	r24, r14
    34da:	b6 01       	movw	r22, r12
    34dc:	0e 94 56 13 	call	0x26ac	; 0x26ac <__subsf3>
    34e0:	6b 01       	movw	r12, r22
    34e2:	7c 01       	movw	r14, r24
    34e4:	6e e2       	ldi	r22, 0x2E	; 46
    34e6:	c8 01       	movw	r24, r16
    34e8:	0e 94 de 18 	call	0x31bc	; 0x31bc <_ZN5Print5printEc>
    34ec:	c8 0f       	add	r28, r24
    34ee:	d9 1f       	adc	r29, r25
    34f0:	20 e0       	ldi	r18, 0x00	; 0
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	40 e2       	ldi	r20, 0x20	; 32
    34f6:	51 e4       	ldi	r21, 0x41	; 65
    34f8:	c7 01       	movw	r24, r14
    34fa:	b6 01       	movw	r22, r12
    34fc:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__mulsf3>
    3500:	4b 01       	movw	r8, r22
    3502:	5c 01       	movw	r10, r24
    3504:	0e 94 b3 14 	call	0x2966	; 0x2966 <__fixunssfsi>
    3508:	6b 01       	movw	r12, r22
    350a:	7c 01       	movw	r14, r24
    350c:	4a e0       	ldi	r20, 0x0A	; 10
    350e:	50 e0       	ldi	r21, 0x00	; 0
    3510:	c8 01       	movw	r24, r16
    3512:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN5Print5printEji>
    3516:	c8 0f       	add	r28, r24
    3518:	d9 1f       	adc	r29, r25
    351a:	b6 01       	movw	r22, r12
    351c:	80 e0       	ldi	r24, 0x00	; 0
    351e:	90 e0       	ldi	r25, 0x00	; 0
    3520:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__floatunsisf>
    3524:	9b 01       	movw	r18, r22
    3526:	ac 01       	movw	r20, r24
    3528:	c5 01       	movw	r24, r10
    352a:	b4 01       	movw	r22, r8
    352c:	0e 94 56 13 	call	0x26ac	; 0x26ac <__subsf3>
    3530:	6b 01       	movw	r12, r22
    3532:	7c 01       	movw	r14, r24
    3534:	7a 94       	dec	r7
    3536:	71 10       	cpse	r7, r1
    3538:	db cf       	rjmp	.-74     	; 0x34f0 <_ZN5Print10printFloatEdh+0x14e>
    353a:	ce 01       	movw	r24, r28
    353c:	df 91       	pop	r29
    353e:	cf 91       	pop	r28
    3540:	1f 91       	pop	r17
    3542:	0f 91       	pop	r16
    3544:	ff 90       	pop	r15
    3546:	ef 90       	pop	r14
    3548:	df 90       	pop	r13
    354a:	cf 90       	pop	r12
    354c:	bf 90       	pop	r11
    354e:	af 90       	pop	r10
    3550:	9f 90       	pop	r9
    3552:	8f 90       	pop	r8
    3554:	7f 90       	pop	r7
    3556:	08 95       	ret

00003558 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    3558:	0f 93       	push	r16
    355a:	1f 93       	push	r17
    355c:	cf 93       	push	r28
    355e:	df 93       	push	r29
    3560:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    3562:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <_ZN5Print10printFloatEdh>
    3566:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    3568:	ce 01       	movw	r24, r28
    356a:	0e 94 e5 18 	call	0x31ca	; 0x31ca <_ZN5Print7printlnEv>
  return n;
}
    356e:	80 0f       	add	r24, r16
    3570:	91 1f       	adc	r25, r17
    3572:	df 91       	pop	r29
    3574:	cf 91       	pop	r28
    3576:	1f 91       	pop	r17
    3578:	0f 91       	pop	r16
    357a:	08 95       	ret

0000357c <_ZN6Stream9timedReadEv>:
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
    357c:	0f 93       	push	r16
    357e:	1f 93       	push	r17
    3580:	cf 93       	push	r28
    3582:	df 93       	push	r29
    3584:	ec 01       	movw	r28, r24
    3586:	0e 94 cd 1b 	call	0x379a	; 0x379a <millis>
    358a:	68 87       	std	Y+8, r22	; 0x08
    358c:	79 87       	std	Y+9, r23	; 0x09
    358e:	8a 87       	std	Y+10, r24	; 0x0a
    3590:	9b 87       	std	Y+11, r25	; 0x0b
    3592:	e8 81       	ld	r30, Y
    3594:	f9 81       	ldd	r31, Y+1	; 0x01
    3596:	02 84       	ldd	r0, Z+10	; 0x0a
    3598:	f3 85       	ldd	r31, Z+11	; 0x0b
    359a:	e0 2d       	mov	r30, r0
    359c:	ce 01       	movw	r24, r28
    359e:	09 95       	icall
    35a0:	97 ff       	sbrs	r25, 7
    35a2:	17 c0       	rjmp	.+46     	; 0x35d2 <_ZN6Stream9timedReadEv+0x56>
    35a4:	0e 94 cd 1b 	call	0x379a	; 0x379a <millis>
    35a8:	08 85       	ldd	r16, Y+8	; 0x08
    35aa:	19 85       	ldd	r17, Y+9	; 0x09
    35ac:	2a 85       	ldd	r18, Y+10	; 0x0a
    35ae:	3b 85       	ldd	r19, Y+11	; 0x0b
    35b0:	dc 01       	movw	r26, r24
    35b2:	cb 01       	movw	r24, r22
    35b4:	80 1b       	sub	r24, r16
    35b6:	91 0b       	sbc	r25, r17
    35b8:	a2 0b       	sbc	r26, r18
    35ba:	b3 0b       	sbc	r27, r19
    35bc:	0c 81       	ldd	r16, Y+4	; 0x04
    35be:	1d 81       	ldd	r17, Y+5	; 0x05
    35c0:	2e 81       	ldd	r18, Y+6	; 0x06
    35c2:	3f 81       	ldd	r19, Y+7	; 0x07
    35c4:	80 17       	cp	r24, r16
    35c6:	91 07       	cpc	r25, r17
    35c8:	a2 07       	cpc	r26, r18
    35ca:	b3 07       	cpc	r27, r19
    35cc:	10 f3       	brcs	.-60     	; 0x3592 <_ZN6Stream9timedReadEv+0x16>
    35ce:	8f ef       	ldi	r24, 0xFF	; 255
    35d0:	9f ef       	ldi	r25, 0xFF	; 255
    35d2:	df 91       	pop	r29
    35d4:	cf 91       	pop	r28
    35d6:	1f 91       	pop	r17
    35d8:	0f 91       	pop	r16
    35da:	08 95       	ret

000035dc <_ZN6Stream15readStringUntilEc>:

String Stream::readStringUntil(char terminator)
{
    35dc:	ef 92       	push	r14
    35de:	ff 92       	push	r15
    35e0:	0f 93       	push	r16
    35e2:	1f 93       	push	r17
    35e4:	cf 93       	push	r28
    35e6:	df 93       	push	r29
    35e8:	ec 01       	movw	r28, r24
    35ea:	7b 01       	movw	r14, r22
    35ec:	04 2f       	mov	r16, r20
  String ret;
    35ee:	63 e5       	ldi	r22, 0x53	; 83
    35f0:	71 e0       	ldi	r23, 0x01	; 1
    35f2:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <_ZN6StringC1EPKc>
  int c = timedRead();
    35f6:	c7 01       	movw	r24, r14
    35f8:	0e 94 be 1a 	call	0x357c	; 0x357c <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
    35fc:	10 e0       	ldi	r17, 0x00	; 0
    35fe:	97 fd       	sbrc	r25, 7
    3600:	0b c0       	rjmp	.+22     	; 0x3618 <_ZN6Stream15readStringUntilEc+0x3c>
    3602:	80 17       	cp	r24, r16
    3604:	91 07       	cpc	r25, r17
    3606:	41 f0       	breq	.+16     	; 0x3618 <_ZN6Stream15readStringUntilEc+0x3c>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    3608:	68 2f       	mov	r22, r24
    360a:	ce 01       	movw	r24, r28
    360c:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
    3610:	c7 01       	movw	r24, r14
    3612:	0e 94 be 1a 	call	0x357c	; 0x357c <_ZN6Stream9timedReadEv>

String Stream::readStringUntil(char terminator)
{
  String ret;
  int c = timedRead();
  while (c >= 0 && c != terminator)
    3616:	f3 cf       	rjmp	.-26     	; 0x35fe <_ZN6Stream15readStringUntilEc+0x22>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
    3618:	ce 01       	movw	r24, r28
    361a:	df 91       	pop	r29
    361c:	cf 91       	pop	r28
    361e:	1f 91       	pop	r17
    3620:	0f 91       	pop	r16
    3622:	ff 90       	pop	r15
    3624:	ef 90       	pop	r14
    3626:	08 95       	ret

00003628 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    3628:	08 95       	ret

0000362a <attachInterrupt>:
    362a:	82 30       	cpi	r24, 0x02	; 2
    362c:	e8 f4       	brcc	.+58     	; 0x3668 <attachInterrupt+0x3e>
    362e:	e8 2f       	mov	r30, r24
    3630:	f0 e0       	ldi	r31, 0x00	; 0
    3632:	ee 0f       	add	r30, r30
    3634:	ff 1f       	adc	r31, r31
    3636:	e8 5f       	subi	r30, 0xF8	; 248
    3638:	fe 4f       	sbci	r31, 0xFE	; 254
    363a:	71 83       	std	Z+1, r23	; 0x01
    363c:	60 83       	st	Z, r22
    363e:	81 30       	cpi	r24, 0x01	; 1
    3640:	41 f0       	breq	.+16     	; 0x3652 <attachInterrupt+0x28>
    3642:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    3646:	8c 7f       	andi	r24, 0xFC	; 252
    3648:	48 2b       	or	r20, r24
    364a:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    364e:	e8 9a       	sbi	0x1d, 0	; 29
    3650:	08 95       	ret
    3652:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    3656:	83 7f       	andi	r24, 0xF3	; 243
    3658:	44 0f       	add	r20, r20
    365a:	55 1f       	adc	r21, r21
    365c:	44 0f       	add	r20, r20
    365e:	55 1f       	adc	r21, r21
    3660:	48 2b       	or	r20, r24
    3662:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    3666:	e9 9a       	sbi	0x1d, 1	; 29
    3668:	08 95       	ret

0000366a <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    366a:	1f 92       	push	r1
    366c:	0f 92       	push	r0
    366e:	0f b6       	in	r0, 0x3f	; 63
    3670:	0f 92       	push	r0
    3672:	11 24       	eor	r1, r1
    3674:	2f 93       	push	r18
    3676:	3f 93       	push	r19
    3678:	4f 93       	push	r20
    367a:	5f 93       	push	r21
    367c:	6f 93       	push	r22
    367e:	7f 93       	push	r23
    3680:	8f 93       	push	r24
    3682:	9f 93       	push	r25
    3684:	af 93       	push	r26
    3686:	bf 93       	push	r27
    3688:	ef 93       	push	r30
    368a:	ff 93       	push	r31
    368c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <intFunc>
    3690:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <intFunc+0x1>
    3694:	09 95       	icall
    3696:	ff 91       	pop	r31
    3698:	ef 91       	pop	r30
    369a:	bf 91       	pop	r27
    369c:	af 91       	pop	r26
    369e:	9f 91       	pop	r25
    36a0:	8f 91       	pop	r24
    36a2:	7f 91       	pop	r23
    36a4:	6f 91       	pop	r22
    36a6:	5f 91       	pop	r21
    36a8:	4f 91       	pop	r20
    36aa:	3f 91       	pop	r19
    36ac:	2f 91       	pop	r18
    36ae:	0f 90       	pop	r0
    36b0:	0f be       	out	0x3f, r0	; 63
    36b2:	0f 90       	pop	r0
    36b4:	1f 90       	pop	r1
    36b6:	18 95       	reti

000036b8 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    36b8:	1f 92       	push	r1
    36ba:	0f 92       	push	r0
    36bc:	0f b6       	in	r0, 0x3f	; 63
    36be:	0f 92       	push	r0
    36c0:	11 24       	eor	r1, r1
    36c2:	2f 93       	push	r18
    36c4:	3f 93       	push	r19
    36c6:	4f 93       	push	r20
    36c8:	5f 93       	push	r21
    36ca:	6f 93       	push	r22
    36cc:	7f 93       	push	r23
    36ce:	8f 93       	push	r24
    36d0:	9f 93       	push	r25
    36d2:	af 93       	push	r26
    36d4:	bf 93       	push	r27
    36d6:	ef 93       	push	r30
    36d8:	ff 93       	push	r31
    36da:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <intFunc+0x2>
    36de:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <intFunc+0x3>
    36e2:	09 95       	icall
    36e4:	ff 91       	pop	r31
    36e6:	ef 91       	pop	r30
    36e8:	bf 91       	pop	r27
    36ea:	af 91       	pop	r26
    36ec:	9f 91       	pop	r25
    36ee:	8f 91       	pop	r24
    36f0:	7f 91       	pop	r23
    36f2:	6f 91       	pop	r22
    36f4:	5f 91       	pop	r21
    36f6:	4f 91       	pop	r20
    36f8:	3f 91       	pop	r19
    36fa:	2f 91       	pop	r18
    36fc:	0f 90       	pop	r0
    36fe:	0f be       	out	0x3f, r0	; 63
    3700:	0f 90       	pop	r0
    3702:	1f 90       	pop	r1
    3704:	18 95       	reti

00003706 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    3706:	1f 92       	push	r1
    3708:	0f 92       	push	r0
    370a:	0f b6       	in	r0, 0x3f	; 63
    370c:	0f 92       	push	r0
    370e:	11 24       	eor	r1, r1
    3710:	2f 93       	push	r18
    3712:	3f 93       	push	r19
    3714:	8f 93       	push	r24
    3716:	9f 93       	push	r25
    3718:	af 93       	push	r26
    371a:	bf 93       	push	r27
    371c:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <timer0_millis>
    3720:	90 91 be 02 	lds	r25, 0x02BE	; 0x8002be <timer0_millis+0x1>
    3724:	a0 91 bf 02 	lds	r26, 0x02BF	; 0x8002bf <timer0_millis+0x2>
    3728:	b0 91 c0 02 	lds	r27, 0x02C0	; 0x8002c0 <timer0_millis+0x3>
    372c:	30 91 bc 02 	lds	r19, 0x02BC	; 0x8002bc <timer0_fract>
    3730:	23 e0       	ldi	r18, 0x03	; 3
    3732:	23 0f       	add	r18, r19
    3734:	2d 37       	cpi	r18, 0x7D	; 125
    3736:	20 f4       	brcc	.+8      	; 0x3740 <__vector_16+0x3a>
    3738:	01 96       	adiw	r24, 0x01	; 1
    373a:	a1 1d       	adc	r26, r1
    373c:	b1 1d       	adc	r27, r1
    373e:	05 c0       	rjmp	.+10     	; 0x374a <__vector_16+0x44>
    3740:	26 e8       	ldi	r18, 0x86	; 134
    3742:	23 0f       	add	r18, r19
    3744:	02 96       	adiw	r24, 0x02	; 2
    3746:	a1 1d       	adc	r26, r1
    3748:	b1 1d       	adc	r27, r1
    374a:	20 93 bc 02 	sts	0x02BC, r18	; 0x8002bc <timer0_fract>
    374e:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <timer0_millis>
    3752:	90 93 be 02 	sts	0x02BE, r25	; 0x8002be <timer0_millis+0x1>
    3756:	a0 93 bf 02 	sts	0x02BF, r26	; 0x8002bf <timer0_millis+0x2>
    375a:	b0 93 c0 02 	sts	0x02C0, r27	; 0x8002c0 <timer0_millis+0x3>
    375e:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <timer0_overflow_count>
    3762:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <timer0_overflow_count+0x1>
    3766:	a0 91 c3 02 	lds	r26, 0x02C3	; 0x8002c3 <timer0_overflow_count+0x2>
    376a:	b0 91 c4 02 	lds	r27, 0x02C4	; 0x8002c4 <timer0_overflow_count+0x3>
    376e:	01 96       	adiw	r24, 0x01	; 1
    3770:	a1 1d       	adc	r26, r1
    3772:	b1 1d       	adc	r27, r1
    3774:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <timer0_overflow_count>
    3778:	90 93 c2 02 	sts	0x02C2, r25	; 0x8002c2 <timer0_overflow_count+0x1>
    377c:	a0 93 c3 02 	sts	0x02C3, r26	; 0x8002c3 <timer0_overflow_count+0x2>
    3780:	b0 93 c4 02 	sts	0x02C4, r27	; 0x8002c4 <timer0_overflow_count+0x3>
    3784:	bf 91       	pop	r27
    3786:	af 91       	pop	r26
    3788:	9f 91       	pop	r25
    378a:	8f 91       	pop	r24
    378c:	3f 91       	pop	r19
    378e:	2f 91       	pop	r18
    3790:	0f 90       	pop	r0
    3792:	0f be       	out	0x3f, r0	; 63
    3794:	0f 90       	pop	r0
    3796:	1f 90       	pop	r1
    3798:	18 95       	reti

0000379a <millis>:
    379a:	2f b7       	in	r18, 0x3f	; 63
    379c:	f8 94       	cli
    379e:	60 91 bd 02 	lds	r22, 0x02BD	; 0x8002bd <timer0_millis>
    37a2:	70 91 be 02 	lds	r23, 0x02BE	; 0x8002be <timer0_millis+0x1>
    37a6:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <timer0_millis+0x2>
    37aa:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <timer0_millis+0x3>
    37ae:	2f bf       	out	0x3f, r18	; 63
    37b0:	08 95       	ret

000037b2 <micros>:
    37b2:	3f b7       	in	r19, 0x3f	; 63
    37b4:	f8 94       	cli
    37b6:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <timer0_overflow_count>
    37ba:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <timer0_overflow_count+0x1>
    37be:	a0 91 c3 02 	lds	r26, 0x02C3	; 0x8002c3 <timer0_overflow_count+0x2>
    37c2:	b0 91 c4 02 	lds	r27, 0x02C4	; 0x8002c4 <timer0_overflow_count+0x3>
    37c6:	26 b5       	in	r18, 0x26	; 38
    37c8:	a8 9b       	sbis	0x15, 0	; 21
    37ca:	05 c0       	rjmp	.+10     	; 0x37d6 <micros+0x24>
    37cc:	2f 3f       	cpi	r18, 0xFF	; 255
    37ce:	19 f0       	breq	.+6      	; 0x37d6 <micros+0x24>
    37d0:	01 96       	adiw	r24, 0x01	; 1
    37d2:	a1 1d       	adc	r26, r1
    37d4:	b1 1d       	adc	r27, r1
    37d6:	3f bf       	out	0x3f, r19	; 63
    37d8:	ba 2f       	mov	r27, r26
    37da:	a9 2f       	mov	r26, r25
    37dc:	98 2f       	mov	r25, r24
    37de:	88 27       	eor	r24, r24
    37e0:	82 0f       	add	r24, r18
    37e2:	91 1d       	adc	r25, r1
    37e4:	a1 1d       	adc	r26, r1
    37e6:	b1 1d       	adc	r27, r1
    37e8:	bc 01       	movw	r22, r24
    37ea:	cd 01       	movw	r24, r26
    37ec:	42 e0       	ldi	r20, 0x02	; 2
    37ee:	66 0f       	add	r22, r22
    37f0:	77 1f       	adc	r23, r23
    37f2:	88 1f       	adc	r24, r24
    37f4:	99 1f       	adc	r25, r25
    37f6:	4a 95       	dec	r20
    37f8:	d1 f7       	brne	.-12     	; 0x37ee <micros+0x3c>
    37fa:	08 95       	ret

000037fc <delay>:
    37fc:	8f 92       	push	r8
    37fe:	9f 92       	push	r9
    3800:	af 92       	push	r10
    3802:	bf 92       	push	r11
    3804:	cf 92       	push	r12
    3806:	df 92       	push	r13
    3808:	ef 92       	push	r14
    380a:	ff 92       	push	r15
    380c:	6b 01       	movw	r12, r22
    380e:	7c 01       	movw	r14, r24
    3810:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <micros>
    3814:	4b 01       	movw	r8, r22
    3816:	5c 01       	movw	r10, r24
    3818:	c1 14       	cp	r12, r1
    381a:	d1 04       	cpc	r13, r1
    381c:	e1 04       	cpc	r14, r1
    381e:	f1 04       	cpc	r15, r1
    3820:	01 f1       	breq	.+64     	; 0x3862 <delay+0x66>
    3822:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <yield>
    3826:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <micros>
    382a:	dc 01       	movw	r26, r24
    382c:	cb 01       	movw	r24, r22
    382e:	88 19       	sub	r24, r8
    3830:	99 09       	sbc	r25, r9
    3832:	aa 09       	sbc	r26, r10
    3834:	bb 09       	sbc	r27, r11
    3836:	88 3e       	cpi	r24, 0xE8	; 232
    3838:	93 40       	sbci	r25, 0x03	; 3
    383a:	a1 05       	cpc	r26, r1
    383c:	b1 05       	cpc	r27, r1
    383e:	60 f3       	brcs	.-40     	; 0x3818 <delay+0x1c>
    3840:	21 e0       	ldi	r18, 0x01	; 1
    3842:	c2 1a       	sub	r12, r18
    3844:	d1 08       	sbc	r13, r1
    3846:	e1 08       	sbc	r14, r1
    3848:	f1 08       	sbc	r15, r1
    384a:	88 ee       	ldi	r24, 0xE8	; 232
    384c:	88 0e       	add	r8, r24
    384e:	83 e0       	ldi	r24, 0x03	; 3
    3850:	98 1e       	adc	r9, r24
    3852:	a1 1c       	adc	r10, r1
    3854:	b1 1c       	adc	r11, r1
    3856:	c1 14       	cp	r12, r1
    3858:	d1 04       	cpc	r13, r1
    385a:	e1 04       	cpc	r14, r1
    385c:	f1 04       	cpc	r15, r1
    385e:	19 f7       	brne	.-58     	; 0x3826 <delay+0x2a>
    3860:	db cf       	rjmp	.-74     	; 0x3818 <delay+0x1c>
    3862:	ff 90       	pop	r15
    3864:	ef 90       	pop	r14
    3866:	df 90       	pop	r13
    3868:	cf 90       	pop	r12
    386a:	bf 90       	pop	r11
    386c:	af 90       	pop	r10
    386e:	9f 90       	pop	r9
    3870:	8f 90       	pop	r8
    3872:	08 95       	ret

00003874 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3874:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3876:	84 b5       	in	r24, 0x24	; 36
    3878:	82 60       	ori	r24, 0x02	; 2
    387a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    387c:	84 b5       	in	r24, 0x24	; 36
    387e:	81 60       	ori	r24, 0x01	; 1
    3880:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3882:	85 b5       	in	r24, 0x25	; 37
    3884:	82 60       	ori	r24, 0x02	; 2
    3886:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3888:	85 b5       	in	r24, 0x25	; 37
    388a:	81 60       	ori	r24, 0x01	; 1
    388c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    388e:	ee e6       	ldi	r30, 0x6E	; 110
    3890:	f0 e0       	ldi	r31, 0x00	; 0
    3892:	80 81       	ld	r24, Z
    3894:	81 60       	ori	r24, 0x01	; 1
    3896:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3898:	e1 e8       	ldi	r30, 0x81	; 129
    389a:	f0 e0       	ldi	r31, 0x00	; 0
    389c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    389e:	80 81       	ld	r24, Z
    38a0:	82 60       	ori	r24, 0x02	; 2
    38a2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    38a4:	80 81       	ld	r24, Z
    38a6:	81 60       	ori	r24, 0x01	; 1
    38a8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    38aa:	e0 e8       	ldi	r30, 0x80	; 128
    38ac:	f0 e0       	ldi	r31, 0x00	; 0
    38ae:	80 81       	ld	r24, Z
    38b0:	81 60       	ori	r24, 0x01	; 1
    38b2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    38b4:	e1 eb       	ldi	r30, 0xB1	; 177
    38b6:	f0 e0       	ldi	r31, 0x00	; 0
    38b8:	80 81       	ld	r24, Z
    38ba:	84 60       	ori	r24, 0x04	; 4
    38bc:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    38be:	e0 eb       	ldi	r30, 0xB0	; 176
    38c0:	f0 e0       	ldi	r31, 0x00	; 0
    38c2:	80 81       	ld	r24, Z
    38c4:	81 60       	ori	r24, 0x01	; 1
    38c6:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    38c8:	ea e7       	ldi	r30, 0x7A	; 122
    38ca:	f0 e0       	ldi	r31, 0x00	; 0
    38cc:	80 81       	ld	r24, Z
    38ce:	84 60       	ori	r24, 0x04	; 4
    38d0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    38d2:	80 81       	ld	r24, Z
    38d4:	82 60       	ori	r24, 0x02	; 2
    38d6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    38d8:	80 81       	ld	r24, Z
    38da:	81 60       	ori	r24, 0x01	; 1
    38dc:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    38de:	80 81       	ld	r24, Z
    38e0:	80 68       	ori	r24, 0x80	; 128
    38e2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    38e4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    38e8:	08 95       	ret

000038ea <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    38ea:	1f 93       	push	r17
    38ec:	cf 93       	push	r28
    38ee:	df 93       	push	r29
    38f0:	18 2f       	mov	r17, r24
    38f2:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    38f4:	61 e0       	ldi	r22, 0x01	; 1
    38f6:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <pinMode>
	if (val == 0)
    38fa:	20 97       	sbiw	r28, 0x00	; 0
    38fc:	11 f4       	brne	.+4      	; 0x3902 <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    38fe:	60 e0       	ldi	r22, 0x00	; 0
    3900:	04 c0       	rjmp	.+8      	; 0x390a <analogWrite+0x20>
	}
	else if (val == 255)
    3902:	cf 3f       	cpi	r28, 0xFF	; 255
    3904:	d1 05       	cpc	r29, r1
    3906:	39 f4       	brne	.+14     	; 0x3916 <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    3908:	61 e0       	ldi	r22, 0x01	; 1
    390a:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    390c:	df 91       	pop	r29
    390e:	cf 91       	pop	r28
    3910:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    3912:	0c 94 39 1d 	jmp	0x3a72	; 0x3a72 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    3916:	e1 2f       	mov	r30, r17
    3918:	f0 e0       	ldi	r31, 0x00	; 0
    391a:	e1 54       	subi	r30, 0x41	; 65
    391c:	f3 4f       	sbci	r31, 0xF3	; 243
    391e:	e4 91       	lpm	r30, Z
    3920:	e3 30       	cpi	r30, 0x03	; 3
    3922:	f9 f0       	breq	.+62     	; 0x3962 <analogWrite+0x78>
    3924:	48 f4       	brcc	.+18     	; 0x3938 <analogWrite+0x4e>
    3926:	e1 30       	cpi	r30, 0x01	; 1
    3928:	b9 f0       	breq	.+46     	; 0x3958 <analogWrite+0x6e>
    392a:	e2 30       	cpi	r30, 0x02	; 2
    392c:	a1 f5       	brne	.+104    	; 0x3996 <analogWrite+0xac>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    392e:	84 b5       	in	r24, 0x24	; 36
    3930:	80 62       	ori	r24, 0x20	; 32
    3932:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    3934:	c8 bd       	out	0x28, r28	; 40
				break;
    3936:	34 c0       	rjmp	.+104    	; 0x39a0 <analogWrite+0xb6>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    3938:	e7 30       	cpi	r30, 0x07	; 7
    393a:	e9 f0       	breq	.+58     	; 0x3976 <analogWrite+0x8c>
    393c:	e8 30       	cpi	r30, 0x08	; 8
    393e:	19 f1       	breq	.+70     	; 0x3986 <analogWrite+0x9c>
    3940:	e4 30       	cpi	r30, 0x04	; 4
    3942:	49 f5       	brne	.+82     	; 0x3996 <analogWrite+0xac>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    3944:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    3948:	80 62       	ori	r24, 0x20	; 32
    394a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
				OCR1B = val; // set pwm duty
    394e:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    3952:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
				break;
    3956:	24 c0       	rjmp	.+72     	; 0x39a0 <analogWrite+0xb6>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    3958:	84 b5       	in	r24, 0x24	; 36
    395a:	80 68       	ori	r24, 0x80	; 128
    395c:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    395e:	c7 bd       	out	0x27, r28	; 39
				break;
    3960:	1f c0       	rjmp	.+62     	; 0x39a0 <analogWrite+0xb6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    3962:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    3966:	80 68       	ori	r24, 0x80	; 128
    3968:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
				OCR1A = val; // set pwm duty
    396c:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3970:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				break;
    3974:	15 c0       	rjmp	.+42     	; 0x39a0 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    3976:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    397a:	80 68       	ori	r24, 0x80	; 128
    397c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
				OCR2A = val; // set pwm duty
    3980:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
				break;
    3984:	0d c0       	rjmp	.+26     	; 0x39a0 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    3986:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    398a:	80 62       	ori	r24, 0x20	; 32
    398c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
				OCR2B = val; // set pwm duty
    3990:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
				break;
    3994:	05 c0       	rjmp	.+10     	; 0x39a0 <analogWrite+0xb6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    3996:	c0 38       	cpi	r28, 0x80	; 128
    3998:	d1 05       	cpc	r29, r1
    399a:	0c f0       	brlt	.+2      	; 0x399e <analogWrite+0xb4>
    399c:	b5 cf       	rjmp	.-150    	; 0x3908 <analogWrite+0x1e>
    399e:	af cf       	rjmp	.-162    	; 0x38fe <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    39a0:	df 91       	pop	r29
    39a2:	cf 91       	pop	r28
    39a4:	1f 91       	pop	r17
    39a6:	08 95       	ret

000039a8 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    39a8:	83 30       	cpi	r24, 0x03	; 3
    39aa:	81 f0       	breq	.+32     	; 0x39cc <turnOffPWM+0x24>
    39ac:	28 f4       	brcc	.+10     	; 0x39b8 <turnOffPWM+0x10>
    39ae:	81 30       	cpi	r24, 0x01	; 1
    39b0:	99 f0       	breq	.+38     	; 0x39d8 <turnOffPWM+0x30>
    39b2:	82 30       	cpi	r24, 0x02	; 2
    39b4:	a1 f0       	breq	.+40     	; 0x39de <turnOffPWM+0x36>
    39b6:	08 95       	ret
    39b8:	87 30       	cpi	r24, 0x07	; 7
    39ba:	a9 f0       	breq	.+42     	; 0x39e6 <turnOffPWM+0x3e>
    39bc:	88 30       	cpi	r24, 0x08	; 8
    39be:	b9 f0       	breq	.+46     	; 0x39ee <turnOffPWM+0x46>
    39c0:	84 30       	cpi	r24, 0x04	; 4
    39c2:	d1 f4       	brne	.+52     	; 0x39f8 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    39c4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    39c8:	8f 7d       	andi	r24, 0xDF	; 223
    39ca:	03 c0       	rjmp	.+6      	; 0x39d2 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    39cc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    39d0:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    39d2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    39d6:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    39d8:	84 b5       	in	r24, 0x24	; 36
    39da:	8f 77       	andi	r24, 0x7F	; 127
    39dc:	02 c0       	rjmp	.+4      	; 0x39e2 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    39de:	84 b5       	in	r24, 0x24	; 36
    39e0:	8f 7d       	andi	r24, 0xDF	; 223
    39e2:	84 bd       	out	0x24, r24	; 36
    39e4:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    39e6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    39ea:	8f 77       	andi	r24, 0x7F	; 127
    39ec:	03 c0       	rjmp	.+6      	; 0x39f4 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    39ee:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    39f2:	8f 7d       	andi	r24, 0xDF	; 223
    39f4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    39f8:	08 95       	ret

000039fa <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    39fa:	cf 93       	push	r28
    39fc:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    39fe:	90 e0       	ldi	r25, 0x00	; 0
    3a00:	fc 01       	movw	r30, r24
    3a02:	ed 52       	subi	r30, 0x2D	; 45
    3a04:	f3 4f       	sbci	r31, 0xF3	; 243
    3a06:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3a08:	fc 01       	movw	r30, r24
    3a0a:	e9 51       	subi	r30, 0x19	; 25
    3a0c:	f3 4f       	sbci	r31, 0xF3	; 243
    3a0e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3a10:	88 23       	and	r24, r24
    3a12:	61 f1       	breq	.+88     	; 0x3a6c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	88 0f       	add	r24, r24
    3a18:	99 1f       	adc	r25, r25
    3a1a:	fc 01       	movw	r30, r24
    3a1c:	eb 5f       	subi	r30, 0xFB	; 251
    3a1e:	f2 4f       	sbci	r31, 0xF2	; 242
    3a20:	c5 91       	lpm	r28, Z+
    3a22:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3a24:	fc 01       	movw	r30, r24
    3a26:	e5 50       	subi	r30, 0x05	; 5
    3a28:	f3 4f       	sbci	r31, 0xF3	; 243
    3a2a:	a5 91       	lpm	r26, Z+
    3a2c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3a2e:	61 11       	cpse	r22, r1
    3a30:	09 c0       	rjmp	.+18     	; 0x3a44 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3a32:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3a34:	f8 94       	cli
		*reg &= ~bit;
    3a36:	88 81       	ld	r24, Y
    3a38:	20 95       	com	r18
    3a3a:	82 23       	and	r24, r18
    3a3c:	88 83       	st	Y, r24
		*out &= ~bit;
    3a3e:	ec 91       	ld	r30, X
    3a40:	2e 23       	and	r18, r30
    3a42:	0b c0       	rjmp	.+22     	; 0x3a5a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3a44:	62 30       	cpi	r22, 0x02	; 2
    3a46:	61 f4       	brne	.+24     	; 0x3a60 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3a48:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3a4a:	f8 94       	cli
		*reg &= ~bit;
    3a4c:	88 81       	ld	r24, Y
    3a4e:	32 2f       	mov	r19, r18
    3a50:	30 95       	com	r19
    3a52:	83 23       	and	r24, r19
    3a54:	88 83       	st	Y, r24
		*out |= bit;
    3a56:	ec 91       	ld	r30, X
    3a58:	2e 2b       	or	r18, r30
    3a5a:	2c 93       	st	X, r18
		SREG = oldSREG;
    3a5c:	9f bf       	out	0x3f, r25	; 63
    3a5e:	06 c0       	rjmp	.+12     	; 0x3a6c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3a60:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3a62:	f8 94       	cli
		*reg |= bit;
    3a64:	e8 81       	ld	r30, Y
    3a66:	2e 2b       	or	r18, r30
    3a68:	28 83       	st	Y, r18
		SREG = oldSREG;
    3a6a:	8f bf       	out	0x3f, r24	; 63
	}
}
    3a6c:	df 91       	pop	r29
    3a6e:	cf 91       	pop	r28
    3a70:	08 95       	ret

00003a72 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3a72:	1f 93       	push	r17
    3a74:	cf 93       	push	r28
    3a76:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3a78:	28 2f       	mov	r18, r24
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	f9 01       	movw	r30, r18
    3a7e:	e1 54       	subi	r30, 0x41	; 65
    3a80:	f3 4f       	sbci	r31, 0xF3	; 243
    3a82:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3a84:	f9 01       	movw	r30, r18
    3a86:	ed 52       	subi	r30, 0x2D	; 45
    3a88:	f3 4f       	sbci	r31, 0xF3	; 243
    3a8a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3a8c:	f9 01       	movw	r30, r18
    3a8e:	e9 51       	subi	r30, 0x19	; 25
    3a90:	f3 4f       	sbci	r31, 0xF3	; 243
    3a92:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3a94:	cc 23       	and	r28, r28
    3a96:	c1 f0       	breq	.+48     	; 0x3ac8 <digitalWrite+0x56>
    3a98:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3a9a:	81 11       	cpse	r24, r1
    3a9c:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <turnOffPWM>

	out = portOutputRegister(port);
    3aa0:	ec 2f       	mov	r30, r28
    3aa2:	f0 e0       	ldi	r31, 0x00	; 0
    3aa4:	ee 0f       	add	r30, r30
    3aa6:	ff 1f       	adc	r31, r31
    3aa8:	e5 50       	subi	r30, 0x05	; 5
    3aaa:	f3 4f       	sbci	r31, 0xF3	; 243
    3aac:	a5 91       	lpm	r26, Z+
    3aae:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3ab0:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3ab2:	f8 94       	cli

	if (val == LOW) {
    3ab4:	11 11       	cpse	r17, r1
    3ab6:	04 c0       	rjmp	.+8      	; 0x3ac0 <digitalWrite+0x4e>
		*out &= ~bit;
    3ab8:	8c 91       	ld	r24, X
    3aba:	d0 95       	com	r29
    3abc:	d8 23       	and	r29, r24
    3abe:	02 c0       	rjmp	.+4      	; 0x3ac4 <digitalWrite+0x52>
	} else {
		*out |= bit;
    3ac0:	ec 91       	ld	r30, X
    3ac2:	de 2b       	or	r29, r30
    3ac4:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3ac6:	9f bf       	out	0x3f, r25	; 63
}
    3ac8:	df 91       	pop	r29
    3aca:	cf 91       	pop	r28
    3acc:	1f 91       	pop	r17
    3ace:	08 95       	ret

00003ad0 <_ZN6StringD1Ev>:

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
	return 0;
}
    3ad0:	fc 01       	movw	r30, r24
    3ad2:	80 81       	ld	r24, Z
    3ad4:	91 81       	ldd	r25, Z+1	; 0x01
    3ad6:	00 97       	sbiw	r24, 0x00	; 0
    3ad8:	11 f0       	breq	.+4      	; 0x3ade <_ZN6StringD1Ev+0xe>
    3ada:	0c 94 81 24 	jmp	0x4902	; 0x4902 <free>
    3ade:	08 95       	ret

00003ae0 <_ZN6String10invalidateEv>:
    3ae0:	cf 93       	push	r28
    3ae2:	df 93       	push	r29
    3ae4:	ec 01       	movw	r28, r24
    3ae6:	88 81       	ld	r24, Y
    3ae8:	99 81       	ldd	r25, Y+1	; 0x01
    3aea:	00 97       	sbiw	r24, 0x00	; 0
    3aec:	11 f0       	breq	.+4      	; 0x3af2 <_ZN6String10invalidateEv+0x12>
    3aee:	0e 94 81 24 	call	0x4902	; 0x4902 <free>
    3af2:	19 82       	std	Y+1, r1	; 0x01
    3af4:	18 82       	st	Y, r1
    3af6:	1d 82       	std	Y+5, r1	; 0x05
    3af8:	1c 82       	std	Y+4, r1	; 0x04
    3afa:	1b 82       	std	Y+3, r1	; 0x03
    3afc:	1a 82       	std	Y+2, r1	; 0x02
    3afe:	df 91       	pop	r29
    3b00:	cf 91       	pop	r28
    3b02:	08 95       	ret

00003b04 <_ZN6String12changeBufferEj>:
    3b04:	0f 93       	push	r16
    3b06:	1f 93       	push	r17
    3b08:	cf 93       	push	r28
    3b0a:	df 93       	push	r29
    3b0c:	ec 01       	movw	r28, r24
    3b0e:	8b 01       	movw	r16, r22
    3b10:	6f 5f       	subi	r22, 0xFF	; 255
    3b12:	7f 4f       	sbci	r23, 0xFF	; 255
    3b14:	88 81       	ld	r24, Y
    3b16:	99 81       	ldd	r25, Y+1	; 0x01
    3b18:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <realloc>
    3b1c:	00 97       	sbiw	r24, 0x00	; 0
    3b1e:	31 f0       	breq	.+12     	; 0x3b2c <_ZN6String12changeBufferEj+0x28>
    3b20:	99 83       	std	Y+1, r25	; 0x01
    3b22:	88 83       	st	Y, r24
    3b24:	1b 83       	std	Y+3, r17	; 0x03
    3b26:	0a 83       	std	Y+2, r16	; 0x02
    3b28:	81 e0       	ldi	r24, 0x01	; 1
    3b2a:	01 c0       	rjmp	.+2      	; 0x3b2e <_ZN6String12changeBufferEj+0x2a>
    3b2c:	80 e0       	ldi	r24, 0x00	; 0
    3b2e:	df 91       	pop	r29
    3b30:	cf 91       	pop	r28
    3b32:	1f 91       	pop	r17
    3b34:	0f 91       	pop	r16
    3b36:	08 95       	ret

00003b38 <_ZN6String7reserveEj>:
    3b38:	cf 93       	push	r28
    3b3a:	df 93       	push	r29
    3b3c:	ec 01       	movw	r28, r24
    3b3e:	88 81       	ld	r24, Y
    3b40:	99 81       	ldd	r25, Y+1	; 0x01
    3b42:	89 2b       	or	r24, r25
    3b44:	29 f0       	breq	.+10     	; 0x3b50 <_ZN6String7reserveEj+0x18>
    3b46:	8a 81       	ldd	r24, Y+2	; 0x02
    3b48:	9b 81       	ldd	r25, Y+3	; 0x03
    3b4a:	86 17       	cp	r24, r22
    3b4c:	97 07       	cpc	r25, r23
    3b4e:	60 f4       	brcc	.+24     	; 0x3b68 <_ZN6String7reserveEj+0x30>
    3b50:	ce 01       	movw	r24, r28
    3b52:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <_ZN6String12changeBufferEj>
    3b56:	88 23       	and	r24, r24
    3b58:	41 f0       	breq	.+16     	; 0x3b6a <_ZN6String7reserveEj+0x32>
    3b5a:	8c 81       	ldd	r24, Y+4	; 0x04
    3b5c:	9d 81       	ldd	r25, Y+5	; 0x05
    3b5e:	89 2b       	or	r24, r25
    3b60:	19 f4       	brne	.+6      	; 0x3b68 <_ZN6String7reserveEj+0x30>
    3b62:	e8 81       	ld	r30, Y
    3b64:	f9 81       	ldd	r31, Y+1	; 0x01
    3b66:	10 82       	st	Z, r1
    3b68:	81 e0       	ldi	r24, 0x01	; 1
    3b6a:	df 91       	pop	r29
    3b6c:	cf 91       	pop	r28
    3b6e:	08 95       	ret

00003b70 <_ZN6String4copyEPKcj>:
    3b70:	ef 92       	push	r14
    3b72:	ff 92       	push	r15
    3b74:	0f 93       	push	r16
    3b76:	1f 93       	push	r17
    3b78:	cf 93       	push	r28
    3b7a:	df 93       	push	r29
    3b7c:	ec 01       	movw	r28, r24
    3b7e:	7b 01       	movw	r14, r22
    3b80:	8a 01       	movw	r16, r20
    3b82:	ba 01       	movw	r22, r20
    3b84:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <_ZN6String7reserveEj>
    3b88:	81 11       	cpse	r24, r1
    3b8a:	04 c0       	rjmp	.+8      	; 0x3b94 <_ZN6String4copyEPKcj+0x24>
    3b8c:	ce 01       	movw	r24, r28
    3b8e:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <_ZN6String10invalidateEv>
    3b92:	07 c0       	rjmp	.+14     	; 0x3ba2 <_ZN6String4copyEPKcj+0x32>
    3b94:	1d 83       	std	Y+5, r17	; 0x05
    3b96:	0c 83       	std	Y+4, r16	; 0x04
    3b98:	b7 01       	movw	r22, r14
    3b9a:	88 81       	ld	r24, Y
    3b9c:	99 81       	ldd	r25, Y+1	; 0x01
    3b9e:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <strcpy>
    3ba2:	ce 01       	movw	r24, r28
    3ba4:	df 91       	pop	r29
    3ba6:	cf 91       	pop	r28
    3ba8:	1f 91       	pop	r17
    3baa:	0f 91       	pop	r16
    3bac:	ff 90       	pop	r15
    3bae:	ef 90       	pop	r14
    3bb0:	08 95       	ret

00003bb2 <_ZN6StringC1EPKc>:
    3bb2:	fc 01       	movw	r30, r24
    3bb4:	11 82       	std	Z+1, r1	; 0x01
    3bb6:	10 82       	st	Z, r1
    3bb8:	13 82       	std	Z+3, r1	; 0x03
    3bba:	12 82       	std	Z+2, r1	; 0x02
    3bbc:	15 82       	std	Z+5, r1	; 0x05
    3bbe:	14 82       	std	Z+4, r1	; 0x04
    3bc0:	61 15       	cp	r22, r1
    3bc2:	71 05       	cpc	r23, r1
    3bc4:	51 f0       	breq	.+20     	; 0x3bda <_ZN6StringC1EPKc+0x28>
    3bc6:	fb 01       	movw	r30, r22
    3bc8:	01 90       	ld	r0, Z+
    3bca:	00 20       	and	r0, r0
    3bcc:	e9 f7       	brne	.-6      	; 0x3bc8 <_ZN6StringC1EPKc+0x16>
    3bce:	31 97       	sbiw	r30, 0x01	; 1
    3bd0:	af 01       	movw	r20, r30
    3bd2:	46 1b       	sub	r20, r22
    3bd4:	57 0b       	sbc	r21, r23
    3bd6:	0c 94 b8 1d 	jmp	0x3b70	; 0x3b70 <_ZN6String4copyEPKcj>
    3bda:	08 95       	ret

00003bdc <_ZN6String6concatEPKcj>:
    3bdc:	ef 92       	push	r14
    3bde:	ff 92       	push	r15
    3be0:	0f 93       	push	r16
    3be2:	1f 93       	push	r17
    3be4:	cf 93       	push	r28
    3be6:	df 93       	push	r29
    3be8:	61 15       	cp	r22, r1
    3bea:	71 05       	cpc	r23, r1
    3bec:	11 f4       	brne	.+4      	; 0x3bf2 <_ZN6String6concatEPKcj+0x16>
    3bee:	80 e0       	ldi	r24, 0x00	; 0
    3bf0:	1c c0       	rjmp	.+56     	; 0x3c2a <_ZN6String6concatEPKcj+0x4e>
    3bf2:	41 15       	cp	r20, r1
    3bf4:	51 05       	cpc	r21, r1
    3bf6:	c1 f0       	breq	.+48     	; 0x3c28 <_ZN6String6concatEPKcj+0x4c>
    3bf8:	7b 01       	movw	r14, r22
    3bfa:	ec 01       	movw	r28, r24
    3bfc:	8c 81       	ldd	r24, Y+4	; 0x04
    3bfe:	9d 81       	ldd	r25, Y+5	; 0x05
    3c00:	8a 01       	movw	r16, r20
    3c02:	08 0f       	add	r16, r24
    3c04:	19 1f       	adc	r17, r25
    3c06:	b8 01       	movw	r22, r16
    3c08:	ce 01       	movw	r24, r28
    3c0a:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <_ZN6String7reserveEj>
    3c0e:	88 23       	and	r24, r24
    3c10:	71 f3       	breq	.-36     	; 0x3bee <_ZN6String6concatEPKcj+0x12>
    3c12:	28 81       	ld	r18, Y
    3c14:	39 81       	ldd	r19, Y+1	; 0x01
    3c16:	8c 81       	ldd	r24, Y+4	; 0x04
    3c18:	9d 81       	ldd	r25, Y+5	; 0x05
    3c1a:	b7 01       	movw	r22, r14
    3c1c:	82 0f       	add	r24, r18
    3c1e:	93 1f       	adc	r25, r19
    3c20:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <strcpy>
    3c24:	1d 83       	std	Y+5, r17	; 0x05
    3c26:	0c 83       	std	Y+4, r16	; 0x04
    3c28:	81 e0       	ldi	r24, 0x01	; 1
    3c2a:	df 91       	pop	r29
    3c2c:	cf 91       	pop	r28
    3c2e:	1f 91       	pop	r17
    3c30:	0f 91       	pop	r16
    3c32:	ff 90       	pop	r15
    3c34:	ef 90       	pop	r14
    3c36:	08 95       	ret

00003c38 <_ZN6String6concatEc>:
    3c38:	cf 93       	push	r28
    3c3a:	df 93       	push	r29
    3c3c:	00 d0       	rcall	.+0      	; 0x3c3e <_ZN6String6concatEc+0x6>
    3c3e:	cd b7       	in	r28, 0x3d	; 61
    3c40:	de b7       	in	r29, 0x3e	; 62
    3c42:	69 83       	std	Y+1, r22	; 0x01
    3c44:	1a 82       	std	Y+2, r1	; 0x02
    3c46:	41 e0       	ldi	r20, 0x01	; 1
    3c48:	50 e0       	ldi	r21, 0x00	; 0
    3c4a:	be 01       	movw	r22, r28
    3c4c:	6f 5f       	subi	r22, 0xFF	; 255
    3c4e:	7f 4f       	sbci	r23, 0xFF	; 255
    3c50:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <_ZN6String6concatEPKcj>
    3c54:	0f 90       	pop	r0
    3c56:	0f 90       	pop	r0
    3c58:	df 91       	pop	r29
    3c5a:	cf 91       	pop	r28
    3c5c:	08 95       	ret

00003c5e <_ZN6StringixEj>:
    3c5e:	fc 01       	movw	r30, r24
    3c60:	24 81       	ldd	r18, Z+4	; 0x04
    3c62:	35 81       	ldd	r19, Z+5	; 0x05
    3c64:	62 17       	cp	r22, r18
    3c66:	73 07       	cpc	r23, r19
    3c68:	20 f4       	brcc	.+8      	; 0x3c72 <_ZN6StringixEj+0x14>
    3c6a:	80 81       	ld	r24, Z
    3c6c:	91 81       	ldd	r25, Z+1	; 0x01
    3c6e:	00 97       	sbiw	r24, 0x00	; 0
    3c70:	29 f4       	brne	.+10     	; 0x3c7c <_ZN6StringixEj+0x1e>
    3c72:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <_ZZN6StringixEjE19dummy_writable_char>
    3c76:	85 ec       	ldi	r24, 0xC5	; 197
    3c78:	92 e0       	ldi	r25, 0x02	; 2
    3c7a:	08 95       	ret
    3c7c:	86 0f       	add	r24, r22
    3c7e:	97 1f       	adc	r25, r23
    3c80:	08 95       	ret

00003c82 <_ZN6String6removeEjj>:
    3c82:	cf 93       	push	r28
    3c84:	df 93       	push	r29
    3c86:	dc 01       	movw	r26, r24
    3c88:	14 96       	adiw	r26, 0x04	; 4
    3c8a:	ed 91       	ld	r30, X+
    3c8c:	fc 91       	ld	r31, X
    3c8e:	15 97       	sbiw	r26, 0x05	; 5
    3c90:	6e 17       	cp	r22, r30
    3c92:	7f 07       	cpc	r23, r31
    3c94:	30 f5       	brcc	.+76     	; 0x3ce2 <_ZN6String6removeEjj+0x60>
    3c96:	41 15       	cp	r20, r1
    3c98:	51 05       	cpc	r21, r1
    3c9a:	19 f1       	breq	.+70     	; 0x3ce2 <_ZN6String6removeEjj+0x60>
    3c9c:	df 01       	movw	r26, r30
    3c9e:	a6 1b       	sub	r26, r22
    3ca0:	b7 0b       	sbc	r27, r23
    3ca2:	9a 01       	movw	r18, r20
    3ca4:	a4 17       	cp	r26, r20
    3ca6:	b5 07       	cpc	r27, r21
    3ca8:	08 f4       	brcc	.+2      	; 0x3cac <_ZN6String6removeEjj+0x2a>
    3caa:	9d 01       	movw	r18, r26
    3cac:	db 01       	movw	r26, r22
    3cae:	ec 01       	movw	r28, r24
    3cb0:	88 81       	ld	r24, Y
    3cb2:	99 81       	ldd	r25, Y+1	; 0x01
    3cb4:	e2 1b       	sub	r30, r18
    3cb6:	f3 0b       	sbc	r31, r19
    3cb8:	fd 83       	std	Y+5, r31	; 0x05
    3cba:	ec 83       	std	Y+4, r30	; 0x04
    3cbc:	af 01       	movw	r20, r30
    3cbe:	46 1b       	sub	r20, r22
    3cc0:	57 0b       	sbc	r21, r23
    3cc2:	26 0f       	add	r18, r22
    3cc4:	37 1f       	adc	r19, r23
    3cc6:	bc 01       	movw	r22, r24
    3cc8:	62 0f       	add	r22, r18
    3cca:	73 1f       	adc	r23, r19
    3ccc:	8a 0f       	add	r24, r26
    3cce:	9b 1f       	adc	r25, r27
    3cd0:	0e 94 fa 25 	call	0x4bf4	; 0x4bf4 <strncpy>
    3cd4:	e8 81       	ld	r30, Y
    3cd6:	f9 81       	ldd	r31, Y+1	; 0x01
    3cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    3cda:	9d 81       	ldd	r25, Y+5	; 0x05
    3cdc:	e8 0f       	add	r30, r24
    3cde:	f9 1f       	adc	r31, r25
    3ce0:	10 82       	st	Z, r1
    3ce2:	df 91       	pop	r29
    3ce4:	cf 91       	pop	r28
    3ce6:	08 95       	ret

00003ce8 <_ZNK6String8toDoubleEv>:
	return float(toDouble());
}

double String::toDouble(void) const
{
	if (buffer) return atof(buffer);
    3ce8:	fc 01       	movw	r30, r24
    3cea:	80 81       	ld	r24, Z
    3cec:	91 81       	ldd	r25, Z+1	; 0x01
    3cee:	00 97       	sbiw	r24, 0x00	; 0
    3cf0:	11 f0       	breq	.+4      	; 0x3cf6 <_ZNK6String8toDoubleEv+0xe>
    3cf2:	0c 94 d0 25 	jmp	0x4ba0	; 0x4ba0 <atof>
	return 0;
}
    3cf6:	60 e0       	ldi	r22, 0x00	; 0
    3cf8:	70 e0       	ldi	r23, 0x00	; 0
    3cfa:	cb 01       	movw	r24, r22
    3cfc:	08 95       	ret

00003cfe <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    3cfe:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <_ZN7TwoWire14rxBufferLengthE>
    3d02:	90 e0       	ldi	r25, 0x00	; 0
    3d04:	20 91 fb 02 	lds	r18, 0x02FB	; 0x8002fb <_ZN7TwoWire13rxBufferIndexE>
    3d08:	82 1b       	sub	r24, r18
    3d0a:	91 09       	sbc	r25, r1
    3d0c:	08 95       	ret

00003d0e <_ZN7TwoWire4readEv>:
    3d0e:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <_ZN7TwoWire13rxBufferIndexE>
    3d12:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <_ZN7TwoWire14rxBufferLengthE>
    3d16:	98 17       	cp	r25, r24
    3d18:	50 f4       	brcc	.+20     	; 0x3d2e <_ZN7TwoWire4readEv+0x20>
    3d1a:	e9 2f       	mov	r30, r25
    3d1c:	f0 e0       	ldi	r31, 0x00	; 0
    3d1e:	e4 50       	subi	r30, 0x04	; 4
    3d20:	fd 4f       	sbci	r31, 0xFD	; 253
    3d22:	20 81       	ld	r18, Z
    3d24:	30 e0       	ldi	r19, 0x00	; 0
    3d26:	9f 5f       	subi	r25, 0xFF	; 255
    3d28:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <_ZN7TwoWire13rxBufferIndexE>
    3d2c:	02 c0       	rjmp	.+4      	; 0x3d32 <_ZN7TwoWire4readEv+0x24>
    3d2e:	2f ef       	ldi	r18, 0xFF	; 255
    3d30:	3f ef       	ldi	r19, 0xFF	; 255
    3d32:	c9 01       	movw	r24, r18
    3d34:	08 95       	ret

00003d36 <_ZN7TwoWire4peekEv>:
    3d36:	e0 91 fb 02 	lds	r30, 0x02FB	; 0x8002fb <_ZN7TwoWire13rxBufferIndexE>
    3d3a:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <_ZN7TwoWire14rxBufferLengthE>
    3d3e:	e8 17       	cp	r30, r24
    3d40:	30 f4       	brcc	.+12     	; 0x3d4e <_ZN7TwoWire4peekEv+0x18>
    3d42:	f0 e0       	ldi	r31, 0x00	; 0
    3d44:	e4 50       	subi	r30, 0x04	; 4
    3d46:	fd 4f       	sbci	r31, 0xFD	; 253
    3d48:	80 81       	ld	r24, Z
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
    3d4c:	08 95       	ret
    3d4e:	8f ef       	ldi	r24, 0xFF	; 255
    3d50:	9f ef       	ldi	r25, 0xFF	; 255
    3d52:	08 95       	ret

00003d54 <_ZN7TwoWire5flushEv>:
    3d54:	08 95       	ret

00003d56 <_ZN7TwoWire16onReceiveServiceEPhi>:
    3d56:	cf 93       	push	r28
    3d58:	df 93       	push	r29
    3d5a:	ec 01       	movw	r28, r24
    3d5c:	e0 91 d2 02 	lds	r30, 0x02D2	; 0x8002d2 <_ZN7TwoWire14user_onReceiveE>
    3d60:	f0 91 d3 02 	lds	r31, 0x02D3	; 0x8002d3 <_ZN7TwoWire14user_onReceiveE+0x1>
    3d64:	30 97       	sbiw	r30, 0x00	; 0
    3d66:	f1 f0       	breq	.+60     	; 0x3da4 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3d68:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <_ZN7TwoWire13rxBufferIndexE>
    3d6c:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <_ZN7TwoWire14rxBufferLengthE>
    3d70:	98 17       	cp	r25, r24
    3d72:	c0 f0       	brcs	.+48     	; 0x3da4 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3d74:	90 e0       	ldi	r25, 0x00	; 0
    3d76:	29 2f       	mov	r18, r25
    3d78:	30 e0       	ldi	r19, 0x00	; 0
    3d7a:	26 17       	cp	r18, r22
    3d7c:	37 07       	cpc	r19, r23
    3d7e:	54 f4       	brge	.+20     	; 0x3d94 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    3d80:	de 01       	movw	r26, r28
    3d82:	a2 0f       	add	r26, r18
    3d84:	b3 1f       	adc	r27, r19
    3d86:	4c 91       	ld	r20, X
    3d88:	d9 01       	movw	r26, r18
    3d8a:	a4 50       	subi	r26, 0x04	; 4
    3d8c:	bd 4f       	sbci	r27, 0xFD	; 253
    3d8e:	4c 93       	st	X, r20
    3d90:	9f 5f       	subi	r25, 0xFF	; 255
    3d92:	f1 cf       	rjmp	.-30     	; 0x3d76 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    3d94:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <_ZN7TwoWire13rxBufferIndexE>
    3d98:	60 93 fa 02 	sts	0x02FA, r22	; 0x8002fa <_ZN7TwoWire14rxBufferLengthE>
    3d9c:	cb 01       	movw	r24, r22
    3d9e:	df 91       	pop	r29
    3da0:	cf 91       	pop	r28
    3da2:	09 94       	ijmp
    3da4:	df 91       	pop	r29
    3da6:	cf 91       	pop	r28
    3da8:	08 95       	ret

00003daa <_ZN7TwoWire16onRequestServiceEv>:
    3daa:	e0 91 d4 02 	lds	r30, 0x02D4	; 0x8002d4 <_ZN7TwoWire14user_onRequestE>
    3dae:	f0 91 d5 02 	lds	r31, 0x02D5	; 0x8002d5 <_ZN7TwoWire14user_onRequestE+0x1>
    3db2:	30 97       	sbiw	r30, 0x00	; 0
    3db4:	29 f0       	breq	.+10     	; 0x3dc0 <_ZN7TwoWire16onRequestServiceEv+0x16>
    3db6:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <_ZN7TwoWire13txBufferIndexE>
    3dba:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <_ZN7TwoWire14txBufferLengthE>
    3dbe:	09 94       	ijmp
    3dc0:	08 95       	ret

00003dc2 <_ZN7TwoWire5writeEPKhj>:
    3dc2:	cf 92       	push	r12
    3dc4:	df 92       	push	r13
    3dc6:	ef 92       	push	r14
    3dc8:	ff 92       	push	r15
    3dca:	0f 93       	push	r16
    3dcc:	1f 93       	push	r17
    3dce:	cf 93       	push	r28
    3dd0:	df 93       	push	r29
    3dd2:	7c 01       	movw	r14, r24
    3dd4:	cb 01       	movw	r24, r22
    3dd6:	8a 01       	movw	r16, r20
    3dd8:	20 91 d6 02 	lds	r18, 0x02D6	; 0x8002d6 <_ZN7TwoWire12transmittingE>
    3ddc:	22 23       	and	r18, r18
    3dde:	89 f0       	breq	.+34     	; 0x3e02 <_ZN7TwoWire5writeEPKhj+0x40>
    3de0:	eb 01       	movw	r28, r22
    3de2:	6b 01       	movw	r12, r22
    3de4:	c4 0e       	add	r12, r20
    3de6:	d5 1e       	adc	r13, r21
    3de8:	cc 15       	cp	r28, r12
    3dea:	dd 05       	cpc	r29, r13
    3dec:	69 f0       	breq	.+26     	; 0x3e08 <_ZN7TwoWire5writeEPKhj+0x46>
    3dee:	69 91       	ld	r22, Y+
    3df0:	d7 01       	movw	r26, r14
    3df2:	ed 91       	ld	r30, X+
    3df4:	fc 91       	ld	r31, X
    3df6:	01 90       	ld	r0, Z+
    3df8:	f0 81       	ld	r31, Z
    3dfa:	e0 2d       	mov	r30, r0
    3dfc:	c7 01       	movw	r24, r14
    3dfe:	09 95       	icall
    3e00:	f3 cf       	rjmp	.-26     	; 0x3de8 <_ZN7TwoWire5writeEPKhj+0x26>
    3e02:	64 2f       	mov	r22, r20
    3e04:	0e 94 16 20 	call	0x402c	; 0x402c <twi_transmit>
    3e08:	c8 01       	movw	r24, r16
    3e0a:	df 91       	pop	r29
    3e0c:	cf 91       	pop	r28
    3e0e:	1f 91       	pop	r17
    3e10:	0f 91       	pop	r16
    3e12:	ff 90       	pop	r15
    3e14:	ef 90       	pop	r14
    3e16:	df 90       	pop	r13
    3e18:	cf 90       	pop	r12
    3e1a:	08 95       	ret

00003e1c <_ZN7TwoWire5writeEh>:
    3e1c:	cf 93       	push	r28
    3e1e:	df 93       	push	r29
    3e20:	1f 92       	push	r1
    3e22:	cd b7       	in	r28, 0x3d	; 61
    3e24:	de b7       	in	r29, 0x3e	; 62
    3e26:	69 83       	std	Y+1, r22	; 0x01
    3e28:	20 91 d6 02 	lds	r18, 0x02D6	; 0x8002d6 <_ZN7TwoWire12transmittingE>
    3e2c:	22 23       	and	r18, r18
    3e2e:	d1 f0       	breq	.+52     	; 0x3e64 <_ZN7TwoWire5writeEh+0x48>
    3e30:	20 91 d7 02 	lds	r18, 0x02D7	; 0x8002d7 <_ZN7TwoWire14txBufferLengthE>
    3e34:	20 32       	cpi	r18, 0x20	; 32
    3e36:	40 f0       	brcs	.+16     	; 0x3e48 <_ZN7TwoWire5writeEh+0x2c>
    3e38:	21 e0       	ldi	r18, 0x01	; 1
    3e3a:	30 e0       	ldi	r19, 0x00	; 0
    3e3c:	fc 01       	movw	r30, r24
    3e3e:	33 83       	std	Z+3, r19	; 0x03
    3e40:	22 83       	std	Z+2, r18	; 0x02
    3e42:	80 e0       	ldi	r24, 0x00	; 0
    3e44:	90 e0       	ldi	r25, 0x00	; 0
    3e46:	15 c0       	rjmp	.+42     	; 0x3e72 <_ZN7TwoWire5writeEh+0x56>
    3e48:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <_ZN7TwoWire13txBufferIndexE>
    3e4c:	e8 2f       	mov	r30, r24
    3e4e:	f0 e0       	ldi	r31, 0x00	; 0
    3e50:	e7 52       	subi	r30, 0x27	; 39
    3e52:	fd 4f       	sbci	r31, 0xFD	; 253
    3e54:	99 81       	ldd	r25, Y+1	; 0x01
    3e56:	90 83       	st	Z, r25
    3e58:	8f 5f       	subi	r24, 0xFF	; 255
    3e5a:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <_ZN7TwoWire13txBufferIndexE>
    3e5e:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <_ZN7TwoWire14txBufferLengthE>
    3e62:	05 c0       	rjmp	.+10     	; 0x3e6e <_ZN7TwoWire5writeEh+0x52>
    3e64:	61 e0       	ldi	r22, 0x01	; 1
    3e66:	ce 01       	movw	r24, r28
    3e68:	01 96       	adiw	r24, 0x01	; 1
    3e6a:	0e 94 16 20 	call	0x402c	; 0x402c <twi_transmit>
    3e6e:	81 e0       	ldi	r24, 0x01	; 1
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	0f 90       	pop	r0
    3e74:	df 91       	pop	r29
    3e76:	cf 91       	pop	r28
    3e78:	08 95       	ret

00003e7a <_ZN7TwoWireC1Ev>:
    3e7a:	fc 01       	movw	r30, r24
    3e7c:	13 82       	std	Z+3, r1	; 0x03
    3e7e:	12 82       	std	Z+2, r1	; 0x02
    3e80:	88 ee       	ldi	r24, 0xE8	; 232
    3e82:	93 e0       	ldi	r25, 0x03	; 3
    3e84:	a0 e0       	ldi	r26, 0x00	; 0
    3e86:	b0 e0       	ldi	r27, 0x00	; 0
    3e88:	84 83       	std	Z+4, r24	; 0x04
    3e8a:	95 83       	std	Z+5, r25	; 0x05
    3e8c:	a6 83       	std	Z+6, r26	; 0x06
    3e8e:	b7 83       	std	Z+7, r27	; 0x07
    3e90:	84 e6       	ldi	r24, 0x64	; 100
    3e92:	91 e0       	ldi	r25, 0x01	; 1
    3e94:	91 83       	std	Z+1, r25	; 0x01
    3e96:	80 83       	st	Z, r24
    3e98:	08 95       	ret

00003e9a <_ZN7TwoWire5beginEv>:
    3e9a:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <_ZN7TwoWire13rxBufferIndexE>
    3e9e:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <_ZN7TwoWire14rxBufferLengthE>
    3ea2:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <_ZN7TwoWire13txBufferIndexE>
    3ea6:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <_ZN7TwoWire14txBufferLengthE>
    3eaa:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <twi_init>
    3eae:	85 ed       	ldi	r24, 0xD5	; 213
    3eb0:	9e e1       	ldi	r25, 0x1E	; 30
    3eb2:	0e 94 43 20 	call	0x4086	; 0x4086 <twi_attachSlaveTxEvent>
    3eb6:	8b ea       	ldi	r24, 0xAB	; 171
    3eb8:	9e e1       	ldi	r25, 0x1E	; 30
    3eba:	0c 94 3e 20 	jmp	0x407c	; 0x407c <twi_attachSlaveRxEvent>

00003ebe <_ZN7TwoWire17beginTransmissionEh>:
    3ebe:	81 e0       	ldi	r24, 0x01	; 1
    3ec0:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <_ZN7TwoWire12transmittingE>
    3ec4:	60 93 f9 02 	sts	0x02F9, r22	; 0x8002f9 <_ZN7TwoWire9txAddressE>
    3ec8:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <_ZN7TwoWire13txBufferIndexE>
    3ecc:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <_ZN7TwoWire14txBufferLengthE>
    3ed0:	08 95       	ret

00003ed2 <_ZN7TwoWire15endTransmissionEh>:
    3ed2:	0f 93       	push	r16
    3ed4:	06 2f       	mov	r16, r22
    3ed6:	21 e0       	ldi	r18, 0x01	; 1
    3ed8:	40 91 d7 02 	lds	r20, 0x02D7	; 0x8002d7 <_ZN7TwoWire14txBufferLengthE>
    3edc:	69 ed       	ldi	r22, 0xD9	; 217
    3ede:	72 e0       	ldi	r23, 0x02	; 2
    3ee0:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <_ZN7TwoWire9txAddressE>
    3ee4:	0e 94 4d 21 	call	0x429a	; 0x429a <twi_writeTo>
    3ee8:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <_ZN7TwoWire13txBufferIndexE>
    3eec:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <_ZN7TwoWire14txBufferLengthE>
    3ef0:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <_ZN7TwoWire12transmittingE>
    3ef4:	0f 91       	pop	r16
    3ef6:	08 95       	ret

00003ef8 <_ZN7TwoWire11requestFromEhhmhh>:
    3ef8:	4f 92       	push	r4
    3efa:	5f 92       	push	r5
    3efc:	6f 92       	push	r6
    3efe:	7f 92       	push	r7
    3f00:	af 92       	push	r10
    3f02:	bf 92       	push	r11
    3f04:	cf 92       	push	r12
    3f06:	ef 92       	push	r14
    3f08:	ff 92       	push	r15
    3f0a:	0f 93       	push	r16
    3f0c:	1f 93       	push	r17
    3f0e:	cf 93       	push	r28
    3f10:	df 93       	push	r29
    3f12:	5c 01       	movw	r10, r24
    3f14:	f6 2e       	mov	r15, r22
    3f16:	d4 2f       	mov	r29, r20
    3f18:	28 01       	movw	r4, r16
    3f1a:	39 01       	movw	r6, r18
    3f1c:	ee 20       	and	r14, r14
    3f1e:	21 f1       	breq	.+72     	; 0x3f68 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    3f20:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <_ZN7TwoWire17beginTransmissionEh>
    3f24:	ce 2d       	mov	r28, r14
    3f26:	c4 30       	cpi	r28, 0x04	; 4
    3f28:	08 f0       	brcs	.+2      	; 0x3f2c <_ZN7TwoWire11requestFromEhhmhh+0x34>
    3f2a:	c3 e0       	ldi	r28, 0x03	; 3
    3f2c:	c1 50       	subi	r28, 0x01	; 1
    3f2e:	c0 f0       	brcs	.+48     	; 0x3f60 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    3f30:	28 e0       	ldi	r18, 0x08	; 8
    3f32:	c2 9f       	mul	r28, r18
    3f34:	c0 01       	movw	r24, r0
    3f36:	11 24       	eor	r1, r1
    3f38:	a3 01       	movw	r20, r6
    3f3a:	92 01       	movw	r18, r4
    3f3c:	04 c0       	rjmp	.+8      	; 0x3f46 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    3f3e:	56 95       	lsr	r21
    3f40:	47 95       	ror	r20
    3f42:	37 95       	ror	r19
    3f44:	27 95       	ror	r18
    3f46:	8a 95       	dec	r24
    3f48:	d2 f7       	brpl	.-12     	; 0x3f3e <_ZN7TwoWire11requestFromEhhmhh+0x46>
    3f4a:	ca 01       	movw	r24, r20
    3f4c:	b9 01       	movw	r22, r18
    3f4e:	d5 01       	movw	r26, r10
    3f50:	ed 91       	ld	r30, X+
    3f52:	fc 91       	ld	r31, X
    3f54:	01 90       	ld	r0, Z+
    3f56:	f0 81       	ld	r31, Z
    3f58:	e0 2d       	mov	r30, r0
    3f5a:	c5 01       	movw	r24, r10
    3f5c:	09 95       	icall
    3f5e:	e6 cf       	rjmp	.-52     	; 0x3f2c <_ZN7TwoWire11requestFromEhhmhh+0x34>
    3f60:	60 e0       	ldi	r22, 0x00	; 0
    3f62:	c5 01       	movw	r24, r10
    3f64:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <_ZN7TwoWire15endTransmissionEh>
    3f68:	4d 2f       	mov	r20, r29
    3f6a:	d1 32       	cpi	r29, 0x21	; 33
    3f6c:	08 f0       	brcs	.+2      	; 0x3f70 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    3f6e:	40 e2       	ldi	r20, 0x20	; 32
    3f70:	2c 2d       	mov	r18, r12
    3f72:	6c ef       	ldi	r22, 0xFC	; 252
    3f74:	72 e0       	ldi	r23, 0x02	; 2
    3f76:	8f 2d       	mov	r24, r15
    3f78:	0e 94 64 20 	call	0x40c8	; 0x40c8 <twi_readFrom>
    3f7c:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <_ZN7TwoWire13rxBufferIndexE>
    3f80:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <_ZN7TwoWire14rxBufferLengthE>
    3f84:	df 91       	pop	r29
    3f86:	cf 91       	pop	r28
    3f88:	1f 91       	pop	r17
    3f8a:	0f 91       	pop	r16
    3f8c:	ff 90       	pop	r15
    3f8e:	ef 90       	pop	r14
    3f90:	cf 90       	pop	r12
    3f92:	bf 90       	pop	r11
    3f94:	af 90       	pop	r10
    3f96:	7f 90       	pop	r7
    3f98:	6f 90       	pop	r6
    3f9a:	5f 90       	pop	r5
    3f9c:	4f 90       	pop	r4
    3f9e:	08 95       	ret

00003fa0 <_ZN7TwoWire11requestFromEhhh>:
    3fa0:	cf 92       	push	r12
    3fa2:	ef 92       	push	r14
    3fa4:	0f 93       	push	r16
    3fa6:	1f 93       	push	r17
    3fa8:	c2 2e       	mov	r12, r18
    3faa:	e1 2c       	mov	r14, r1
    3fac:	00 e0       	ldi	r16, 0x00	; 0
    3fae:	10 e0       	ldi	r17, 0x00	; 0
    3fb0:	98 01       	movw	r18, r16
    3fb2:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <_ZN7TwoWire11requestFromEhhmhh>
    3fb6:	1f 91       	pop	r17
    3fb8:	0f 91       	pop	r16
    3fba:	ef 90       	pop	r14
    3fbc:	cf 90       	pop	r12
    3fbe:	08 95       	ret

00003fc0 <_ZN7TwoWire11requestFromEhh>:
    3fc0:	21 e0       	ldi	r18, 0x01	; 1
    3fc2:	0c 94 d0 1f 	jmp	0x3fa0	; 0x3fa0 <_ZN7TwoWire11requestFromEhhh>

00003fc6 <_ZN7TwoWire15endTransmissionEv>:
    3fc6:	61 e0       	ldi	r22, 0x01	; 1
    3fc8:	0c 94 69 1f 	jmp	0x3ed2	; 0x3ed2 <_ZN7TwoWire15endTransmissionEh>

00003fcc <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3fcc:	86 ec       	ldi	r24, 0xC6	; 198
    3fce:	92 e0       	ldi	r25, 0x02	; 2
    3fd0:	0c 94 3d 1f 	jmp	0x3e7a	; 0x3e7a <_ZN7TwoWireC1Ev>

00003fd4 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3fd4:	08 95       	ret

00003fd6 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    3fd6:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <twi_state>
    3fda:	81 e0       	ldi	r24, 0x01	; 1
    3fdc:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <twi_sendStop>
    3fe0:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <twi_inRepStart>
    3fe4:	61 e0       	ldi	r22, 0x01	; 1
    3fe6:	82 e1       	ldi	r24, 0x12	; 18
    3fe8:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <digitalWrite>
    3fec:	61 e0       	ldi	r22, 0x01	; 1
    3fee:	83 e1       	ldi	r24, 0x13	; 19
    3ff0:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <digitalWrite>
    3ff4:	e9 eb       	ldi	r30, 0xB9	; 185
    3ff6:	f0 e0       	ldi	r31, 0x00	; 0
    3ff8:	80 81       	ld	r24, Z
    3ffa:	8e 7f       	andi	r24, 0xFE	; 254
    3ffc:	80 83       	st	Z, r24
    3ffe:	80 81       	ld	r24, Z
    4000:	8d 7f       	andi	r24, 0xFD	; 253
    4002:	80 83       	st	Z, r24
    4004:	88 e4       	ldi	r24, 0x48	; 72
    4006:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    400a:	85 e4       	ldi	r24, 0x45	; 69
    400c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4010:	08 95       	ret

00004012 <twi_disable>:
    4012:	ec eb       	ldi	r30, 0xBC	; 188
    4014:	f0 e0       	ldi	r31, 0x00	; 0
    4016:	80 81       	ld	r24, Z
    4018:	8a 7b       	andi	r24, 0xBA	; 186
    401a:	80 83       	st	Z, r24
    401c:	60 e0       	ldi	r22, 0x00	; 0
    401e:	82 e1       	ldi	r24, 0x12	; 18
    4020:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <digitalWrite>
    4024:	60 e0       	ldi	r22, 0x00	; 0
    4026:	83 e1       	ldi	r24, 0x13	; 19
    4028:	0c 94 39 1d 	jmp	0x3a72	; 0x3a72 <digitalWrite>

0000402c <twi_transmit>:
    402c:	40 91 3e 03 	lds	r20, 0x033E	; 0x80033e <twi_txBufferLength>
    4030:	26 2f       	mov	r18, r22
    4032:	30 e0       	ldi	r19, 0x00	; 0
    4034:	24 0f       	add	r18, r20
    4036:	31 1d       	adc	r19, r1
    4038:	21 32       	cpi	r18, 0x21	; 33
    403a:	31 05       	cpc	r19, r1
    403c:	dc f4       	brge	.+54     	; 0x4074 <twi_transmit+0x48>
    403e:	20 91 8f 03 	lds	r18, 0x038F	; 0x80038f <twi_state>
    4042:	24 30       	cpi	r18, 0x04	; 4
    4044:	c9 f4       	brne	.+50     	; 0x4078 <twi_transmit+0x4c>
    4046:	fc 01       	movw	r30, r24
    4048:	80 e0       	ldi	r24, 0x00	; 0
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	86 17       	cp	r24, r22
    404e:	58 f4       	brcc	.+22     	; 0x4066 <twi_transmit+0x3a>
    4050:	30 91 3e 03 	lds	r19, 0x033E	; 0x80033e <twi_txBufferLength>
    4054:	21 91       	ld	r18, Z+
    4056:	dc 01       	movw	r26, r24
    4058:	a0 5c       	subi	r26, 0xC0	; 192
    405a:	bc 4f       	sbci	r27, 0xFC	; 252
    405c:	a3 0f       	add	r26, r19
    405e:	b1 1d       	adc	r27, r1
    4060:	2c 93       	st	X, r18
    4062:	01 96       	adiw	r24, 0x01	; 1
    4064:	f3 cf       	rjmp	.-26     	; 0x404c <twi_transmit+0x20>
    4066:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <twi_txBufferLength>
    406a:	68 0f       	add	r22, r24
    406c:	60 93 3e 03 	sts	0x033E, r22	; 0x80033e <twi_txBufferLength>
    4070:	80 e0       	ldi	r24, 0x00	; 0
    4072:	08 95       	ret
    4074:	81 e0       	ldi	r24, 0x01	; 1
    4076:	08 95       	ret
    4078:	82 e0       	ldi	r24, 0x02	; 2
    407a:	08 95       	ret

0000407c <twi_attachSlaveRxEvent>:
    407c:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <twi_onSlaveReceive+0x1>
    4080:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <twi_onSlaveReceive>
    4084:	08 95       	ret

00004086 <twi_attachSlaveTxEvent>:
    4086:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <twi_onSlaveTransmit+0x1>
    408a:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <twi_onSlaveTransmit>
    408e:	08 95       	ret

00004090 <twi_releaseBus>:
    4090:	85 ec       	ldi	r24, 0xC5	; 197
    4092:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4096:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <twi_state>
    409a:	08 95       	ret

0000409c <twi_handleTimeout>:
    409c:	cf 93       	push	r28
    409e:	df 93       	push	r29
    40a0:	91 e0       	ldi	r25, 0x01	; 1
    40a2:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <twi_timed_out_flag>
    40a6:	88 23       	and	r24, r24
    40a8:	61 f0       	breq	.+24     	; 0x40c2 <twi_handleTimeout+0x26>
    40aa:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    40ae:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    40b2:	0e 94 09 20 	call	0x4012	; 0x4012 <twi_disable>
    40b6:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <twi_init>
    40ba:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    40be:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    40c2:	df 91       	pop	r29
    40c4:	cf 91       	pop	r28
    40c6:	08 95       	ret

000040c8 <twi_readFrom>:
    40c8:	4f 92       	push	r4
    40ca:	5f 92       	push	r5
    40cc:	6f 92       	push	r6
    40ce:	7f 92       	push	r7
    40d0:	8f 92       	push	r8
    40d2:	9f 92       	push	r9
    40d4:	af 92       	push	r10
    40d6:	bf 92       	push	r11
    40d8:	cf 92       	push	r12
    40da:	df 92       	push	r13
    40dc:	ef 92       	push	r14
    40de:	ff 92       	push	r15
    40e0:	0f 93       	push	r16
    40e2:	1f 93       	push	r17
    40e4:	cf 93       	push	r28
    40e6:	df 93       	push	r29
    40e8:	f8 2e       	mov	r15, r24
    40ea:	16 2f       	mov	r17, r22
    40ec:	07 2f       	mov	r16, r23
    40ee:	c4 2f       	mov	r28, r20
    40f0:	e2 2e       	mov	r14, r18
    40f2:	41 32       	cpi	r20, 0x21	; 33
    40f4:	08 f0       	brcs	.+2      	; 0x40f8 <twi_readFrom+0x30>
    40f6:	be c0       	rjmp	.+380    	; 0x4274 <twi_readFrom+0x1ac>
    40f8:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <micros>
    40fc:	4b 01       	movw	r8, r22
    40fe:	5c 01       	movw	r10, r24
    4100:	d0 91 8f 03 	lds	r29, 0x038F	; 0x80038f <twi_state>
    4104:	dd 23       	and	r29, r29
    4106:	31 f1       	breq	.+76     	; 0x4154 <twi_readFrom+0x8c>
    4108:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <twi_timeout_us>
    410c:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <twi_timeout_us+0x1>
    4110:	a0 91 8a 03 	lds	r26, 0x038A	; 0x80038a <twi_timeout_us+0x2>
    4114:	b0 91 8b 03 	lds	r27, 0x038B	; 0x80038b <twi_timeout_us+0x3>
    4118:	89 2b       	or	r24, r25
    411a:	8a 2b       	or	r24, r26
    411c:	8b 2b       	or	r24, r27
    411e:	81 f3       	breq	.-32     	; 0x4100 <twi_readFrom+0x38>
    4120:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <micros>
    4124:	40 90 88 03 	lds	r4, 0x0388	; 0x800388 <twi_timeout_us>
    4128:	50 90 89 03 	lds	r5, 0x0389	; 0x800389 <twi_timeout_us+0x1>
    412c:	60 90 8a 03 	lds	r6, 0x038A	; 0x80038a <twi_timeout_us+0x2>
    4130:	70 90 8b 03 	lds	r7, 0x038B	; 0x80038b <twi_timeout_us+0x3>
    4134:	dc 01       	movw	r26, r24
    4136:	cb 01       	movw	r24, r22
    4138:	88 19       	sub	r24, r8
    413a:	99 09       	sbc	r25, r9
    413c:	aa 09       	sbc	r26, r10
    413e:	bb 09       	sbc	r27, r11
    4140:	48 16       	cp	r4, r24
    4142:	59 06       	cpc	r5, r25
    4144:	6a 06       	cpc	r6, r26
    4146:	7b 06       	cpc	r7, r27
    4148:	d8 f6       	brcc	.-74     	; 0x4100 <twi_readFrom+0x38>
    414a:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <twi_do_reset_on_timeout>
    414e:	0e 94 4e 20 	call	0x409c	; 0x409c <twi_handleTimeout>
    4152:	90 c0       	rjmp	.+288    	; 0x4274 <twi_readFrom+0x1ac>
    4154:	81 e0       	ldi	r24, 0x01	; 1
    4156:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <twi_state>
    415a:	e0 92 8d 03 	sts	0x038D, r14	; 0x80038d <twi_sendStop>
    415e:	9f ef       	ldi	r25, 0xFF	; 255
    4160:	90 93 1c 03 	sts	0x031C, r25	; 0x80031c <twi_error>
    4164:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <twi_masterBufferIndex>
    4168:	9c 0f       	add	r25, r28
    416a:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <twi_masterBufferLength>
    416e:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <twi_slarw>
    4172:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <twi_slarw>
    4176:	8f 2d       	mov	r24, r15
    4178:	88 0f       	add	r24, r24
    417a:	89 2b       	or	r24, r25
    417c:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <twi_slarw>
    4180:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <twi_inRepStart>
    4184:	81 30       	cpi	r24, 0x01	; 1
    4186:	89 f5       	brne	.+98     	; 0x41ea <twi_readFrom+0x122>
    4188:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <twi_inRepStart>
    418c:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <micros>
    4190:	6b 01       	movw	r12, r22
    4192:	7c 01       	movw	r14, r24
    4194:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <twi_slarw>
    4198:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    419c:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <twi_timeout_us>
    41a0:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <twi_timeout_us+0x1>
    41a4:	a0 91 8a 03 	lds	r26, 0x038A	; 0x80038a <twi_timeout_us+0x2>
    41a8:	b0 91 8b 03 	lds	r27, 0x038B	; 0x80038b <twi_timeout_us+0x3>
    41ac:	89 2b       	or	r24, r25
    41ae:	8a 2b       	or	r24, r26
    41b0:	8b 2b       	or	r24, r27
    41b2:	a9 f0       	breq	.+42     	; 0x41de <twi_readFrom+0x116>
    41b4:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <micros>
    41b8:	80 90 88 03 	lds	r8, 0x0388	; 0x800388 <twi_timeout_us>
    41bc:	90 90 89 03 	lds	r9, 0x0389	; 0x800389 <twi_timeout_us+0x1>
    41c0:	a0 90 8a 03 	lds	r10, 0x038A	; 0x80038a <twi_timeout_us+0x2>
    41c4:	b0 90 8b 03 	lds	r11, 0x038B	; 0x80038b <twi_timeout_us+0x3>
    41c8:	dc 01       	movw	r26, r24
    41ca:	cb 01       	movw	r24, r22
    41cc:	8c 19       	sub	r24, r12
    41ce:	9d 09       	sbc	r25, r13
    41d0:	ae 09       	sbc	r26, r14
    41d2:	bf 09       	sbc	r27, r15
    41d4:	88 16       	cp	r8, r24
    41d6:	99 06       	cpc	r9, r25
    41d8:	aa 06       	cpc	r10, r26
    41da:	bb 06       	cpc	r11, r27
    41dc:	90 f1       	brcs	.+100    	; 0x4242 <twi_readFrom+0x17a>
    41de:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    41e2:	83 fd       	sbrc	r24, 3
    41e4:	d7 cf       	rjmp	.-82     	; 0x4194 <twi_readFrom+0xcc>
    41e6:	85 ec       	ldi	r24, 0xC5	; 197
    41e8:	01 c0       	rjmp	.+2      	; 0x41ec <twi_readFrom+0x124>
    41ea:	85 ee       	ldi	r24, 0xE5	; 229
    41ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    41f0:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <micros>
    41f4:	6b 01       	movw	r12, r22
    41f6:	7c 01       	movw	r14, r24
    41f8:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <twi_state>
    41fc:	81 30       	cpi	r24, 0x01	; 1
    41fe:	31 f5       	brne	.+76     	; 0x424c <twi_readFrom+0x184>
    4200:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <twi_timeout_us>
    4204:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <twi_timeout_us+0x1>
    4208:	a0 91 8a 03 	lds	r26, 0x038A	; 0x80038a <twi_timeout_us+0x2>
    420c:	b0 91 8b 03 	lds	r27, 0x038B	; 0x80038b <twi_timeout_us+0x3>
    4210:	89 2b       	or	r24, r25
    4212:	8a 2b       	or	r24, r26
    4214:	8b 2b       	or	r24, r27
    4216:	81 f3       	breq	.-32     	; 0x41f8 <twi_readFrom+0x130>
    4218:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <micros>
    421c:	80 90 88 03 	lds	r8, 0x0388	; 0x800388 <twi_timeout_us>
    4220:	90 90 89 03 	lds	r9, 0x0389	; 0x800389 <twi_timeout_us+0x1>
    4224:	a0 90 8a 03 	lds	r10, 0x038A	; 0x80038a <twi_timeout_us+0x2>
    4228:	b0 90 8b 03 	lds	r11, 0x038B	; 0x80038b <twi_timeout_us+0x3>
    422c:	dc 01       	movw	r26, r24
    422e:	cb 01       	movw	r24, r22
    4230:	8c 19       	sub	r24, r12
    4232:	9d 09       	sbc	r25, r13
    4234:	ae 09       	sbc	r26, r14
    4236:	bf 09       	sbc	r27, r15
    4238:	88 16       	cp	r8, r24
    423a:	99 06       	cpc	r9, r25
    423c:	aa 06       	cpc	r10, r26
    423e:	bb 06       	cpc	r11, r27
    4240:	d8 f6       	brcc	.-74     	; 0x41f8 <twi_readFrom+0x130>
    4242:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <twi_do_reset_on_timeout>
    4246:	0e 94 4e 20 	call	0x409c	; 0x409c <twi_handleTimeout>
    424a:	15 c0       	rjmp	.+42     	; 0x4276 <twi_readFrom+0x1ae>
    424c:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <twi_masterBufferIndex>
    4250:	8c 17       	cp	r24, r28
    4252:	10 f4       	brcc	.+4      	; 0x4258 <twi_readFrom+0x190>
    4254:	c0 91 61 03 	lds	r28, 0x0361	; 0x800361 <twi_masterBufferIndex>
    4258:	a2 e6       	ldi	r26, 0x62	; 98
    425a:	b3 e0       	ldi	r27, 0x03	; 3
    425c:	91 2f       	mov	r25, r17
    425e:	e1 2f       	mov	r30, r17
    4260:	f0 2f       	mov	r31, r16
    4262:	8e 2f       	mov	r24, r30
    4264:	89 1b       	sub	r24, r25
    4266:	8c 17       	cp	r24, r28
    4268:	18 f4       	brcc	.+6      	; 0x4270 <twi_readFrom+0x1a8>
    426a:	8d 91       	ld	r24, X+
    426c:	81 93       	st	Z+, r24
    426e:	f9 cf       	rjmp	.-14     	; 0x4262 <twi_readFrom+0x19a>
    4270:	dc 2f       	mov	r29, r28
    4272:	01 c0       	rjmp	.+2      	; 0x4276 <twi_readFrom+0x1ae>
    4274:	d0 e0       	ldi	r29, 0x00	; 0
    4276:	8d 2f       	mov	r24, r29
    4278:	df 91       	pop	r29
    427a:	cf 91       	pop	r28
    427c:	1f 91       	pop	r17
    427e:	0f 91       	pop	r16
    4280:	ff 90       	pop	r15
    4282:	ef 90       	pop	r14
    4284:	df 90       	pop	r13
    4286:	cf 90       	pop	r12
    4288:	bf 90       	pop	r11
    428a:	af 90       	pop	r10
    428c:	9f 90       	pop	r9
    428e:	8f 90       	pop	r8
    4290:	7f 90       	pop	r7
    4292:	6f 90       	pop	r6
    4294:	5f 90       	pop	r5
    4296:	4f 90       	pop	r4
    4298:	08 95       	ret

0000429a <twi_writeTo>:
    429a:	4f 92       	push	r4
    429c:	5f 92       	push	r5
    429e:	6f 92       	push	r6
    42a0:	7f 92       	push	r7
    42a2:	8f 92       	push	r8
    42a4:	9f 92       	push	r9
    42a6:	af 92       	push	r10
    42a8:	bf 92       	push	r11
    42aa:	cf 92       	push	r12
    42ac:	df 92       	push	r13
    42ae:	ef 92       	push	r14
    42b0:	ff 92       	push	r15
    42b2:	0f 93       	push	r16
    42b4:	1f 93       	push	r17
    42b6:	cf 93       	push	r28
    42b8:	df 93       	push	r29
    42ba:	41 32       	cpi	r20, 0x21	; 33
    42bc:	08 f0       	brcs	.+2      	; 0x42c0 <twi_writeTo+0x26>
    42be:	c6 c0       	rjmp	.+396    	; 0x444c <twi_writeTo+0x1b2>
    42c0:	12 2f       	mov	r17, r18
    42c2:	f4 2e       	mov	r15, r20
    42c4:	d7 2e       	mov	r13, r23
    42c6:	e6 2e       	mov	r14, r22
    42c8:	d8 2f       	mov	r29, r24
    42ca:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <micros>
    42ce:	4b 01       	movw	r8, r22
    42d0:	5c 01       	movw	r10, r24
    42d2:	c0 91 8f 03 	lds	r28, 0x038F	; 0x80038f <twi_state>
    42d6:	cc 23       	and	r28, r28
    42d8:	11 f1       	breq	.+68     	; 0x431e <twi_writeTo+0x84>
    42da:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <twi_timeout_us>
    42de:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <twi_timeout_us+0x1>
    42e2:	a0 91 8a 03 	lds	r26, 0x038A	; 0x80038a <twi_timeout_us+0x2>
    42e6:	b0 91 8b 03 	lds	r27, 0x038B	; 0x80038b <twi_timeout_us+0x3>
    42ea:	89 2b       	or	r24, r25
    42ec:	8a 2b       	or	r24, r26
    42ee:	8b 2b       	or	r24, r27
    42f0:	81 f3       	breq	.-32     	; 0x42d2 <twi_writeTo+0x38>
    42f2:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <micros>
    42f6:	40 90 88 03 	lds	r4, 0x0388	; 0x800388 <twi_timeout_us>
    42fa:	50 90 89 03 	lds	r5, 0x0389	; 0x800389 <twi_timeout_us+0x1>
    42fe:	60 90 8a 03 	lds	r6, 0x038A	; 0x80038a <twi_timeout_us+0x2>
    4302:	70 90 8b 03 	lds	r7, 0x038B	; 0x80038b <twi_timeout_us+0x3>
    4306:	dc 01       	movw	r26, r24
    4308:	cb 01       	movw	r24, r22
    430a:	88 19       	sub	r24, r8
    430c:	99 09       	sbc	r25, r9
    430e:	aa 09       	sbc	r26, r10
    4310:	bb 09       	sbc	r27, r11
    4312:	48 16       	cp	r4, r24
    4314:	59 06       	cpc	r5, r25
    4316:	6a 06       	cpc	r6, r26
    4318:	7b 06       	cpc	r7, r27
    431a:	d8 f6       	brcc	.-74     	; 0x42d2 <twi_writeTo+0x38>
    431c:	83 c0       	rjmp	.+262    	; 0x4424 <twi_writeTo+0x18a>
    431e:	82 e0       	ldi	r24, 0x02	; 2
    4320:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <twi_state>
    4324:	00 93 8d 03 	sts	0x038D, r16	; 0x80038d <twi_sendStop>
    4328:	8f ef       	ldi	r24, 0xFF	; 255
    432a:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <twi_error>
    432e:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <twi_masterBufferIndex>
    4332:	f0 92 60 03 	sts	0x0360, r15	; 0x800360 <twi_masterBufferLength>
    4336:	9e 2d       	mov	r25, r14
    4338:	a2 e6       	ldi	r26, 0x62	; 98
    433a:	b3 e0       	ldi	r27, 0x03	; 3
    433c:	ee 2d       	mov	r30, r14
    433e:	fd 2d       	mov	r31, r13
    4340:	8e 2f       	mov	r24, r30
    4342:	89 1b       	sub	r24, r25
    4344:	8f 15       	cp	r24, r15
    4346:	18 f4       	brcc	.+6      	; 0x434e <twi_writeTo+0xb4>
    4348:	81 91       	ld	r24, Z+
    434a:	8d 93       	st	X+, r24
    434c:	f9 cf       	rjmp	.-14     	; 0x4340 <twi_writeTo+0xa6>
    434e:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <twi_slarw>
    4352:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <twi_slarw>
    4356:	dd 0f       	add	r29, r29
    4358:	d9 2b       	or	r29, r25
    435a:	d0 93 8e 03 	sts	0x038E, r29	; 0x80038e <twi_slarw>
    435e:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <twi_inRepStart>
    4362:	81 30       	cpi	r24, 0x01	; 1
    4364:	89 f5       	brne	.+98     	; 0x43c8 <twi_writeTo+0x12e>
    4366:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <twi_inRepStart>
    436a:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <micros>
    436e:	6b 01       	movw	r12, r22
    4370:	7c 01       	movw	r14, r24
    4372:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <twi_slarw>
    4376:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    437a:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <twi_timeout_us>
    437e:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <twi_timeout_us+0x1>
    4382:	a0 91 8a 03 	lds	r26, 0x038A	; 0x80038a <twi_timeout_us+0x2>
    4386:	b0 91 8b 03 	lds	r27, 0x038B	; 0x80038b <twi_timeout_us+0x3>
    438a:	89 2b       	or	r24, r25
    438c:	8a 2b       	or	r24, r26
    438e:	8b 2b       	or	r24, r27
    4390:	a9 f0       	breq	.+42     	; 0x43bc <twi_writeTo+0x122>
    4392:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <micros>
    4396:	80 90 88 03 	lds	r8, 0x0388	; 0x800388 <twi_timeout_us>
    439a:	90 90 89 03 	lds	r9, 0x0389	; 0x800389 <twi_timeout_us+0x1>
    439e:	a0 90 8a 03 	lds	r10, 0x038A	; 0x80038a <twi_timeout_us+0x2>
    43a2:	b0 90 8b 03 	lds	r11, 0x038B	; 0x80038b <twi_timeout_us+0x3>
    43a6:	dc 01       	movw	r26, r24
    43a8:	cb 01       	movw	r24, r22
    43aa:	8c 19       	sub	r24, r12
    43ac:	9d 09       	sbc	r25, r13
    43ae:	ae 09       	sbc	r26, r14
    43b0:	bf 09       	sbc	r27, r15
    43b2:	88 16       	cp	r8, r24
    43b4:	99 06       	cpc	r9, r25
    43b6:	aa 06       	cpc	r10, r26
    43b8:	bb 06       	cpc	r11, r27
    43ba:	a0 f1       	brcs	.+104    	; 0x4424 <twi_writeTo+0x18a>
    43bc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    43c0:	83 fd       	sbrc	r24, 3
    43c2:	d7 cf       	rjmp	.-82     	; 0x4372 <twi_writeTo+0xd8>
    43c4:	85 ec       	ldi	r24, 0xC5	; 197
    43c6:	01 c0       	rjmp	.+2      	; 0x43ca <twi_writeTo+0x130>
    43c8:	85 ee       	ldi	r24, 0xE5	; 229
    43ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    43ce:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <micros>
    43d2:	6b 01       	movw	r12, r22
    43d4:	7c 01       	movw	r14, r24
    43d6:	11 23       	and	r17, r17
    43d8:	59 f1       	breq	.+86     	; 0x4430 <twi_writeTo+0x196>
    43da:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <twi_state>
    43de:	82 30       	cpi	r24, 0x02	; 2
    43e0:	39 f5       	brne	.+78     	; 0x4430 <twi_writeTo+0x196>
    43e2:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <twi_timeout_us>
    43e6:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <twi_timeout_us+0x1>
    43ea:	a0 91 8a 03 	lds	r26, 0x038A	; 0x80038a <twi_timeout_us+0x2>
    43ee:	b0 91 8b 03 	lds	r27, 0x038B	; 0x80038b <twi_timeout_us+0x3>
    43f2:	89 2b       	or	r24, r25
    43f4:	8a 2b       	or	r24, r26
    43f6:	8b 2b       	or	r24, r27
    43f8:	71 f3       	breq	.-36     	; 0x43d6 <twi_writeTo+0x13c>
    43fa:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <micros>
    43fe:	80 90 88 03 	lds	r8, 0x0388	; 0x800388 <twi_timeout_us>
    4402:	90 90 89 03 	lds	r9, 0x0389	; 0x800389 <twi_timeout_us+0x1>
    4406:	a0 90 8a 03 	lds	r10, 0x038A	; 0x80038a <twi_timeout_us+0x2>
    440a:	b0 90 8b 03 	lds	r11, 0x038B	; 0x80038b <twi_timeout_us+0x3>
    440e:	dc 01       	movw	r26, r24
    4410:	cb 01       	movw	r24, r22
    4412:	8c 19       	sub	r24, r12
    4414:	9d 09       	sbc	r25, r13
    4416:	ae 09       	sbc	r26, r14
    4418:	bf 09       	sbc	r27, r15
    441a:	88 16       	cp	r8, r24
    441c:	99 06       	cpc	r9, r25
    441e:	aa 06       	cpc	r10, r26
    4420:	bb 06       	cpc	r11, r27
    4422:	c8 f6       	brcc	.-78     	; 0x43d6 <twi_writeTo+0x13c>
    4424:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <twi_do_reset_on_timeout>
    4428:	0e 94 4e 20 	call	0x409c	; 0x409c <twi_handleTimeout>
    442c:	c5 e0       	ldi	r28, 0x05	; 5
    442e:	13 c0       	rjmp	.+38     	; 0x4456 <twi_writeTo+0x1bc>
    4430:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <twi_error>
    4434:	8f 3f       	cpi	r24, 0xFF	; 255
    4436:	79 f0       	breq	.+30     	; 0x4456 <twi_writeTo+0x1bc>
    4438:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <twi_error>
    443c:	80 32       	cpi	r24, 0x20	; 32
    443e:	41 f0       	breq	.+16     	; 0x4450 <twi_writeTo+0x1b6>
    4440:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <twi_error>
    4444:	80 33       	cpi	r24, 0x30	; 48
    4446:	31 f0       	breq	.+12     	; 0x4454 <twi_writeTo+0x1ba>
    4448:	c4 e0       	ldi	r28, 0x04	; 4
    444a:	05 c0       	rjmp	.+10     	; 0x4456 <twi_writeTo+0x1bc>
    444c:	c1 e0       	ldi	r28, 0x01	; 1
    444e:	03 c0       	rjmp	.+6      	; 0x4456 <twi_writeTo+0x1bc>
    4450:	c2 e0       	ldi	r28, 0x02	; 2
    4452:	01 c0       	rjmp	.+2      	; 0x4456 <twi_writeTo+0x1bc>
    4454:	c3 e0       	ldi	r28, 0x03	; 3
    4456:	8c 2f       	mov	r24, r28
    4458:	df 91       	pop	r29
    445a:	cf 91       	pop	r28
    445c:	1f 91       	pop	r17
    445e:	0f 91       	pop	r16
    4460:	ff 90       	pop	r15
    4462:	ef 90       	pop	r14
    4464:	df 90       	pop	r13
    4466:	cf 90       	pop	r12
    4468:	bf 90       	pop	r11
    446a:	af 90       	pop	r10
    446c:	9f 90       	pop	r9
    446e:	8f 90       	pop	r8
    4470:	7f 90       	pop	r7
    4472:	6f 90       	pop	r6
    4474:	5f 90       	pop	r5
    4476:	4f 90       	pop	r4
    4478:	08 95       	ret

0000447a <twi_stop>:
    447a:	85 ed       	ldi	r24, 0xD5	; 213
    447c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4480:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <twi_timeout_us>
    4484:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <twi_timeout_us+0x1>
    4488:	a0 91 8a 03 	lds	r26, 0x038A	; 0x80038a <twi_timeout_us+0x2>
    448c:	b0 91 8b 03 	lds	r27, 0x038B	; 0x80038b <twi_timeout_us+0x3>
    4490:	07 96       	adiw	r24, 0x07	; 7
    4492:	a1 1d       	adc	r26, r1
    4494:	b1 1d       	adc	r27, r1
    4496:	23 e0       	ldi	r18, 0x03	; 3
    4498:	b6 95       	lsr	r27
    449a:	a7 95       	ror	r26
    449c:	97 95       	ror	r25
    449e:	87 95       	ror	r24
    44a0:	2a 95       	dec	r18
    44a2:	d1 f7       	brne	.-12     	; 0x4498 <twi_stop+0x1e>
    44a4:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    44a8:	24 ff       	sbrs	r18, 4
    44aa:	1c c0       	rjmp	.+56     	; 0x44e4 <twi_stop+0x6a>
    44ac:	40 91 88 03 	lds	r20, 0x0388	; 0x800388 <twi_timeout_us>
    44b0:	50 91 89 03 	lds	r21, 0x0389	; 0x800389 <twi_timeout_us+0x1>
    44b4:	60 91 8a 03 	lds	r22, 0x038A	; 0x80038a <twi_timeout_us+0x2>
    44b8:	70 91 8b 03 	lds	r23, 0x038B	; 0x80038b <twi_timeout_us+0x3>
    44bc:	45 2b       	or	r20, r21
    44be:	46 2b       	or	r20, r22
    44c0:	47 2b       	or	r20, r23
    44c2:	81 f3       	breq	.-32     	; 0x44a4 <twi_stop+0x2a>
    44c4:	00 97       	sbiw	r24, 0x00	; 0
    44c6:	a1 05       	cpc	r26, r1
    44c8:	b1 05       	cpc	r27, r1
    44ca:	41 f0       	breq	.+16     	; 0x44dc <twi_stop+0x62>
    44cc:	25 e3       	ldi	r18, 0x35	; 53
    44ce:	2a 95       	dec	r18
    44d0:	f1 f7       	brne	.-4      	; 0x44ce <twi_stop+0x54>
    44d2:	00 00       	nop
    44d4:	01 97       	sbiw	r24, 0x01	; 1
    44d6:	a1 09       	sbc	r26, r1
    44d8:	b1 09       	sbc	r27, r1
    44da:	e4 cf       	rjmp	.-56     	; 0x44a4 <twi_stop+0x2a>
    44dc:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <twi_do_reset_on_timeout>
    44e0:	0c 94 4e 20 	jmp	0x409c	; 0x409c <twi_handleTimeout>
    44e4:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <twi_state>
    44e8:	08 95       	ret

000044ea <__vector_24>:

ISR(TWI_vect)
{
    44ea:	1f 92       	push	r1
    44ec:	0f 92       	push	r0
    44ee:	0f b6       	in	r0, 0x3f	; 63
    44f0:	0f 92       	push	r0
    44f2:	11 24       	eor	r1, r1
    44f4:	2f 93       	push	r18
    44f6:	3f 93       	push	r19
    44f8:	4f 93       	push	r20
    44fa:	5f 93       	push	r21
    44fc:	6f 93       	push	r22
    44fe:	7f 93       	push	r23
    4500:	8f 93       	push	r24
    4502:	9f 93       	push	r25
    4504:	af 93       	push	r26
    4506:	bf 93       	push	r27
    4508:	ef 93       	push	r30
    450a:	ff 93       	push	r31
  switch(TW_STATUS){
    450c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    4510:	88 7f       	andi	r24, 0xF8	; 248
    4512:	80 36       	cpi	r24, 0x60	; 96
    4514:	09 f4       	brne	.+2      	; 0x4518 <__vector_24+0x2e>
    4516:	9e c0       	rjmp	.+316    	; 0x4654 <__vector_24+0x16a>
    4518:	78 f5       	brcc	.+94     	; 0x4578 <__vector_24+0x8e>
    451a:	88 32       	cpi	r24, 0x28	; 40
    451c:	09 f4       	brne	.+2      	; 0x4520 <__vector_24+0x36>
    451e:	5d c0       	rjmp	.+186    	; 0x45da <__vector_24+0xf0>
    4520:	90 f4       	brcc	.+36     	; 0x4546 <__vector_24+0x5c>
    4522:	80 31       	cpi	r24, 0x10	; 16
    4524:	09 f4       	brne	.+2      	; 0x4528 <__vector_24+0x3e>
    4526:	56 c0       	rjmp	.+172    	; 0x45d4 <__vector_24+0xea>
    4528:	38 f4       	brcc	.+14     	; 0x4538 <__vector_24+0x4e>
    452a:	88 23       	and	r24, r24
    452c:	09 f4       	brne	.+2      	; 0x4530 <__vector_24+0x46>
    452e:	f5 c0       	rjmp	.+490    	; 0x471a <__vector_24+0x230>
    4530:	88 30       	cpi	r24, 0x08	; 8
    4532:	09 f4       	brne	.+2      	; 0x4536 <__vector_24+0x4c>
    4534:	4f c0       	rjmp	.+158    	; 0x45d4 <__vector_24+0xea>
    4536:	f5 c0       	rjmp	.+490    	; 0x4722 <__vector_24+0x238>
    4538:	88 31       	cpi	r24, 0x18	; 24
    453a:	09 f4       	brne	.+2      	; 0x453e <__vector_24+0x54>
    453c:	4e c0       	rjmp	.+156    	; 0x45da <__vector_24+0xf0>
    453e:	80 32       	cpi	r24, 0x20	; 32
    4540:	09 f4       	brne	.+2      	; 0x4544 <__vector_24+0x5a>
    4542:	5f c0       	rjmp	.+190    	; 0x4602 <__vector_24+0x118>
    4544:	ee c0       	rjmp	.+476    	; 0x4722 <__vector_24+0x238>
    4546:	80 34       	cpi	r24, 0x40	; 64
    4548:	09 f4       	brne	.+2      	; 0x454c <__vector_24+0x62>
    454a:	6a c0       	rjmp	.+212    	; 0x4620 <__vector_24+0x136>
    454c:	58 f4       	brcc	.+22     	; 0x4564 <__vector_24+0x7a>
    454e:	80 33       	cpi	r24, 0x30	; 48
    4550:	09 f4       	brne	.+2      	; 0x4554 <__vector_24+0x6a>
    4552:	57 c0       	rjmp	.+174    	; 0x4602 <__vector_24+0x118>
    4554:	88 33       	cpi	r24, 0x38	; 56
    4556:	09 f0       	breq	.+2      	; 0x455a <__vector_24+0x70>
    4558:	e4 c0       	rjmp	.+456    	; 0x4722 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    455a:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <twi_error>
      twi_releaseBus();
    455e:	0e 94 48 20 	call	0x4090	; 0x4090 <twi_releaseBus>
      break;
    4562:	df c0       	rjmp	.+446    	; 0x4722 <__vector_24+0x238>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4564:	80 35       	cpi	r24, 0x50	; 80
    4566:	09 f4       	brne	.+2      	; 0x456a <__vector_24+0x80>
    4568:	4f c0       	rjmp	.+158    	; 0x4608 <__vector_24+0x11e>
    456a:	88 35       	cpi	r24, 0x58	; 88
    456c:	09 f4       	brne	.+2      	; 0x4570 <__vector_24+0x86>
    456e:	5d c0       	rjmp	.+186    	; 0x462a <__vector_24+0x140>
    4570:	88 34       	cpi	r24, 0x48	; 72
    4572:	09 f0       	breq	.+2      	; 0x4576 <__vector_24+0x8c>
    4574:	d6 c0       	rjmp	.+428    	; 0x4722 <__vector_24+0x238>
    4576:	d3 c0       	rjmp	.+422    	; 0x471e <__vector_24+0x234>
    4578:	88 39       	cpi	r24, 0x98	; 152
    457a:	09 f4       	brne	.+2      	; 0x457e <__vector_24+0x94>
    457c:	c4 c0       	rjmp	.+392    	; 0x4706 <__vector_24+0x21c>
    457e:	a8 f4       	brcc	.+42     	; 0x45aa <__vector_24+0xc0>
    4580:	88 37       	cpi	r24, 0x78	; 120
    4582:	09 f4       	brne	.+2      	; 0x4586 <__vector_24+0x9c>
    4584:	67 c0       	rjmp	.+206    	; 0x4654 <__vector_24+0x16a>
    4586:	38 f4       	brcc	.+14     	; 0x4596 <__vector_24+0xac>
    4588:	88 36       	cpi	r24, 0x68	; 104
    458a:	09 f4       	brne	.+2      	; 0x458e <__vector_24+0xa4>
    458c:	63 c0       	rjmp	.+198    	; 0x4654 <__vector_24+0x16a>
    458e:	80 37       	cpi	r24, 0x70	; 112
    4590:	09 f4       	brne	.+2      	; 0x4594 <__vector_24+0xaa>
    4592:	60 c0       	rjmp	.+192    	; 0x4654 <__vector_24+0x16a>
    4594:	c6 c0       	rjmp	.+396    	; 0x4722 <__vector_24+0x238>
    4596:	88 38       	cpi	r24, 0x88	; 136
    4598:	09 f4       	brne	.+2      	; 0x459c <__vector_24+0xb2>
    459a:	b5 c0       	rjmp	.+362    	; 0x4706 <__vector_24+0x21c>
    459c:	80 39       	cpi	r24, 0x90	; 144
    459e:	09 f4       	brne	.+2      	; 0x45a2 <__vector_24+0xb8>
    45a0:	5f c0       	rjmp	.+190    	; 0x4660 <__vector_24+0x176>
    45a2:	80 38       	cpi	r24, 0x80	; 128
    45a4:	09 f0       	breq	.+2      	; 0x45a8 <__vector_24+0xbe>
    45a6:	bd c0       	rjmp	.+378    	; 0x4722 <__vector_24+0x238>
    45a8:	5b c0       	rjmp	.+182    	; 0x4660 <__vector_24+0x176>
    45aa:	80 3b       	cpi	r24, 0xB0	; 176
    45ac:	09 f4       	brne	.+2      	; 0x45b0 <__vector_24+0xc6>
    45ae:	83 c0       	rjmp	.+262    	; 0x46b6 <__vector_24+0x1cc>
    45b0:	38 f4       	brcc	.+14     	; 0x45c0 <__vector_24+0xd6>
    45b2:	80 3a       	cpi	r24, 0xA0	; 160
    45b4:	09 f4       	brne	.+2      	; 0x45b8 <__vector_24+0xce>
    45b6:	66 c0       	rjmp	.+204    	; 0x4684 <__vector_24+0x19a>
    45b8:	88 3a       	cpi	r24, 0xA8	; 168
    45ba:	09 f4       	brne	.+2      	; 0x45be <__vector_24+0xd4>
    45bc:	7c c0       	rjmp	.+248    	; 0x46b6 <__vector_24+0x1cc>
    45be:	b1 c0       	rjmp	.+354    	; 0x4722 <__vector_24+0x238>
    45c0:	80 3c       	cpi	r24, 0xC0	; 192
    45c2:	09 f4       	brne	.+2      	; 0x45c6 <__vector_24+0xdc>
    45c4:	a4 c0       	rjmp	.+328    	; 0x470e <__vector_24+0x224>
    45c6:	88 3c       	cpi	r24, 0xC8	; 200
    45c8:	09 f4       	brne	.+2      	; 0x45cc <__vector_24+0xe2>
    45ca:	a1 c0       	rjmp	.+322    	; 0x470e <__vector_24+0x224>
    45cc:	88 3b       	cpi	r24, 0xB8	; 184
    45ce:	09 f4       	brne	.+2      	; 0x45d2 <__vector_24+0xe8>
    45d0:	87 c0       	rjmp	.+270    	; 0x46e0 <__vector_24+0x1f6>
    45d2:	a7 c0       	rjmp	.+334    	; 0x4722 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    45d4:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <twi_slarw>
    45d8:	10 c0       	rjmp	.+32     	; 0x45fa <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    45da:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <twi_masterBufferIndex>
    45de:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <twi_masterBufferLength>
    45e2:	98 17       	cp	r25, r24
    45e4:	70 f5       	brcc	.+92     	; 0x4642 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    45e6:	e0 91 61 03 	lds	r30, 0x0361	; 0x800361 <twi_masterBufferIndex>
    45ea:	81 e0       	ldi	r24, 0x01	; 1
    45ec:	8e 0f       	add	r24, r30
    45ee:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <twi_masterBufferIndex>
    45f2:	f0 e0       	ldi	r31, 0x00	; 0
    45f4:	ee 59       	subi	r30, 0x9E	; 158
    45f6:	fc 4f       	sbci	r31, 0xFC	; 252
    45f8:	80 81       	ld	r24, Z
    45fa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    45fe:	85 ec       	ldi	r24, 0xC5	; 197
    4600:	83 c0       	rjmp	.+262    	; 0x4708 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4602:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <twi_error>
    4606:	8b c0       	rjmp	.+278    	; 0x471e <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4608:	e0 91 61 03 	lds	r30, 0x0361	; 0x800361 <twi_masterBufferIndex>
    460c:	81 e0       	ldi	r24, 0x01	; 1
    460e:	8e 0f       	add	r24, r30
    4610:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <twi_masterBufferIndex>
    4614:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    4618:	f0 e0       	ldi	r31, 0x00	; 0
    461a:	ee 59       	subi	r30, 0x9E	; 158
    461c:	fc 4f       	sbci	r31, 0xFC	; 252
    461e:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4620:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <twi_masterBufferIndex>
    4624:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <twi_masterBufferLength>
    4628:	6b c0       	rjmp	.+214    	; 0x4700 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    462a:	e0 91 61 03 	lds	r30, 0x0361	; 0x800361 <twi_masterBufferIndex>
    462e:	81 e0       	ldi	r24, 0x01	; 1
    4630:	8e 0f       	add	r24, r30
    4632:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <twi_masterBufferIndex>
    4636:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    463a:	f0 e0       	ldi	r31, 0x00	; 0
    463c:	ee 59       	subi	r30, 0x9E	; 158
    463e:	fc 4f       	sbci	r31, 0xFC	; 252
    4640:	80 83       	st	Z, r24
      if (twi_sendStop){
    4642:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <twi_sendStop>
    4646:	81 11       	cpse	r24, r1
    4648:	6a c0       	rjmp	.+212    	; 0x471e <__vector_24+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    464a:	81 e0       	ldi	r24, 0x01	; 1
    464c:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4650:	84 ea       	ldi	r24, 0xA4	; 164
    4652:	5e c0       	rjmp	.+188    	; 0x4710 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    4654:	83 e0       	ldi	r24, 0x03	; 3
    4656:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    465a:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <twi_rxBufferIndex>
    465e:	cf cf       	rjmp	.-98     	; 0x45fe <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4660:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <twi_rxBufferIndex>
    4664:	80 32       	cpi	r24, 0x20	; 32
    4666:	08 f0       	brcs	.+2      	; 0x466a <__vector_24+0x180>
    4668:	4e c0       	rjmp	.+156    	; 0x4706 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    466a:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <twi_rxBufferIndex>
    466e:	81 e0       	ldi	r24, 0x01	; 1
    4670:	8e 0f       	add	r24, r30
    4672:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <twi_rxBufferIndex>
    4676:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    467a:	f0 e0       	ldi	r31, 0x00	; 0
    467c:	e2 5e       	subi	r30, 0xE2	; 226
    467e:	fc 4f       	sbci	r31, 0xFC	; 252
    4680:	80 83       	st	Z, r24
    4682:	bd cf       	rjmp	.-134    	; 0x45fe <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    4684:	0e 94 48 20 	call	0x4090	; 0x4090 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4688:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <twi_rxBufferIndex>
    468c:	80 32       	cpi	r24, 0x20	; 32
    468e:	30 f4       	brcc	.+12     	; 0x469c <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    4690:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <twi_rxBufferIndex>
    4694:	f0 e0       	ldi	r31, 0x00	; 0
    4696:	e2 5e       	subi	r30, 0xE2	; 226
    4698:	fc 4f       	sbci	r31, 0xFC	; 252
    469a:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    469c:	60 91 1d 03 	lds	r22, 0x031D	; 0x80031d <twi_rxBufferIndex>
    46a0:	70 e0       	ldi	r23, 0x00	; 0
    46a2:	e0 91 82 03 	lds	r30, 0x0382	; 0x800382 <twi_onSlaveReceive>
    46a6:	f0 91 83 03 	lds	r31, 0x0383	; 0x800383 <twi_onSlaveReceive+0x1>
    46aa:	8e e1       	ldi	r24, 0x1E	; 30
    46ac:	93 e0       	ldi	r25, 0x03	; 3
    46ae:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    46b0:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <twi_rxBufferIndex>
      break;
    46b4:	36 c0       	rjmp	.+108    	; 0x4722 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    46b6:	84 e0       	ldi	r24, 0x04	; 4
    46b8:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    46bc:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    46c0:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    46c4:	e0 91 84 03 	lds	r30, 0x0384	; 0x800384 <twi_onSlaveTransmit>
    46c8:	f0 91 85 03 	lds	r31, 0x0385	; 0x800385 <twi_onSlaveTransmit+0x1>
    46cc:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    46ce:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <twi_txBufferLength>
    46d2:	81 11       	cpse	r24, r1
    46d4:	05 c0       	rjmp	.+10     	; 0x46e0 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    46d6:	81 e0       	ldi	r24, 0x01	; 1
    46d8:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    46dc:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    46e0:	e0 91 3f 03 	lds	r30, 0x033F	; 0x80033f <twi_txBufferIndex>
    46e4:	81 e0       	ldi	r24, 0x01	; 1
    46e6:	8e 0f       	add	r24, r30
    46e8:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <twi_txBufferIndex>
    46ec:	f0 e0       	ldi	r31, 0x00	; 0
    46ee:	e0 5c       	subi	r30, 0xC0	; 192
    46f0:	fc 4f       	sbci	r31, 0xFC	; 252
    46f2:	80 81       	ld	r24, Z
    46f4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    46f8:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <twi_txBufferIndex>
    46fc:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <twi_txBufferLength>
    4700:	98 17       	cp	r25, r24
    4702:	08 f4       	brcc	.+2      	; 0x4706 <__vector_24+0x21c>
    4704:	7c cf       	rjmp	.-264    	; 0x45fe <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4706:	85 e8       	ldi	r24, 0x85	; 133
    4708:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    470c:	0a c0       	rjmp	.+20     	; 0x4722 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    470e:	85 ec       	ldi	r24, 0xC5	; 197
    4710:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    4714:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <twi_state>
      break;
    4718:	04 c0       	rjmp	.+8      	; 0x4722 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    471a:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <twi_error>
      twi_stop();
    471e:	0e 94 3d 22 	call	0x447a	; 0x447a <twi_stop>
      break;
  }
}
    4722:	ff 91       	pop	r31
    4724:	ef 91       	pop	r30
    4726:	bf 91       	pop	r27
    4728:	af 91       	pop	r26
    472a:	9f 91       	pop	r25
    472c:	8f 91       	pop	r24
    472e:	7f 91       	pop	r23
    4730:	6f 91       	pop	r22
    4732:	5f 91       	pop	r21
    4734:	4f 91       	pop	r20
    4736:	3f 91       	pop	r19
    4738:	2f 91       	pop	r18
    473a:	0f 90       	pop	r0
    473c:	0f be       	out	0x3f, r0	; 63
    473e:	0f 90       	pop	r0
    4740:	1f 90       	pop	r1
    4742:	18 95       	reti

00004744 <__unordsf2>:
    4744:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__fp_cmp>
    4748:	88 0b       	sbc	r24, r24
    474a:	99 0b       	sbc	r25, r25
    474c:	08 95       	ret

0000474e <__udivmodsi4>:
    474e:	a1 e2       	ldi	r26, 0x21	; 33
    4750:	1a 2e       	mov	r1, r26
    4752:	aa 1b       	sub	r26, r26
    4754:	bb 1b       	sub	r27, r27
    4756:	fd 01       	movw	r30, r26
    4758:	0d c0       	rjmp	.+26     	; 0x4774 <__udivmodsi4_ep>

0000475a <__udivmodsi4_loop>:
    475a:	aa 1f       	adc	r26, r26
    475c:	bb 1f       	adc	r27, r27
    475e:	ee 1f       	adc	r30, r30
    4760:	ff 1f       	adc	r31, r31
    4762:	a2 17       	cp	r26, r18
    4764:	b3 07       	cpc	r27, r19
    4766:	e4 07       	cpc	r30, r20
    4768:	f5 07       	cpc	r31, r21
    476a:	20 f0       	brcs	.+8      	; 0x4774 <__udivmodsi4_ep>
    476c:	a2 1b       	sub	r26, r18
    476e:	b3 0b       	sbc	r27, r19
    4770:	e4 0b       	sbc	r30, r20
    4772:	f5 0b       	sbc	r31, r21

00004774 <__udivmodsi4_ep>:
    4774:	66 1f       	adc	r22, r22
    4776:	77 1f       	adc	r23, r23
    4778:	88 1f       	adc	r24, r24
    477a:	99 1f       	adc	r25, r25
    477c:	1a 94       	dec	r1
    477e:	69 f7       	brne	.-38     	; 0x475a <__udivmodsi4_loop>
    4780:	60 95       	com	r22
    4782:	70 95       	com	r23
    4784:	80 95       	com	r24
    4786:	90 95       	com	r25
    4788:	9b 01       	movw	r18, r22
    478a:	ac 01       	movw	r20, r24
    478c:	bd 01       	movw	r22, r26
    478e:	cf 01       	movw	r24, r30
    4790:	08 95       	ret

00004792 <__umulhisi3>:
    4792:	a2 9f       	mul	r26, r18
    4794:	b0 01       	movw	r22, r0
    4796:	b3 9f       	mul	r27, r19
    4798:	c0 01       	movw	r24, r0
    479a:	a3 9f       	mul	r26, r19
    479c:	70 0d       	add	r23, r0
    479e:	81 1d       	adc	r24, r1
    47a0:	11 24       	eor	r1, r1
    47a2:	91 1d       	adc	r25, r1
    47a4:	b2 9f       	mul	r27, r18
    47a6:	70 0d       	add	r23, r0
    47a8:	81 1d       	adc	r24, r1
    47aa:	11 24       	eor	r1, r1
    47ac:	91 1d       	adc	r25, r1
    47ae:	08 95       	ret

000047b0 <__muluhisi3>:
    47b0:	0e 94 c9 23 	call	0x4792	; 0x4792 <__umulhisi3>
    47b4:	a5 9f       	mul	r26, r21
    47b6:	90 0d       	add	r25, r0
    47b8:	b4 9f       	mul	r27, r20
    47ba:	90 0d       	add	r25, r0
    47bc:	a4 9f       	mul	r26, r20
    47be:	80 0d       	add	r24, r0
    47c0:	91 1d       	adc	r25, r1
    47c2:	11 24       	eor	r1, r1
    47c4:	08 95       	ret

000047c6 <__tablejump2__>:
    47c6:	ee 0f       	add	r30, r30
    47c8:	ff 1f       	adc	r31, r31
    47ca:	05 90       	lpm	r0, Z+
    47cc:	f4 91       	lpm	r31, Z
    47ce:	e0 2d       	mov	r30, r0
    47d0:	09 94       	ijmp

000047d2 <malloc>:
    47d2:	0f 93       	push	r16
    47d4:	1f 93       	push	r17
    47d6:	cf 93       	push	r28
    47d8:	df 93       	push	r29
    47da:	82 30       	cpi	r24, 0x02	; 2
    47dc:	91 05       	cpc	r25, r1
    47de:	10 f4       	brcc	.+4      	; 0x47e4 <malloc+0x12>
    47e0:	82 e0       	ldi	r24, 0x02	; 2
    47e2:	90 e0       	ldi	r25, 0x00	; 0
    47e4:	e0 91 92 03 	lds	r30, 0x0392	; 0x800392 <__flp>
    47e8:	f0 91 93 03 	lds	r31, 0x0393	; 0x800393 <__flp+0x1>
    47ec:	20 e0       	ldi	r18, 0x00	; 0
    47ee:	30 e0       	ldi	r19, 0x00	; 0
    47f0:	a0 e0       	ldi	r26, 0x00	; 0
    47f2:	b0 e0       	ldi	r27, 0x00	; 0
    47f4:	30 97       	sbiw	r30, 0x00	; 0
    47f6:	19 f1       	breq	.+70     	; 0x483e <malloc+0x6c>
    47f8:	40 81       	ld	r20, Z
    47fa:	51 81       	ldd	r21, Z+1	; 0x01
    47fc:	02 81       	ldd	r16, Z+2	; 0x02
    47fe:	13 81       	ldd	r17, Z+3	; 0x03
    4800:	48 17       	cp	r20, r24
    4802:	59 07       	cpc	r21, r25
    4804:	c8 f0       	brcs	.+50     	; 0x4838 <malloc+0x66>
    4806:	84 17       	cp	r24, r20
    4808:	95 07       	cpc	r25, r21
    480a:	69 f4       	brne	.+26     	; 0x4826 <malloc+0x54>
    480c:	10 97       	sbiw	r26, 0x00	; 0
    480e:	31 f0       	breq	.+12     	; 0x481c <malloc+0x4a>
    4810:	12 96       	adiw	r26, 0x02	; 2
    4812:	0c 93       	st	X, r16
    4814:	12 97       	sbiw	r26, 0x02	; 2
    4816:	13 96       	adiw	r26, 0x03	; 3
    4818:	1c 93       	st	X, r17
    481a:	27 c0       	rjmp	.+78     	; 0x486a <malloc+0x98>
    481c:	00 93 92 03 	sts	0x0392, r16	; 0x800392 <__flp>
    4820:	10 93 93 03 	sts	0x0393, r17	; 0x800393 <__flp+0x1>
    4824:	22 c0       	rjmp	.+68     	; 0x486a <malloc+0x98>
    4826:	21 15       	cp	r18, r1
    4828:	31 05       	cpc	r19, r1
    482a:	19 f0       	breq	.+6      	; 0x4832 <malloc+0x60>
    482c:	42 17       	cp	r20, r18
    482e:	53 07       	cpc	r21, r19
    4830:	18 f4       	brcc	.+6      	; 0x4838 <malloc+0x66>
    4832:	9a 01       	movw	r18, r20
    4834:	bd 01       	movw	r22, r26
    4836:	ef 01       	movw	r28, r30
    4838:	df 01       	movw	r26, r30
    483a:	f8 01       	movw	r30, r16
    483c:	db cf       	rjmp	.-74     	; 0x47f4 <malloc+0x22>
    483e:	21 15       	cp	r18, r1
    4840:	31 05       	cpc	r19, r1
    4842:	f9 f0       	breq	.+62     	; 0x4882 <malloc+0xb0>
    4844:	28 1b       	sub	r18, r24
    4846:	39 0b       	sbc	r19, r25
    4848:	24 30       	cpi	r18, 0x04	; 4
    484a:	31 05       	cpc	r19, r1
    484c:	80 f4       	brcc	.+32     	; 0x486e <malloc+0x9c>
    484e:	8a 81       	ldd	r24, Y+2	; 0x02
    4850:	9b 81       	ldd	r25, Y+3	; 0x03
    4852:	61 15       	cp	r22, r1
    4854:	71 05       	cpc	r23, r1
    4856:	21 f0       	breq	.+8      	; 0x4860 <malloc+0x8e>
    4858:	fb 01       	movw	r30, r22
    485a:	93 83       	std	Z+3, r25	; 0x03
    485c:	82 83       	std	Z+2, r24	; 0x02
    485e:	04 c0       	rjmp	.+8      	; 0x4868 <malloc+0x96>
    4860:	90 93 93 03 	sts	0x0393, r25	; 0x800393 <__flp+0x1>
    4864:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <__flp>
    4868:	fe 01       	movw	r30, r28
    486a:	32 96       	adiw	r30, 0x02	; 2
    486c:	44 c0       	rjmp	.+136    	; 0x48f6 <malloc+0x124>
    486e:	fe 01       	movw	r30, r28
    4870:	e2 0f       	add	r30, r18
    4872:	f3 1f       	adc	r31, r19
    4874:	81 93       	st	Z+, r24
    4876:	91 93       	st	Z+, r25
    4878:	22 50       	subi	r18, 0x02	; 2
    487a:	31 09       	sbc	r19, r1
    487c:	39 83       	std	Y+1, r19	; 0x01
    487e:	28 83       	st	Y, r18
    4880:	3a c0       	rjmp	.+116    	; 0x48f6 <malloc+0x124>
    4882:	20 91 90 03 	lds	r18, 0x0390	; 0x800390 <__brkval>
    4886:	30 91 91 03 	lds	r19, 0x0391	; 0x800391 <__brkval+0x1>
    488a:	23 2b       	or	r18, r19
    488c:	41 f4       	brne	.+16     	; 0x489e <malloc+0xcc>
    488e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    4892:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4896:	30 93 91 03 	sts	0x0391, r19	; 0x800391 <__brkval+0x1>
    489a:	20 93 90 03 	sts	0x0390, r18	; 0x800390 <__brkval>
    489e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    48a2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    48a6:	21 15       	cp	r18, r1
    48a8:	31 05       	cpc	r19, r1
    48aa:	41 f4       	brne	.+16     	; 0x48bc <malloc+0xea>
    48ac:	2d b7       	in	r18, 0x3d	; 61
    48ae:	3e b7       	in	r19, 0x3e	; 62
    48b0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    48b4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    48b8:	24 1b       	sub	r18, r20
    48ba:	35 0b       	sbc	r19, r21
    48bc:	e0 91 90 03 	lds	r30, 0x0390	; 0x800390 <__brkval>
    48c0:	f0 91 91 03 	lds	r31, 0x0391	; 0x800391 <__brkval+0x1>
    48c4:	e2 17       	cp	r30, r18
    48c6:	f3 07       	cpc	r31, r19
    48c8:	a0 f4       	brcc	.+40     	; 0x48f2 <malloc+0x120>
    48ca:	2e 1b       	sub	r18, r30
    48cc:	3f 0b       	sbc	r19, r31
    48ce:	28 17       	cp	r18, r24
    48d0:	39 07       	cpc	r19, r25
    48d2:	78 f0       	brcs	.+30     	; 0x48f2 <malloc+0x120>
    48d4:	ac 01       	movw	r20, r24
    48d6:	4e 5f       	subi	r20, 0xFE	; 254
    48d8:	5f 4f       	sbci	r21, 0xFF	; 255
    48da:	24 17       	cp	r18, r20
    48dc:	35 07       	cpc	r19, r21
    48de:	48 f0       	brcs	.+18     	; 0x48f2 <malloc+0x120>
    48e0:	4e 0f       	add	r20, r30
    48e2:	5f 1f       	adc	r21, r31
    48e4:	50 93 91 03 	sts	0x0391, r21	; 0x800391 <__brkval+0x1>
    48e8:	40 93 90 03 	sts	0x0390, r20	; 0x800390 <__brkval>
    48ec:	81 93       	st	Z+, r24
    48ee:	91 93       	st	Z+, r25
    48f0:	02 c0       	rjmp	.+4      	; 0x48f6 <malloc+0x124>
    48f2:	e0 e0       	ldi	r30, 0x00	; 0
    48f4:	f0 e0       	ldi	r31, 0x00	; 0
    48f6:	cf 01       	movw	r24, r30
    48f8:	df 91       	pop	r29
    48fa:	cf 91       	pop	r28
    48fc:	1f 91       	pop	r17
    48fe:	0f 91       	pop	r16
    4900:	08 95       	ret

00004902 <free>:
    4902:	cf 93       	push	r28
    4904:	df 93       	push	r29
    4906:	00 97       	sbiw	r24, 0x00	; 0
    4908:	09 f4       	brne	.+2      	; 0x490c <free+0xa>
    490a:	81 c0       	rjmp	.+258    	; 0x4a0e <free+0x10c>
    490c:	fc 01       	movw	r30, r24
    490e:	32 97       	sbiw	r30, 0x02	; 2
    4910:	13 82       	std	Z+3, r1	; 0x03
    4912:	12 82       	std	Z+2, r1	; 0x02
    4914:	a0 91 92 03 	lds	r26, 0x0392	; 0x800392 <__flp>
    4918:	b0 91 93 03 	lds	r27, 0x0393	; 0x800393 <__flp+0x1>
    491c:	10 97       	sbiw	r26, 0x00	; 0
    491e:	81 f4       	brne	.+32     	; 0x4940 <free+0x3e>
    4920:	20 81       	ld	r18, Z
    4922:	31 81       	ldd	r19, Z+1	; 0x01
    4924:	82 0f       	add	r24, r18
    4926:	93 1f       	adc	r25, r19
    4928:	20 91 90 03 	lds	r18, 0x0390	; 0x800390 <__brkval>
    492c:	30 91 91 03 	lds	r19, 0x0391	; 0x800391 <__brkval+0x1>
    4930:	28 17       	cp	r18, r24
    4932:	39 07       	cpc	r19, r25
    4934:	51 f5       	brne	.+84     	; 0x498a <free+0x88>
    4936:	f0 93 91 03 	sts	0x0391, r31	; 0x800391 <__brkval+0x1>
    493a:	e0 93 90 03 	sts	0x0390, r30	; 0x800390 <__brkval>
    493e:	67 c0       	rjmp	.+206    	; 0x4a0e <free+0x10c>
    4940:	ed 01       	movw	r28, r26
    4942:	20 e0       	ldi	r18, 0x00	; 0
    4944:	30 e0       	ldi	r19, 0x00	; 0
    4946:	ce 17       	cp	r28, r30
    4948:	df 07       	cpc	r29, r31
    494a:	40 f4       	brcc	.+16     	; 0x495c <free+0x5a>
    494c:	4a 81       	ldd	r20, Y+2	; 0x02
    494e:	5b 81       	ldd	r21, Y+3	; 0x03
    4950:	9e 01       	movw	r18, r28
    4952:	41 15       	cp	r20, r1
    4954:	51 05       	cpc	r21, r1
    4956:	f1 f0       	breq	.+60     	; 0x4994 <free+0x92>
    4958:	ea 01       	movw	r28, r20
    495a:	f5 cf       	rjmp	.-22     	; 0x4946 <free+0x44>
    495c:	d3 83       	std	Z+3, r29	; 0x03
    495e:	c2 83       	std	Z+2, r28	; 0x02
    4960:	40 81       	ld	r20, Z
    4962:	51 81       	ldd	r21, Z+1	; 0x01
    4964:	84 0f       	add	r24, r20
    4966:	95 1f       	adc	r25, r21
    4968:	c8 17       	cp	r28, r24
    496a:	d9 07       	cpc	r29, r25
    496c:	59 f4       	brne	.+22     	; 0x4984 <free+0x82>
    496e:	88 81       	ld	r24, Y
    4970:	99 81       	ldd	r25, Y+1	; 0x01
    4972:	84 0f       	add	r24, r20
    4974:	95 1f       	adc	r25, r21
    4976:	02 96       	adiw	r24, 0x02	; 2
    4978:	91 83       	std	Z+1, r25	; 0x01
    497a:	80 83       	st	Z, r24
    497c:	8a 81       	ldd	r24, Y+2	; 0x02
    497e:	9b 81       	ldd	r25, Y+3	; 0x03
    4980:	93 83       	std	Z+3, r25	; 0x03
    4982:	82 83       	std	Z+2, r24	; 0x02
    4984:	21 15       	cp	r18, r1
    4986:	31 05       	cpc	r19, r1
    4988:	29 f4       	brne	.+10     	; 0x4994 <free+0x92>
    498a:	f0 93 93 03 	sts	0x0393, r31	; 0x800393 <__flp+0x1>
    498e:	e0 93 92 03 	sts	0x0392, r30	; 0x800392 <__flp>
    4992:	3d c0       	rjmp	.+122    	; 0x4a0e <free+0x10c>
    4994:	e9 01       	movw	r28, r18
    4996:	fb 83       	std	Y+3, r31	; 0x03
    4998:	ea 83       	std	Y+2, r30	; 0x02
    499a:	49 91       	ld	r20, Y+
    499c:	59 91       	ld	r21, Y+
    499e:	c4 0f       	add	r28, r20
    49a0:	d5 1f       	adc	r29, r21
    49a2:	ec 17       	cp	r30, r28
    49a4:	fd 07       	cpc	r31, r29
    49a6:	61 f4       	brne	.+24     	; 0x49c0 <free+0xbe>
    49a8:	80 81       	ld	r24, Z
    49aa:	91 81       	ldd	r25, Z+1	; 0x01
    49ac:	84 0f       	add	r24, r20
    49ae:	95 1f       	adc	r25, r21
    49b0:	02 96       	adiw	r24, 0x02	; 2
    49b2:	e9 01       	movw	r28, r18
    49b4:	99 83       	std	Y+1, r25	; 0x01
    49b6:	88 83       	st	Y, r24
    49b8:	82 81       	ldd	r24, Z+2	; 0x02
    49ba:	93 81       	ldd	r25, Z+3	; 0x03
    49bc:	9b 83       	std	Y+3, r25	; 0x03
    49be:	8a 83       	std	Y+2, r24	; 0x02
    49c0:	e0 e0       	ldi	r30, 0x00	; 0
    49c2:	f0 e0       	ldi	r31, 0x00	; 0
    49c4:	12 96       	adiw	r26, 0x02	; 2
    49c6:	8d 91       	ld	r24, X+
    49c8:	9c 91       	ld	r25, X
    49ca:	13 97       	sbiw	r26, 0x03	; 3
    49cc:	00 97       	sbiw	r24, 0x00	; 0
    49ce:	19 f0       	breq	.+6      	; 0x49d6 <free+0xd4>
    49d0:	fd 01       	movw	r30, r26
    49d2:	dc 01       	movw	r26, r24
    49d4:	f7 cf       	rjmp	.-18     	; 0x49c4 <free+0xc2>
    49d6:	8d 91       	ld	r24, X+
    49d8:	9c 91       	ld	r25, X
    49da:	11 97       	sbiw	r26, 0x01	; 1
    49dc:	9d 01       	movw	r18, r26
    49de:	2e 5f       	subi	r18, 0xFE	; 254
    49e0:	3f 4f       	sbci	r19, 0xFF	; 255
    49e2:	82 0f       	add	r24, r18
    49e4:	93 1f       	adc	r25, r19
    49e6:	20 91 90 03 	lds	r18, 0x0390	; 0x800390 <__brkval>
    49ea:	30 91 91 03 	lds	r19, 0x0391	; 0x800391 <__brkval+0x1>
    49ee:	28 17       	cp	r18, r24
    49f0:	39 07       	cpc	r19, r25
    49f2:	69 f4       	brne	.+26     	; 0x4a0e <free+0x10c>
    49f4:	30 97       	sbiw	r30, 0x00	; 0
    49f6:	29 f4       	brne	.+10     	; 0x4a02 <free+0x100>
    49f8:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <__flp+0x1>
    49fc:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <__flp>
    4a00:	02 c0       	rjmp	.+4      	; 0x4a06 <free+0x104>
    4a02:	13 82       	std	Z+3, r1	; 0x03
    4a04:	12 82       	std	Z+2, r1	; 0x02
    4a06:	b0 93 91 03 	sts	0x0391, r27	; 0x800391 <__brkval+0x1>
    4a0a:	a0 93 90 03 	sts	0x0390, r26	; 0x800390 <__brkval>
    4a0e:	df 91       	pop	r29
    4a10:	cf 91       	pop	r28
    4a12:	08 95       	ret

00004a14 <realloc>:
    4a14:	a0 e0       	ldi	r26, 0x00	; 0
    4a16:	b0 e0       	ldi	r27, 0x00	; 0
    4a18:	e0 e1       	ldi	r30, 0x10	; 16
    4a1a:	f5 e2       	ldi	r31, 0x25	; 37
    4a1c:	0c 94 76 27 	jmp	0x4eec	; 0x4eec <__prologue_saves__+0x8>
    4a20:	ec 01       	movw	r28, r24
    4a22:	00 97       	sbiw	r24, 0x00	; 0
    4a24:	21 f4       	brne	.+8      	; 0x4a2e <realloc+0x1a>
    4a26:	cb 01       	movw	r24, r22
    4a28:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <malloc>
    4a2c:	b4 c0       	rjmp	.+360    	; 0x4b96 <realloc+0x182>
    4a2e:	fc 01       	movw	r30, r24
    4a30:	e6 0f       	add	r30, r22
    4a32:	f7 1f       	adc	r31, r23
    4a34:	9c 01       	movw	r18, r24
    4a36:	22 50       	subi	r18, 0x02	; 2
    4a38:	31 09       	sbc	r19, r1
    4a3a:	e2 17       	cp	r30, r18
    4a3c:	f3 07       	cpc	r31, r19
    4a3e:	08 f4       	brcc	.+2      	; 0x4a42 <realloc+0x2e>
    4a40:	a8 c0       	rjmp	.+336    	; 0x4b92 <realloc+0x17e>
    4a42:	d9 01       	movw	r26, r18
    4a44:	0d 91       	ld	r16, X+
    4a46:	1c 91       	ld	r17, X
    4a48:	11 97       	sbiw	r26, 0x01	; 1
    4a4a:	06 17       	cp	r16, r22
    4a4c:	17 07       	cpc	r17, r23
    4a4e:	b0 f0       	brcs	.+44     	; 0x4a7c <realloc+0x68>
    4a50:	05 30       	cpi	r16, 0x05	; 5
    4a52:	11 05       	cpc	r17, r1
    4a54:	08 f4       	brcc	.+2      	; 0x4a58 <realloc+0x44>
    4a56:	9b c0       	rjmp	.+310    	; 0x4b8e <realloc+0x17a>
    4a58:	c8 01       	movw	r24, r16
    4a5a:	04 97       	sbiw	r24, 0x04	; 4
    4a5c:	86 17       	cp	r24, r22
    4a5e:	97 07       	cpc	r25, r23
    4a60:	08 f4       	brcc	.+2      	; 0x4a64 <realloc+0x50>
    4a62:	95 c0       	rjmp	.+298    	; 0x4b8e <realloc+0x17a>
    4a64:	02 50       	subi	r16, 0x02	; 2
    4a66:	11 09       	sbc	r17, r1
    4a68:	06 1b       	sub	r16, r22
    4a6a:	17 0b       	sbc	r17, r23
    4a6c:	01 93       	st	Z+, r16
    4a6e:	11 93       	st	Z+, r17
    4a70:	6d 93       	st	X+, r22
    4a72:	7c 93       	st	X, r23
    4a74:	cf 01       	movw	r24, r30
    4a76:	0e 94 81 24 	call	0x4902	; 0x4902 <free>
    4a7a:	89 c0       	rjmp	.+274    	; 0x4b8e <realloc+0x17a>
    4a7c:	5b 01       	movw	r10, r22
    4a7e:	a0 1a       	sub	r10, r16
    4a80:	b1 0a       	sbc	r11, r17
    4a82:	4c 01       	movw	r8, r24
    4a84:	80 0e       	add	r8, r16
    4a86:	91 1e       	adc	r9, r17
    4a88:	a0 91 92 03 	lds	r26, 0x0392	; 0x800392 <__flp>
    4a8c:	b0 91 93 03 	lds	r27, 0x0393	; 0x800393 <__flp+0x1>
    4a90:	61 2c       	mov	r6, r1
    4a92:	71 2c       	mov	r7, r1
    4a94:	e1 2c       	mov	r14, r1
    4a96:	f1 2c       	mov	r15, r1
    4a98:	10 97       	sbiw	r26, 0x00	; 0
    4a9a:	09 f4       	brne	.+2      	; 0x4a9e <realloc+0x8a>
    4a9c:	46 c0       	rjmp	.+140    	; 0x4b2a <realloc+0x116>
    4a9e:	8d 91       	ld	r24, X+
    4aa0:	9c 91       	ld	r25, X
    4aa2:	11 97       	sbiw	r26, 0x01	; 1
    4aa4:	a8 15       	cp	r26, r8
    4aa6:	b9 05       	cpc	r27, r9
    4aa8:	b1 f5       	brne	.+108    	; 0x4b16 <realloc+0x102>
    4aaa:	6c 01       	movw	r12, r24
    4aac:	42 e0       	ldi	r20, 0x02	; 2
    4aae:	c4 0e       	add	r12, r20
    4ab0:	d1 1c       	adc	r13, r1
    4ab2:	ca 14       	cp	r12, r10
    4ab4:	db 04       	cpc	r13, r11
    4ab6:	78 f1       	brcs	.+94     	; 0x4b16 <realloc+0x102>
    4ab8:	4c 01       	movw	r8, r24
    4aba:	8a 18       	sub	r8, r10
    4abc:	9b 08       	sbc	r9, r11
    4abe:	64 01       	movw	r12, r8
    4ac0:	42 e0       	ldi	r20, 0x02	; 2
    4ac2:	c4 0e       	add	r12, r20
    4ac4:	d1 1c       	adc	r13, r1
    4ac6:	12 96       	adiw	r26, 0x02	; 2
    4ac8:	bc 90       	ld	r11, X
    4aca:	12 97       	sbiw	r26, 0x02	; 2
    4acc:	13 96       	adiw	r26, 0x03	; 3
    4ace:	ac 91       	ld	r26, X
    4ad0:	b5 e0       	ldi	r27, 0x05	; 5
    4ad2:	cb 16       	cp	r12, r27
    4ad4:	d1 04       	cpc	r13, r1
    4ad6:	40 f0       	brcs	.+16     	; 0x4ae8 <realloc+0xd4>
    4ad8:	b2 82       	std	Z+2, r11	; 0x02
    4ada:	a3 83       	std	Z+3, r26	; 0x03
    4adc:	91 82       	std	Z+1, r9	; 0x01
    4ade:	80 82       	st	Z, r8
    4ae0:	d9 01       	movw	r26, r18
    4ae2:	6d 93       	st	X+, r22
    4ae4:	7c 93       	st	X, r23
    4ae6:	09 c0       	rjmp	.+18     	; 0x4afa <realloc+0xe6>
    4ae8:	0e 5f       	subi	r16, 0xFE	; 254
    4aea:	1f 4f       	sbci	r17, 0xFF	; 255
    4aec:	80 0f       	add	r24, r16
    4aee:	91 1f       	adc	r25, r17
    4af0:	f9 01       	movw	r30, r18
    4af2:	91 83       	std	Z+1, r25	; 0x01
    4af4:	80 83       	st	Z, r24
    4af6:	eb 2d       	mov	r30, r11
    4af8:	fa 2f       	mov	r31, r26
    4afa:	e1 14       	cp	r14, r1
    4afc:	f1 04       	cpc	r15, r1
    4afe:	31 f0       	breq	.+12     	; 0x4b0c <realloc+0xf8>
    4b00:	d7 01       	movw	r26, r14
    4b02:	13 96       	adiw	r26, 0x03	; 3
    4b04:	fc 93       	st	X, r31
    4b06:	ee 93       	st	-X, r30
    4b08:	12 97       	sbiw	r26, 0x02	; 2
    4b0a:	41 c0       	rjmp	.+130    	; 0x4b8e <realloc+0x17a>
    4b0c:	f0 93 93 03 	sts	0x0393, r31	; 0x800393 <__flp+0x1>
    4b10:	e0 93 92 03 	sts	0x0392, r30	; 0x800392 <__flp>
    4b14:	3c c0       	rjmp	.+120    	; 0x4b8e <realloc+0x17a>
    4b16:	68 16       	cp	r6, r24
    4b18:	79 06       	cpc	r7, r25
    4b1a:	08 f4       	brcc	.+2      	; 0x4b1e <realloc+0x10a>
    4b1c:	3c 01       	movw	r6, r24
    4b1e:	7d 01       	movw	r14, r26
    4b20:	12 96       	adiw	r26, 0x02	; 2
    4b22:	0d 90       	ld	r0, X+
    4b24:	bc 91       	ld	r27, X
    4b26:	a0 2d       	mov	r26, r0
    4b28:	b7 cf       	rjmp	.-146    	; 0x4a98 <realloc+0x84>
    4b2a:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <__brkval>
    4b2e:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <__brkval+0x1>
    4b32:	88 16       	cp	r8, r24
    4b34:	99 06       	cpc	r9, r25
    4b36:	e1 f4       	brne	.+56     	; 0x4b70 <realloc+0x15c>
    4b38:	66 16       	cp	r6, r22
    4b3a:	77 06       	cpc	r7, r23
    4b3c:	c8 f4       	brcc	.+50     	; 0x4b70 <realloc+0x15c>
    4b3e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    4b42:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    4b46:	00 97       	sbiw	r24, 0x00	; 0
    4b48:	41 f4       	brne	.+16     	; 0x4b5a <realloc+0x146>
    4b4a:	8d b7       	in	r24, 0x3d	; 61
    4b4c:	9e b7       	in	r25, 0x3e	; 62
    4b4e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4b52:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4b56:	84 1b       	sub	r24, r20
    4b58:	95 0b       	sbc	r25, r21
    4b5a:	e8 17       	cp	r30, r24
    4b5c:	f9 07       	cpc	r31, r25
    4b5e:	c8 f4       	brcc	.+50     	; 0x4b92 <realloc+0x17e>
    4b60:	f0 93 91 03 	sts	0x0391, r31	; 0x800391 <__brkval+0x1>
    4b64:	e0 93 90 03 	sts	0x0390, r30	; 0x800390 <__brkval>
    4b68:	f9 01       	movw	r30, r18
    4b6a:	71 83       	std	Z+1, r23	; 0x01
    4b6c:	60 83       	st	Z, r22
    4b6e:	0f c0       	rjmp	.+30     	; 0x4b8e <realloc+0x17a>
    4b70:	cb 01       	movw	r24, r22
    4b72:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <malloc>
    4b76:	7c 01       	movw	r14, r24
    4b78:	00 97       	sbiw	r24, 0x00	; 0
    4b7a:	59 f0       	breq	.+22     	; 0x4b92 <realloc+0x17e>
    4b7c:	a8 01       	movw	r20, r16
    4b7e:	be 01       	movw	r22, r28
    4b80:	0e 94 ea 25 	call	0x4bd4	; 0x4bd4 <memcpy>
    4b84:	ce 01       	movw	r24, r28
    4b86:	0e 94 81 24 	call	0x4902	; 0x4902 <free>
    4b8a:	c7 01       	movw	r24, r14
    4b8c:	04 c0       	rjmp	.+8      	; 0x4b96 <realloc+0x182>
    4b8e:	ce 01       	movw	r24, r28
    4b90:	02 c0       	rjmp	.+4      	; 0x4b96 <realloc+0x182>
    4b92:	80 e0       	ldi	r24, 0x00	; 0
    4b94:	90 e0       	ldi	r25, 0x00	; 0
    4b96:	cd b7       	in	r28, 0x3d	; 61
    4b98:	de b7       	in	r29, 0x3e	; 62
    4b9a:	ee e0       	ldi	r30, 0x0E	; 14
    4b9c:	0c 94 92 27 	jmp	0x4f24	; 0x4f24 <__epilogue_restores__+0x8>

00004ba0 <atof>:
    4ba0:	66 27       	eor	r22, r22
    4ba2:	77 27       	eor	r23, r23
    4ba4:	0c 94 09 26 	jmp	0x4c12	; 0x4c12 <strtod>

00004ba8 <isspace>:
    4ba8:	91 11       	cpse	r25, r1
    4baa:	0c 94 57 27 	jmp	0x4eae	; 0x4eae <__ctype_isfalse>
    4bae:	80 32       	cpi	r24, 0x20	; 32
    4bb0:	19 f0       	breq	.+6      	; 0x4bb8 <isspace+0x10>
    4bb2:	89 50       	subi	r24, 0x09	; 9
    4bb4:	85 50       	subi	r24, 0x05	; 5
    4bb6:	c8 f7       	brcc	.-14     	; 0x4baa <isspace+0x2>
    4bb8:	08 95       	ret

00004bba <memcmp>:
    4bba:	fb 01       	movw	r30, r22
    4bbc:	dc 01       	movw	r26, r24
    4bbe:	04 c0       	rjmp	.+8      	; 0x4bc8 <memcmp+0xe>
    4bc0:	8d 91       	ld	r24, X+
    4bc2:	01 90       	ld	r0, Z+
    4bc4:	80 19       	sub	r24, r0
    4bc6:	21 f4       	brne	.+8      	; 0x4bd0 <memcmp+0x16>
    4bc8:	41 50       	subi	r20, 0x01	; 1
    4bca:	50 40       	sbci	r21, 0x00	; 0
    4bcc:	c8 f7       	brcc	.-14     	; 0x4bc0 <memcmp+0x6>
    4bce:	88 1b       	sub	r24, r24
    4bd0:	99 0b       	sbc	r25, r25
    4bd2:	08 95       	ret

00004bd4 <memcpy>:
    4bd4:	fb 01       	movw	r30, r22
    4bd6:	dc 01       	movw	r26, r24
    4bd8:	02 c0       	rjmp	.+4      	; 0x4bde <memcpy+0xa>
    4bda:	01 90       	ld	r0, Z+
    4bdc:	0d 92       	st	X+, r0
    4bde:	41 50       	subi	r20, 0x01	; 1
    4be0:	50 40       	sbci	r21, 0x00	; 0
    4be2:	d8 f7       	brcc	.-10     	; 0x4bda <memcpy+0x6>
    4be4:	08 95       	ret

00004be6 <strcpy>:
    4be6:	fb 01       	movw	r30, r22
    4be8:	dc 01       	movw	r26, r24
    4bea:	01 90       	ld	r0, Z+
    4bec:	0d 92       	st	X+, r0
    4bee:	00 20       	and	r0, r0
    4bf0:	e1 f7       	brne	.-8      	; 0x4bea <strcpy+0x4>
    4bf2:	08 95       	ret

00004bf4 <strncpy>:
    4bf4:	fb 01       	movw	r30, r22
    4bf6:	dc 01       	movw	r26, r24
    4bf8:	41 50       	subi	r20, 0x01	; 1
    4bfa:	50 40       	sbci	r21, 0x00	; 0
    4bfc:	48 f0       	brcs	.+18     	; 0x4c10 <strncpy+0x1c>
    4bfe:	01 90       	ld	r0, Z+
    4c00:	0d 92       	st	X+, r0
    4c02:	00 20       	and	r0, r0
    4c04:	c9 f7       	brne	.-14     	; 0x4bf8 <strncpy+0x4>
    4c06:	01 c0       	rjmp	.+2      	; 0x4c0a <strncpy+0x16>
    4c08:	1d 92       	st	X+, r1
    4c0a:	41 50       	subi	r20, 0x01	; 1
    4c0c:	50 40       	sbci	r21, 0x00	; 0
    4c0e:	e0 f7       	brcc	.-8      	; 0x4c08 <strncpy+0x14>
    4c10:	08 95       	ret

00004c12 <strtod>:
    4c12:	a0 e0       	ldi	r26, 0x00	; 0
    4c14:	b0 e0       	ldi	r27, 0x00	; 0
    4c16:	ef e0       	ldi	r30, 0x0F	; 15
    4c18:	f6 e2       	ldi	r31, 0x26	; 38
    4c1a:	0c 94 78 27 	jmp	0x4ef0	; 0x4ef0 <__prologue_saves__+0xc>
    4c1e:	ec 01       	movw	r28, r24
    4c20:	6b 01       	movw	r12, r22
    4c22:	61 15       	cp	r22, r1
    4c24:	71 05       	cpc	r23, r1
    4c26:	19 f0       	breq	.+6      	; 0x4c2e <strtod+0x1c>
    4c28:	fb 01       	movw	r30, r22
    4c2a:	91 83       	std	Z+1, r25	; 0x01
    4c2c:	80 83       	st	Z, r24
    4c2e:	7e 01       	movw	r14, r28
    4c30:	ff ef       	ldi	r31, 0xFF	; 255
    4c32:	ef 1a       	sub	r14, r31
    4c34:	ff 0a       	sbc	r15, r31
    4c36:	08 81       	ld	r16, Y
    4c38:	80 2f       	mov	r24, r16
    4c3a:	90 e0       	ldi	r25, 0x00	; 0
    4c3c:	0e 94 d4 25 	call	0x4ba8	; 0x4ba8 <isspace>
    4c40:	89 2b       	or	r24, r25
    4c42:	11 f0       	breq	.+4      	; 0x4c48 <strtod+0x36>
    4c44:	e7 01       	movw	r28, r14
    4c46:	f3 cf       	rjmp	.-26     	; 0x4c2e <strtod+0x1c>
    4c48:	0d 32       	cpi	r16, 0x2D	; 45
    4c4a:	39 f4       	brne	.+14     	; 0x4c5a <strtod+0x48>
    4c4c:	7e 01       	movw	r14, r28
    4c4e:	82 e0       	ldi	r24, 0x02	; 2
    4c50:	e8 0e       	add	r14, r24
    4c52:	f1 1c       	adc	r15, r1
    4c54:	09 81       	ldd	r16, Y+1	; 0x01
    4c56:	11 e0       	ldi	r17, 0x01	; 1
    4c58:	08 c0       	rjmp	.+16     	; 0x4c6a <strtod+0x58>
    4c5a:	0b 32       	cpi	r16, 0x2B	; 43
    4c5c:	29 f4       	brne	.+10     	; 0x4c68 <strtod+0x56>
    4c5e:	7e 01       	movw	r14, r28
    4c60:	92 e0       	ldi	r25, 0x02	; 2
    4c62:	e9 0e       	add	r14, r25
    4c64:	f1 1c       	adc	r15, r1
    4c66:	09 81       	ldd	r16, Y+1	; 0x01
    4c68:	10 e0       	ldi	r17, 0x00	; 0
    4c6a:	e7 01       	movw	r28, r14
    4c6c:	21 97       	sbiw	r28, 0x01	; 1
    4c6e:	43 e0       	ldi	r20, 0x03	; 3
    4c70:	50 e0       	ldi	r21, 0x00	; 0
    4c72:	6e e9       	ldi	r22, 0x9E	; 158
    4c74:	70 e0       	ldi	r23, 0x00	; 0
    4c76:	ce 01       	movw	r24, r28
    4c78:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <strncasecmp_P>
    4c7c:	89 2b       	or	r24, r25
    4c7e:	c1 f4       	brne	.+48     	; 0x4cb0 <strtod+0x9e>
    4c80:	23 96       	adiw	r28, 0x03	; 3
    4c82:	45 e0       	ldi	r20, 0x05	; 5
    4c84:	50 e0       	ldi	r21, 0x00	; 0
    4c86:	69 e9       	ldi	r22, 0x99	; 153
    4c88:	70 e0       	ldi	r23, 0x00	; 0
    4c8a:	ce 01       	movw	r24, r28
    4c8c:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <strncasecmp_P>
    4c90:	89 2b       	or	r24, r25
    4c92:	09 f4       	brne	.+2      	; 0x4c96 <strtod+0x84>
    4c94:	25 96       	adiw	r28, 0x05	; 5
    4c96:	c1 14       	cp	r12, r1
    4c98:	d1 04       	cpc	r13, r1
    4c9a:	19 f0       	breq	.+6      	; 0x4ca2 <strtod+0x90>
    4c9c:	f6 01       	movw	r30, r12
    4c9e:	d1 83       	std	Z+1, r29	; 0x01
    4ca0:	c0 83       	st	Z, r28
    4ca2:	11 11       	cpse	r17, r1
    4ca4:	f6 c0       	rjmp	.+492    	; 0x4e92 <strtod+0x280>
    4ca6:	60 e0       	ldi	r22, 0x00	; 0
    4ca8:	70 e0       	ldi	r23, 0x00	; 0
    4caa:	80 e8       	ldi	r24, 0x80	; 128
    4cac:	9f e7       	ldi	r25, 0x7F	; 127
    4cae:	fa c0       	rjmp	.+500    	; 0x4ea4 <strtod+0x292>
    4cb0:	43 e0       	ldi	r20, 0x03	; 3
    4cb2:	50 e0       	ldi	r21, 0x00	; 0
    4cb4:	66 e9       	ldi	r22, 0x96	; 150
    4cb6:	70 e0       	ldi	r23, 0x00	; 0
    4cb8:	ce 01       	movw	r24, r28
    4cba:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <strncasecmp_P>
    4cbe:	89 2b       	or	r24, r25
    4cc0:	59 f4       	brne	.+22     	; 0x4cd8 <strtod+0xc6>
    4cc2:	c1 14       	cp	r12, r1
    4cc4:	d1 04       	cpc	r13, r1
    4cc6:	09 f4       	brne	.+2      	; 0x4cca <strtod+0xb8>
    4cc8:	e9 c0       	rjmp	.+466    	; 0x4e9c <strtod+0x28a>
    4cca:	f2 e0       	ldi	r31, 0x02	; 2
    4ccc:	ef 0e       	add	r14, r31
    4cce:	f1 1c       	adc	r15, r1
    4cd0:	f6 01       	movw	r30, r12
    4cd2:	f1 82       	std	Z+1, r15	; 0x01
    4cd4:	e0 82       	st	Z, r14
    4cd6:	e2 c0       	rjmp	.+452    	; 0x4e9c <strtod+0x28a>
    4cd8:	20 e0       	ldi	r18, 0x00	; 0
    4cda:	30 e0       	ldi	r19, 0x00	; 0
    4cdc:	a9 01       	movw	r20, r18
    4cde:	c0 e0       	ldi	r28, 0x00	; 0
    4ce0:	d0 e0       	ldi	r29, 0x00	; 0
    4ce2:	f7 01       	movw	r30, r14
    4ce4:	80 ed       	ldi	r24, 0xD0	; 208
    4ce6:	a8 2e       	mov	r10, r24
    4ce8:	a0 0e       	add	r10, r16
    4cea:	89 e0       	ldi	r24, 0x09	; 9
    4cec:	8a 15       	cp	r24, r10
    4cee:	30 f1       	brcs	.+76     	; 0x4d3c <strtod+0x12a>
    4cf0:	91 2f       	mov	r25, r17
    4cf2:	92 60       	ori	r25, 0x02	; 2
    4cf4:	b9 2e       	mov	r11, r25
    4cf6:	81 2f       	mov	r24, r17
    4cf8:	88 70       	andi	r24, 0x08	; 8
    4cfa:	12 ff       	sbrs	r17, 2
    4cfc:	04 c0       	rjmp	.+8      	; 0x4d06 <strtod+0xf4>
    4cfe:	81 11       	cpse	r24, r1
    4d00:	24 c0       	rjmp	.+72     	; 0x4d4a <strtod+0x138>
    4d02:	21 96       	adiw	r28, 0x01	; 1
    4d04:	22 c0       	rjmp	.+68     	; 0x4d4a <strtod+0x138>
    4d06:	81 11       	cpse	r24, r1
    4d08:	21 97       	sbiw	r28, 0x01	; 1
    4d0a:	a5 e0       	ldi	r26, 0x05	; 5
    4d0c:	b0 e0       	ldi	r27, 0x00	; 0
    4d0e:	0e 94 d8 23 	call	0x47b0	; 0x47b0 <__muluhisi3>
    4d12:	dc 01       	movw	r26, r24
    4d14:	cb 01       	movw	r24, r22
    4d16:	88 0f       	add	r24, r24
    4d18:	99 1f       	adc	r25, r25
    4d1a:	aa 1f       	adc	r26, r26
    4d1c:	bb 1f       	adc	r27, r27
    4d1e:	9c 01       	movw	r18, r24
    4d20:	ad 01       	movw	r20, r26
    4d22:	2a 0d       	add	r18, r10
    4d24:	31 1d       	adc	r19, r1
    4d26:	41 1d       	adc	r20, r1
    4d28:	51 1d       	adc	r21, r1
    4d2a:	28 39       	cpi	r18, 0x98	; 152
    4d2c:	89 e9       	ldi	r24, 0x99	; 153
    4d2e:	38 07       	cpc	r19, r24
    4d30:	48 07       	cpc	r20, r24
    4d32:	89 e1       	ldi	r24, 0x19	; 25
    4d34:	58 07       	cpc	r21, r24
    4d36:	48 f0       	brcs	.+18     	; 0x4d4a <strtod+0x138>
    4d38:	16 60       	ori	r17, 0x06	; 6
    4d3a:	06 c0       	rjmp	.+12     	; 0x4d48 <strtod+0x136>
    4d3c:	9e ef       	ldi	r25, 0xFE	; 254
    4d3e:	a9 12       	cpse	r10, r25
    4d40:	0a c0       	rjmp	.+20     	; 0x4d56 <strtod+0x144>
    4d42:	13 fd       	sbrc	r17, 3
    4d44:	40 c0       	rjmp	.+128    	; 0x4dc6 <strtod+0x1b4>
    4d46:	18 60       	ori	r17, 0x08	; 8
    4d48:	b1 2e       	mov	r11, r17
    4d4a:	8f ef       	ldi	r24, 0xFF	; 255
    4d4c:	e8 1a       	sub	r14, r24
    4d4e:	f8 0a       	sbc	r15, r24
    4d50:	00 81       	ld	r16, Z
    4d52:	1b 2d       	mov	r17, r11
    4d54:	c6 cf       	rjmp	.-116    	; 0x4ce2 <strtod+0xd0>
    4d56:	80 2f       	mov	r24, r16
    4d58:	8f 7d       	andi	r24, 0xDF	; 223
    4d5a:	85 34       	cpi	r24, 0x45	; 69
    4d5c:	a1 f5       	brne	.+104    	; 0x4dc6 <strtod+0x1b4>
    4d5e:	80 81       	ld	r24, Z
    4d60:	8d 32       	cpi	r24, 0x2D	; 45
    4d62:	11 f4       	brne	.+4      	; 0x4d68 <strtod+0x156>
    4d64:	10 61       	ori	r17, 0x10	; 16
    4d66:	06 c0       	rjmp	.+12     	; 0x4d74 <strtod+0x162>
    4d68:	8b 32       	cpi	r24, 0x2B	; 43
    4d6a:	21 f0       	breq	.+8      	; 0x4d74 <strtod+0x162>
    4d6c:	31 96       	adiw	r30, 0x01	; 1
    4d6e:	61 e0       	ldi	r22, 0x01	; 1
    4d70:	70 e0       	ldi	r23, 0x00	; 0
    4d72:	04 c0       	rjmp	.+8      	; 0x4d7c <strtod+0x16a>
    4d74:	81 81       	ldd	r24, Z+1	; 0x01
    4d76:	32 96       	adiw	r30, 0x02	; 2
    4d78:	62 e0       	ldi	r22, 0x02	; 2
    4d7a:	70 e0       	ldi	r23, 0x00	; 0
    4d7c:	80 53       	subi	r24, 0x30	; 48
    4d7e:	8a 30       	cpi	r24, 0x0A	; 10
    4d80:	18 f0       	brcs	.+6      	; 0x4d88 <strtod+0x176>
    4d82:	e6 1b       	sub	r30, r22
    4d84:	f7 0b       	sbc	r31, r23
    4d86:	1f c0       	rjmp	.+62     	; 0x4dc6 <strtod+0x1b4>
    4d88:	60 e0       	ldi	r22, 0x00	; 0
    4d8a:	70 e0       	ldi	r23, 0x00	; 0
    4d8c:	60 38       	cpi	r22, 0x80	; 128
    4d8e:	9c e0       	ldi	r25, 0x0C	; 12
    4d90:	79 07       	cpc	r23, r25
    4d92:	5c f4       	brge	.+22     	; 0x4daa <strtod+0x198>
    4d94:	db 01       	movw	r26, r22
    4d96:	aa 0f       	add	r26, r26
    4d98:	bb 1f       	adc	r27, r27
    4d9a:	aa 0f       	add	r26, r26
    4d9c:	bb 1f       	adc	r27, r27
    4d9e:	6a 0f       	add	r22, r26
    4da0:	7b 1f       	adc	r23, r27
    4da2:	66 0f       	add	r22, r22
    4da4:	77 1f       	adc	r23, r23
    4da6:	68 0f       	add	r22, r24
    4da8:	71 1d       	adc	r23, r1
    4daa:	31 96       	adiw	r30, 0x01	; 1
    4dac:	df 01       	movw	r26, r30
    4dae:	11 97       	sbiw	r26, 0x01	; 1
    4db0:	8c 91       	ld	r24, X
    4db2:	80 53       	subi	r24, 0x30	; 48
    4db4:	8a 30       	cpi	r24, 0x0A	; 10
    4db6:	50 f3       	brcs	.-44     	; 0x4d8c <strtod+0x17a>
    4db8:	14 ff       	sbrs	r17, 4
    4dba:	03 c0       	rjmp	.+6      	; 0x4dc2 <strtod+0x1b0>
    4dbc:	71 95       	neg	r23
    4dbe:	61 95       	neg	r22
    4dc0:	71 09       	sbc	r23, r1
    4dc2:	c6 0f       	add	r28, r22
    4dc4:	d7 1f       	adc	r29, r23
    4dc6:	11 ff       	sbrs	r17, 1
    4dc8:	08 c0       	rjmp	.+16     	; 0x4dda <strtod+0x1c8>
    4dca:	c1 14       	cp	r12, r1
    4dcc:	d1 04       	cpc	r13, r1
    4dce:	29 f0       	breq	.+10     	; 0x4dda <strtod+0x1c8>
    4dd0:	cf 01       	movw	r24, r30
    4dd2:	01 97       	sbiw	r24, 0x01	; 1
    4dd4:	f6 01       	movw	r30, r12
    4dd6:	91 83       	std	Z+1, r25	; 0x01
    4dd8:	80 83       	st	Z, r24
    4dda:	ca 01       	movw	r24, r20
    4ddc:	b9 01       	movw	r22, r18
    4dde:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__floatunsisf>
    4de2:	21 2f       	mov	r18, r17
    4de4:	23 70       	andi	r18, 0x03	; 3
    4de6:	23 30       	cpi	r18, 0x03	; 3
    4de8:	19 f0       	breq	.+6      	; 0x4df0 <strtod+0x1de>
    4dea:	4b 01       	movw	r8, r22
    4dec:	5c 01       	movw	r10, r24
    4dee:	06 c0       	rjmp	.+12     	; 0x4dfc <strtod+0x1ea>
    4df0:	4b 01       	movw	r8, r22
    4df2:	5c 01       	movw	r10, r24
    4df4:	b7 fa       	bst	r11, 7
    4df6:	b0 94       	com	r11
    4df8:	b7 f8       	bld	r11, 7
    4dfa:	b0 94       	com	r11
    4dfc:	20 e0       	ldi	r18, 0x00	; 0
    4dfe:	30 e0       	ldi	r19, 0x00	; 0
    4e00:	a9 01       	movw	r20, r18
    4e02:	c5 01       	movw	r24, r10
    4e04:	b4 01       	movw	r22, r8
    4e06:	0e 94 35 14 	call	0x286a	; 0x286a <__cmpsf2>
    4e0a:	88 23       	and	r24, r24
    4e0c:	09 f4       	brne	.+2      	; 0x4e10 <strtod+0x1fe>
    4e0e:	3e c0       	rjmp	.+124    	; 0x4e8c <strtod+0x27a>
    4e10:	d7 ff       	sbrs	r29, 7
    4e12:	06 c0       	rjmp	.+12     	; 0x4e20 <strtod+0x20e>
    4e14:	d1 95       	neg	r29
    4e16:	c1 95       	neg	r28
    4e18:	d1 09       	sbc	r29, r1
    4e1a:	05 eb       	ldi	r16, 0xB5	; 181
    4e1c:	10 e0       	ldi	r17, 0x00	; 0
    4e1e:	02 c0       	rjmp	.+4      	; 0x4e24 <strtod+0x212>
    4e20:	0d ec       	ldi	r16, 0xCD	; 205
    4e22:	10 e0       	ldi	r17, 0x00	; 0
    4e24:	68 01       	movw	r12, r16
    4e26:	f8 e1       	ldi	r31, 0x18	; 24
    4e28:	cf 1a       	sub	r12, r31
    4e2a:	d1 08       	sbc	r13, r1
    4e2c:	90 e2       	ldi	r25, 0x20	; 32
    4e2e:	e9 2e       	mov	r14, r25
    4e30:	f1 2c       	mov	r15, r1
    4e32:	ce 15       	cp	r28, r14
    4e34:	df 05       	cpc	r29, r15
    4e36:	74 f0       	brlt	.+28     	; 0x4e54 <strtod+0x242>
    4e38:	f8 01       	movw	r30, r16
    4e3a:	25 91       	lpm	r18, Z+
    4e3c:	35 91       	lpm	r19, Z+
    4e3e:	45 91       	lpm	r20, Z+
    4e40:	54 91       	lpm	r21, Z
    4e42:	c5 01       	movw	r24, r10
    4e44:	b4 01       	movw	r22, r8
    4e46:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__mulsf3>
    4e4a:	4b 01       	movw	r8, r22
    4e4c:	5c 01       	movw	r10, r24
    4e4e:	ce 19       	sub	r28, r14
    4e50:	df 09       	sbc	r29, r15
    4e52:	ef cf       	rjmp	.-34     	; 0x4e32 <strtod+0x220>
    4e54:	04 50       	subi	r16, 0x04	; 4
    4e56:	11 09       	sbc	r17, r1
    4e58:	f5 94       	asr	r15
    4e5a:	e7 94       	ror	r14
    4e5c:	0c 15       	cp	r16, r12
    4e5e:	1d 05       	cpc	r17, r13
    4e60:	41 f7       	brne	.-48     	; 0x4e32 <strtod+0x220>
    4e62:	8a 2d       	mov	r24, r10
    4e64:	88 0f       	add	r24, r24
    4e66:	8b 2d       	mov	r24, r11
    4e68:	88 1f       	adc	r24, r24
    4e6a:	8f 3f       	cpi	r24, 0xFF	; 255
    4e6c:	49 f0       	breq	.+18     	; 0x4e80 <strtod+0x26e>
    4e6e:	20 e0       	ldi	r18, 0x00	; 0
    4e70:	30 e0       	ldi	r19, 0x00	; 0
    4e72:	a9 01       	movw	r20, r18
    4e74:	c5 01       	movw	r24, r10
    4e76:	b4 01       	movw	r22, r8
    4e78:	0e 94 35 14 	call	0x286a	; 0x286a <__cmpsf2>
    4e7c:	81 11       	cpse	r24, r1
    4e7e:	06 c0       	rjmp	.+12     	; 0x4e8c <strtod+0x27a>
    4e80:	82 e2       	ldi	r24, 0x22	; 34
    4e82:	90 e0       	ldi	r25, 0x00	; 0
    4e84:	90 93 95 03 	sts	0x0395, r25	; 0x800395 <errno+0x1>
    4e88:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <errno>
    4e8c:	c5 01       	movw	r24, r10
    4e8e:	b4 01       	movw	r22, r8
    4e90:	09 c0       	rjmp	.+18     	; 0x4ea4 <strtod+0x292>
    4e92:	60 e0       	ldi	r22, 0x00	; 0
    4e94:	70 e0       	ldi	r23, 0x00	; 0
    4e96:	80 e8       	ldi	r24, 0x80	; 128
    4e98:	9f ef       	ldi	r25, 0xFF	; 255
    4e9a:	04 c0       	rjmp	.+8      	; 0x4ea4 <strtod+0x292>
    4e9c:	60 e0       	ldi	r22, 0x00	; 0
    4e9e:	70 e0       	ldi	r23, 0x00	; 0
    4ea0:	80 ec       	ldi	r24, 0xC0	; 192
    4ea2:	9f e7       	ldi	r25, 0x7F	; 127
    4ea4:	cd b7       	in	r28, 0x3d	; 61
    4ea6:	de b7       	in	r29, 0x3e	; 62
    4ea8:	ec e0       	ldi	r30, 0x0C	; 12
    4eaa:	0c 94 94 27 	jmp	0x4f28	; 0x4f28 <__epilogue_restores__+0xc>

00004eae <__ctype_isfalse>:
    4eae:	99 27       	eor	r25, r25
    4eb0:	88 27       	eor	r24, r24

00004eb2 <__ctype_istrue>:
    4eb2:	08 95       	ret

00004eb4 <strncasecmp_P>:
    4eb4:	fb 01       	movw	r30, r22
    4eb6:	dc 01       	movw	r26, r24
    4eb8:	41 50       	subi	r20, 0x01	; 1
    4eba:	50 40       	sbci	r21, 0x00	; 0
    4ebc:	88 f0       	brcs	.+34     	; 0x4ee0 <strncasecmp_P+0x2c>
    4ebe:	8d 91       	ld	r24, X+
    4ec0:	81 34       	cpi	r24, 0x41	; 65
    4ec2:	1c f0       	brlt	.+6      	; 0x4eca <strncasecmp_P+0x16>
    4ec4:	8b 35       	cpi	r24, 0x5B	; 91
    4ec6:	0c f4       	brge	.+2      	; 0x4eca <strncasecmp_P+0x16>
    4ec8:	80 5e       	subi	r24, 0xE0	; 224
    4eca:	65 91       	lpm	r22, Z+
    4ecc:	61 34       	cpi	r22, 0x41	; 65
    4ece:	1c f0       	brlt	.+6      	; 0x4ed6 <strncasecmp_P+0x22>
    4ed0:	6b 35       	cpi	r22, 0x5B	; 91
    4ed2:	0c f4       	brge	.+2      	; 0x4ed6 <strncasecmp_P+0x22>
    4ed4:	60 5e       	subi	r22, 0xE0	; 224
    4ed6:	86 1b       	sub	r24, r22
    4ed8:	61 11       	cpse	r22, r1
    4eda:	71 f3       	breq	.-36     	; 0x4eb8 <strncasecmp_P+0x4>
    4edc:	99 0b       	sbc	r25, r25
    4ede:	08 95       	ret
    4ee0:	88 1b       	sub	r24, r24
    4ee2:	fc cf       	rjmp	.-8      	; 0x4edc <strncasecmp_P+0x28>

00004ee4 <__prologue_saves__>:
    4ee4:	2f 92       	push	r2
    4ee6:	3f 92       	push	r3
    4ee8:	4f 92       	push	r4
    4eea:	5f 92       	push	r5
    4eec:	6f 92       	push	r6
    4eee:	7f 92       	push	r7
    4ef0:	8f 92       	push	r8
    4ef2:	9f 92       	push	r9
    4ef4:	af 92       	push	r10
    4ef6:	bf 92       	push	r11
    4ef8:	cf 92       	push	r12
    4efa:	df 92       	push	r13
    4efc:	ef 92       	push	r14
    4efe:	ff 92       	push	r15
    4f00:	0f 93       	push	r16
    4f02:	1f 93       	push	r17
    4f04:	cf 93       	push	r28
    4f06:	df 93       	push	r29
    4f08:	cd b7       	in	r28, 0x3d	; 61
    4f0a:	de b7       	in	r29, 0x3e	; 62
    4f0c:	ca 1b       	sub	r28, r26
    4f0e:	db 0b       	sbc	r29, r27
    4f10:	0f b6       	in	r0, 0x3f	; 63
    4f12:	f8 94       	cli
    4f14:	de bf       	out	0x3e, r29	; 62
    4f16:	0f be       	out	0x3f, r0	; 63
    4f18:	cd bf       	out	0x3d, r28	; 61
    4f1a:	09 94       	ijmp

00004f1c <__epilogue_restores__>:
    4f1c:	2a 88       	ldd	r2, Y+18	; 0x12
    4f1e:	39 88       	ldd	r3, Y+17	; 0x11
    4f20:	48 88       	ldd	r4, Y+16	; 0x10
    4f22:	5f 84       	ldd	r5, Y+15	; 0x0f
    4f24:	6e 84       	ldd	r6, Y+14	; 0x0e
    4f26:	7d 84       	ldd	r7, Y+13	; 0x0d
    4f28:	8c 84       	ldd	r8, Y+12	; 0x0c
    4f2a:	9b 84       	ldd	r9, Y+11	; 0x0b
    4f2c:	aa 84       	ldd	r10, Y+10	; 0x0a
    4f2e:	b9 84       	ldd	r11, Y+9	; 0x09
    4f30:	c8 84       	ldd	r12, Y+8	; 0x08
    4f32:	df 80       	ldd	r13, Y+7	; 0x07
    4f34:	ee 80       	ldd	r14, Y+6	; 0x06
    4f36:	fd 80       	ldd	r15, Y+5	; 0x05
    4f38:	0c 81       	ldd	r16, Y+4	; 0x04
    4f3a:	1b 81       	ldd	r17, Y+3	; 0x03
    4f3c:	aa 81       	ldd	r26, Y+2	; 0x02
    4f3e:	b9 81       	ldd	r27, Y+1	; 0x01
    4f40:	ce 0f       	add	r28, r30
    4f42:	d1 1d       	adc	r29, r1
    4f44:	0f b6       	in	r0, 0x3f	; 63
    4f46:	f8 94       	cli
    4f48:	de bf       	out	0x3e, r29	; 62
    4f4a:	0f be       	out	0x3f, r0	; 63
    4f4c:	cd bf       	out	0x3d, r28	; 61
    4f4e:	ed 01       	movw	r28, r26
    4f50:	08 95       	ret

00004f52 <__do_global_dtors>:
    4f52:	16 e0       	ldi	r17, 0x06	; 6
    4f54:	cb e8       	ldi	r28, 0x8B	; 139
    4f56:	d6 e0       	ldi	r29, 0x06	; 6
    4f58:	04 c0       	rjmp	.+8      	; 0x4f62 <__do_global_dtors+0x10>
    4f5a:	fe 01       	movw	r30, r28
    4f5c:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <__tablejump2__>
    4f60:	21 96       	adiw	r28, 0x01	; 1
    4f62:	cc 38       	cpi	r28, 0x8C	; 140
    4f64:	d1 07       	cpc	r29, r17
    4f66:	c9 f7       	brne	.-14     	; 0x4f5a <__do_global_dtors+0x8>
    4f68:	f8 94       	cli

00004f6a <__stop_program>:
    4f6a:	ff cf       	rjmp	.-2      	; 0x4f6a <__stop_program>
