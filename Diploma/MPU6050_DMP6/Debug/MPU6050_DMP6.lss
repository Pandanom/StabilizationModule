
MPU6050_DMP6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  000040ca  0000415e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000040ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021f  00800142  00800142  000041a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000041a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000041d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ef8  00000000  00000000  00004210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001ad54  00000000  00000000  00005108  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d92  00000000  00000000  0001fe5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005fe3  00000000  00000000  00022bee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003788  00000000  00000000  00028bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007cc9  00000000  00000000  0002c35c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00011319  00000000  00000000  00034025  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ee8  00000000  00000000  0004533e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__ctors_end>
       4:	0c 94 4d 18 	jmp	0x309a	; 0x309a <__vector_1>
       8:	0c 94 74 18 	jmp	0x30e8	; 0x30e8 <__vector_2>
       c:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__bad_interrupt>
      10:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__bad_interrupt>
      14:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__bad_interrupt>
      18:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__bad_interrupt>
      1c:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__bad_interrupt>
      20:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__bad_interrupt>
      24:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__bad_interrupt>
      28:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__bad_interrupt>
      2c:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__bad_interrupt>
      30:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__bad_interrupt>
      34:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__bad_interrupt>
      38:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__bad_interrupt>
      3c:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__bad_interrupt>
      40:	0c 94 9b 18 	jmp	0x3136	; 0x3136 <__vector_16>
      44:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__bad_interrupt>
      48:	0c 94 58 15 	jmp	0x2ab0	; 0x2ab0 <__vector_18>
      4c:	0c 94 8a 15 	jmp	0x2b14	; 0x2b14 <__vector_19>
      50:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__bad_interrupt>
      54:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__bad_interrupt>
      58:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__bad_interrupt>
      5c:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__bad_interrupt>
      60:	0c 94 db 1d 	jmp	0x3bb6	; 0x3bb6 <__vector_24>
      64:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__trampolines_end>:
      96:	46 49       	sbci	r20, 0x96	; 150
      98:	46 4f       	sbci	r20, 0xF6	; 246
      9a:	20 6f       	ori	r18, 0xF0	; 240
      9c:	76 65       	ori	r23, 0x56	; 86
      9e:	72 66       	ori	r23, 0x62	; 98
      a0:	6c 6f       	ori	r22, 0xFC	; 252
      a2:	77 21       	and	r23, r7
	...

000000a5 <_ZZ5setupE3__c_0>:
      a5:	29 00                                               ).

000000a7 <_ZZ5setupE3__c>:
      a7:	44 4d 50 20 49 6e 69 74 69 61 6c 69 7a 61 74 69     DMP Initializati
      b7:	6f 6e 20 66 61 69 6c 65 64 20 28 63 6f 64 65 20     on failed (code 
	...

000000c8 <_ZZN7MPU605013dmpInitializeEvE3__c_30>:
      c8:	52 65 73 65 74 74 69 6e 67 20 46 49 46 4f 20 61     Resetting FIFO a
      d8:	6e 64 20 63 6c 65 61 72 69 6e 67 20 49 4e 54 20     nd clearing INT 
      e8:	73 74 61 74 75 73 20 6f 6e 65 20 6c 61 73 74 20     status one last 
      f8:	74 69 6d 65 2e 2e 2e 00                             time....

00000100 <_ZZN7MPU605013dmpInitializeEvE3__c_29>:
     100:	53 65 74 74 69 6e 67 20 75 70 20 69 6e 74 65 72     Setting up inter
     110:	6e 61 6c 20 34 32 2d 62 79 74 65 20 28 64 65 66     nal 42-byte (def
     120:	61 75 6c 74 29 20 44 4d 50 20 70 61 63 6b 65 74     ault) DMP packet
     130:	20 62 75 66 66 65 72 2e 2e 2e 00                     buffer....

0000013b <_ZZN7MPU605013dmpInitializeEvE3__c_28>:
     13b:	44 69 73 61 62 6c 69 6e 67 20 44 4d 50 20 28 79     Disabling DMP (y
     14b:	6f 75 20 74 75 72 6e 20 69 74 20 6f 6e 20 6c 61     ou turn it on la
     15b:	74 65 72 29 2e 2e 2e 00                             ter)....

00000163 <_ZZN7MPU605013dmpInitializeEvE3__c_27>:
     163:	44 4d 50 20 69 73 20 67 6f 6f 64 20 74 6f 20 67     DMP is good to g
     173:	6f 21 20 46 69 6e 61 6c 6c 79 2e 00                 o! Finally..

0000017f <_ZZN7MPU605013dmpInitializeEvE3__c_26>:
     17f:	52 65 73 65 74 74 69 6e 67 20 44 4d 50 2e 2e 2e     Resetting DMP...
	...

00000190 <_ZZN7MPU605013dmpInitializeEvE3__c_25>:
     190:	45 6e 61 62 6c 69 6e 67 20 46 49 46 4f 2e 2e 2e     Enabling FIFO...
	...

000001a1 <_ZZN7MPU605013dmpInitializeEvE3__c_24>:
     1a1:	53 65 74 74 69 6e 67 20 7a 65 72 6f 2d 6d 6f 74     Setting zero-mot
     1b1:	69 6f 6e 20 64 65 74 65 63 74 69 6f 6e 20 64 75     ion detection du
     1c1:	72 61 74 69 6f 6e 20 74 6f 20 30 2e 2e 2e 00        ration to 0....

000001d0 <_ZZN7MPU605013dmpInitializeEvE3__c_23>:
     1d0:	53 65 74 74 69 6e 67 20 6d 6f 74 69 6f 6e 20 64     Setting motion d
     1e0:	65 74 65 63 74 69 6f 6e 20 64 75 72 61 74 69 6f     etection duratio
     1f0:	6e 20 74 6f 20 38 30 2e 2e 2e 00                    n to 80....

000001fb <_ZZN7MPU605013dmpInitializeEvE3__c_22>:
     1fb:	53 65 74 74 69 6e 67 20 7a 65 72 6f 2d 6d 6f 74     Setting zero-mot
     20b:	69 6f 6e 20 64 65 74 65 63 74 69 6f 6e 20 74 68     ion detection th
     21b:	72 65 73 68 6f 6c 64 20 74 6f 20 31 35 36 2e 2e     reshold to 156..
     22b:	2e 00                                               ..

0000022d <_ZZN7MPU605013dmpInitializeEvE3__c_21>:
     22d:	53 65 74 74 69 6e 67 20 6d 6f 74 69 6f 6e 20 64     Setting motion d
     23d:	65 74 65 63 74 69 6f 6e 20 74 68 72 65 73 68 6f     etection thresho
     24d:	6c 64 20 74 6f 20 32 2e 2e 2e 00                    ld to 2....

00000258 <_ZZN7MPU605013dmpInitializeEvE3__c_20>:
     258:	43 6c 65 61 72 69 6e 67 20 4f 54 50 20 42 61 6e     Clearing OTP Ban
     268:	6b 20 66 6c 61 67 2e 2e 2e 00                       k flag....

00000272 <_ZZN7MPU605013dmpInitializeEvE3__c_19>:
     272:	53 75 63 63 65 73 73 21 20 44 4d 50 20 63 6f 64     Success! DMP cod
     282:	65 20 77 72 69 74 74 65 6e 20 61 6e 64 20 76 65     e written and ve
     292:	72 69 66 69 65 64 2e 00                             rified..

0000029a <_ZZN7MPU605013dmpInitializeEvE3__c_18>:
     29a:	20 62 79 74 65 73 29 00                              bytes).

000002a2 <_ZZN7MPU605013dmpInitializeEvE3__c_17>:
     2a2:	57 72 69 74 69 6e 67 20 44 4d 50 20 63 6f 64 65     Writing DMP code
     2b2:	20 74 6f 20 4d 50 55 20 6d 65 6d 6f 72 79 20 62      to MPU memory b
     2c2:	61 6e 6b 73 20 28 00                                anks (.

000002c9 <_ZZN7MPU605013dmpInitializeEvE3__c_16>:
     2c9:	53 65 74 74 69 6e 67 20 67 79 72 6f 20 73 65 6e     Setting gyro sen
     2d9:	73 69 74 69 76 69 74 79 20 74 6f 20 2b 2f 2d 20     sitivity to +/- 
     2e9:	32 30 30 30 20 64 65 67 2f 73 65 63 2e 2e 2e 00     2000 deg/sec....

000002f9 <_ZZN7MPU605013dmpInitializeEvE3__c_15>:
     2f9:	53 65 74 74 69 6e 67 20 44 4c 50 46 20 62 61 6e     Setting DLPF ban
     309:	64 77 69 64 74 68 20 74 6f 20 34 32 48 7a 2e 2e     dwidth to 42Hz..
     319:	2e 00                                               ..

0000031b <_ZZN7MPU605013dmpInitializeEvE3__c_14>:
     31b:	53 65 74 74 69 6e 67 20 65 78 74 65 72 6e 61 6c     Setting external
     32b:	20 66 72 61 6d 65 20 73 79 6e 63 20 74 6f 20 54      frame sync to T
     33b:	45 4d 50 5f 4f 55 54 5f 4c 5b 30 5d 2e 2e 2e 00     EMP_OUT_L[0]....

0000034b <_ZZN7MPU605013dmpInitializeEvE3__c_13>:
     34b:	53 65 74 74 69 6e 67 20 73 61 6d 70 6c 65 20 72     Setting sample r
     35b:	61 74 65 20 74 6f 20 32 30 30 48 7a 2e 2e 2e 00     ate to 200Hz....

0000036b <_ZZN7MPU605013dmpInitializeEvE3__c_12>:
     36b:	53 65 74 74 69 6e 67 20 44 4d 50 20 61 6e 64 20     Setting DMP and 
     37b:	46 49 46 4f 5f 4f 46 4c 4f 57 20 69 6e 74 65 72     FIFO_OFLOW inter
     38b:	72 75 70 74 73 20 65 6e 61 62 6c 65 64 2e 2e 2e     rupts enabled...
	...

0000039c <_ZZN7MPU605013dmpInitializeEvE3__c_11>:
     39c:	53 65 74 74 69 6e 67 20 63 6c 6f 63 6b 20 73 6f     Setting clock so
     3ac:	75 72 63 65 20 74 6f 20 5a 20 47 79 72 6f 2e 2e     urce to Z Gyro..
     3bc:	2e 00                                               ..

000003be <_ZZN7MPU605013dmpInitializeEvE3__c_10>:
     3be:	52 65 73 65 74 74 69 6e 67 20 49 32 43 20 4d 61     Resetting I2C Ma
     3ce:	73 74 65 72 20 63 6f 6e 74 72 6f 6c 2e 2e 2e 00     ster control....

000003de <_ZZN7MPU605013dmpInitializeEvE3__c_9>:
     3de:	53 65 74 74 69 6e 67 20 73 6c 61 76 65 20 30 20     Setting slave 0 
     3ee:	61 64 64 72 65 73 73 20 74 6f 20 30 78 36 38 20     address to 0x68 
     3fe:	28 73 65 6c 66 29 2e 2e 2e 00                       (self)....

00000408 <_ZZN7MPU605013dmpInitializeEvE3__c_8>:
     408:	44 69 73 61 62 6c 69 6e 67 20 49 32 43 20 4d 61     Disabling I2C Ma
     418:	73 74 65 72 20 6d 6f 64 65 2e 2e 2e 00              ster mode....

00000425 <_ZZN7MPU605013dmpInitializeEvE3__c_7>:
     425:	53 65 74 74 69 6e 67 20 73 6c 61 76 65 20 30 20     Setting slave 0 
     435:	61 64 64 72 65 73 73 20 74 6f 20 30 78 37 46 2e     address to 0x7F.
     445:	2e 2e 00                                            ...

00000448 <_ZZN7MPU605013dmpInitializeEvE3__c_6>:
     448:	69 6e 76 61 6c 69 64 21 00                          invalid!.

00000451 <_ZZN7MPU605013dmpInitializeEvE3__c_5>:
     451:	76 61 6c 69 64 21 00                                valid!.

00000458 <_ZZN7MPU605013dmpInitializeEvE3__c_4>:
     458:	4f 54 50 20 62 61 6e 6b 20 69 73 20 00              OTP bank is .

00000465 <_ZZN7MPU605013dmpInitializeEvE3__c_3>:
     465:	52 65 61 64 69 6e 67 20 4f 54 50 20 62 61 6e 6b     Reading OTP bank
     475:	20 76 61 6c 69 64 20 66 6c 61 67 2e 2e 2e 00         valid flag....

00000484 <_ZZN7MPU605013dmpInitializeEvE3__c_2>:
     484:	52 65 73 65 74 74 69 6e 67 20 6d 65 6d 6f 72 79     Resetting memory
     494:	20 62 61 6e 6b 20 73 65 6c 65 63 74 69 6f 6e 20      bank selection 
     4a4:	74 6f 20 30 2e 2e 2e 00                             to 0....

000004ac <_ZZN7MPU605013dmpInitializeEvE3__c_1>:
     4ac:	52 65 76 69 73 69 6f 6e 20 40 20 75 73 65 72 5b     Revision @ user[
     4bc:	31 36 5d 5b 36 5d 20 3d 20 00                       16][6] = .

000004c6 <_ZZN7MPU605013dmpInitializeEvE3__c_0>:
     4c6:	43 68 65 63 6b 69 6e 67 20 68 61 72 64 77 61 72     Checking hardwar
     4d6:	65 20 72 65 76 69 73 69 6f 6e 2e 2e 2e 00           e revision....

000004e4 <_ZZN7MPU605013dmpInitializeEvE3__c>:
     4e4:	0a 0a 52 65 73 65 74 74 69 6e 67 20 4d 50 55 36     ..Resetting MPU6
     4f4:	30 35 30 2e 2e 2e 00                                050....

000004fb <_ZL9dmpMemory>:
     4fb:	fb 00 00 3e 00 0b 00 36 00 01 00 02 00 03 00 00     ...>...6........
     50b:	00 65 00 54 ff ef 00 00 fa 80 00 0b 12 82 00 01     .e.T............
     51b:	00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     52b:	00 28 00 00 ff ff 45 81 ff ff fa 72 00 00 00 00     .(....E....r....
     53b:	00 00 03 e8 00 00 00 01 00 01 7f ff ff fe 80 01     ................
     54b:	00 1b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     55b:	00 40 00 00 40 00 00 00 02 cb 47 a2 20 00 00 00     .@..@.....G. ...
     56b:	20 00 00 00 00 00 00 00 40 00 00 00 60 00 00 00      .......@...`...
     57b:	41 ff 00 00 00 00 0b 2a 00 00 16 55 00 00 21 82     A......*...U..!.
     58b:	fd 87 26 50 fd 80 00 00 00 1f 00 00 00 05 80 00     ..&P............
     59b:	00 00 00 00 00 01 00 00 00 02 00 00 00 03 00 00     ................
     5ab:	40 00 00 00 00 00 04 6f 00 02 65 32 00 00 5e c0     @......o..e2..^.
     5bb:	40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     @...............
     5cb:	fb 8c 6f 5d fd 5d 08 d9 00 7c 73 3b 00 6c 12 cc     ..o].]...|s;.l..
     5db:	32 00 13 9d 32 00 d0 d6 32 00 08 00 40 00 01 f4     2...2...2...@...
     5eb:	ff e6 80 79 02 00 00 00 00 00 d0 d6 00 00 27 10     ...y..........'.
     5fb:	fb 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00     ....@...........
     60b:	00 00 00 01 00 00 00 00 00 00 01 00 01 00 00 00     ................
     61b:	00 00 fa 36 ff bc 30 8e 00 05 fb f0 ff d9 5b c8     ...6..0.......[.
     62b:	ff d0 9a be 00 00 10 a9 ff f4 1e b2 00 ce bb f7     ................
     63b:	00 00 00 01 00 00 00 04 00 02 00 02 02 00 00 0c     ................
     64b:	ff c2 80 00 00 01 80 00 00 cf 80 00 40 00 00 00     ............@...
	...
     663:	00 00 06 00 00 00 00 14 00 00 00 00 00 00 00 00     ................
	...
     68b:	09 23 a1 35 00 00 00 00 00 00 00 00 00 00 00 00     .#.5............
     69b:	00 00 00 00 03 3f 68 b6 79 35 28 bc c6 7e d1 6c     .....?h.y5(..~.l
     6ab:	80 00 ff ff 40 00 00 00 00 00 b2 6a 00 00 00 00     ....@......j....
	...
     6c3:	00 00 3f f0 00 00 00 30 00 00 00 00 00 00 00 00     ..?....0........
	...
     6e7:	00 00 40 00 00 00 25 4d 00 2f 70 6d 00 00 05 ae     ..@...%M./pm....
     6f7:	00 0c 02 d0 00 00 00 00 00 65 00 54 ff ef 00 00     .........e.T....
     707:	00 00 00 00 00 00 01 00 00 44 00 01 00 05 8b c1     .........D......
     717:	00 00 01 00 00 00 00 00 00 65 00 00 00 54 00 00     .........e...T..
     727:	ff ef 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     75b:	00 00 00 01 00 00 00 02 00 00 00 00 00 00 00 00     ................
	...
     78b:	00 1b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     7bb:	00 1b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     7fb:	d8 dc ba a2 f1 de b2 b8 b4 a8 81 91 f7 4a 90 7f     .............J..
     80b:	91 6a f3 f9 db a8 f9 b0 ba a0 80 f2 ce 81 f3 c2     .j..............
     81b:	f1 c1 f2 c3 f3 cc a2 b2 80 f1 c6 d8 80 ba a7 df     ................
     82b:	df df f2 a7 c3 cb c5 b6 f0 87 a2 94 24 48 70 3c     ............$Hp<
     83b:	95 40 68 34 58 9b 78 a2 f1 83 92 2d 55 7d d8 b1     .@h4X.x....-U}..
     84b:	b4 b8 a1 d0 91 80 f2 70 f3 70 f2 7c 80 a8 f1 01     .......p.p.|....
     85b:	b0 98 87 d9 43 d8 86 c9 88 ba a1 f2 0e b8 97 80     ....C...........
     86b:	f1 a9 df df df aa df df df f2 aa 4c cd 6c a9 0c     ...........L.l..
     87b:	c9 2c 97 97 97 97 f1 a9 89 26 46 66 b0 b4 ba 80     .,.......&Ff....
     88b:	ac de f2 ca f1 b2 8c 02 a9 b6 98 00 89 0e 16 1e     ................
     89b:	b8 a9 b4 99 2c 54 7c b0 8a a8 96 36 56 76 f1 b9     ....,T|....6Vv..
     8ab:	af b4 b0 83 c0 b8 a8 97 11 b1 8f 98 b9 af f0 24     ...............$
     8bb:	08 44 10 64 18 f1 a3 29 55 7d af 83 b5 93 af f0     .D.d...)U}......
     8cb:	00 28 50 f1 a3 86 9f 61 a6 da de df d9 fa a3 86     .(P....a........
     8db:	96 db 31 a6 d9 f8 df ba a6 8f c2 c5 c7 b2 8c c1     ..1.............
     8eb:	b8 a2 df df df a3 df df df d8 d8 f1 b8 a8 b2 86     ................
     8fb:	b4 98 0d 35 5d b8 aa 98 b0 87 2d 35 3d b2 b6 ba     ...5].....-5=...
     90b:	af 8c 96 19 8f 9f a7 0e 16 1e b4 9a b8 aa 87 2c     ...............,
     91b:	54 7c b9 a3 de df df a3 b1 80 f2 c4 cd c9 f1 b8     T|..............
     92b:	a9 b4 99 83 0d 35 5d 89 b9 a3 2d 55 7d b5 93 a3     .....5]...-U}...
     93b:	0e 16 1e a9 2c 54 7c b8 b4 b0 f1 97 83 a8 11 84     ....,T|.........
     94b:	a5 09 98 a3 83 f0 da 24 08 44 10 64 18 d8 f1 a5     .......$.D.d....
     95b:	29 55 7d a5 85 95 02 1a 2e 3a 56 5a 40 48 f9 f3     )U}......:VZ@H..
     96b:	a3 d9 f8 f0 98 83 24 08 44 10 64 18 97 82 a8 f1     ......$.D.d.....
     97b:	11 f0 98 a2 24 08 44 10 64 18 da f3 de d8 83 a5     ....$.D.d.......
     98b:	94 01 d9 a3 02 f1 a2 c3 c5 c7 d8 f1 84 92 a2 4d     ...............M
     99b:	da 2a d8 48 69 d9 2a d8 68 55 da 32 d8 50 71 d9     .*.Hi.*.hU.2.Pq.
     9ab:	32 d8 70 5d da 3a d8 58 79 d9 3a d8 78 93 a3 4d     2.p].:.Xy.:.x..M
     9bb:	da 2a d8 48 69 d9 2a d8 68 55 da 32 d8 50 71 d9     .*.Hi.*.hU.2.Pq.
     9cb:	32 d8 70 5d da 3a d8 58 79 d9 3a d8 78 a8 8a 9a     2.p].:.Xy.:.x...
     9db:	f0 28 50 78 9e f3 88 18 f1 9f 1d 98 a8 d9 08 d8     .(Px............
     9eb:	c8 9f 12 9e f3 15 a8 da 12 10 d8 f1 af c8 97 87     ................
     9fb:	34 b5 b9 94 a4 21 f3 d9 22 d8 f2 2d f3 d9 2a d8     4....!.."..-..*.
     a0b:	f2 35 f3 d9 32 d8 81 a4 60 60 61 d9 61 d8 6c 68     .5..2...``a.a.lh
     a1b:	69 d9 69 d8 74 70 71 d9 71 d8 b1 a3 84 19 3d 5d     i.i.tpq.q.....=]
     a2b:	a3 83 1a 3e 5e 93 10 30 81 10 11 b8 b0 af 8f 94     ...>^..0........
     a3b:	f2 da 3e d8 b4 9a a8 87 29 da f8 d8 87 9a 35 da     ..>.....).....5.
     a4b:	f8 d8 87 9a 3d da f8 d8 b1 b9 a4 98 85 02 2e 56     ....=..........V
     a5b:	a5 81 00 0c 14 a3 97 b0 8a f1 2d d9 28 d8 4d d9     ..........-.(.M.
     a6b:	48 d8 6d d9 68 d8 b1 84 0d da 0e d8 a3 29 83 da     H.m.h........)..
     a7b:	2c 0e d8 a3 84 49 83 da 2c 4c 0e d8 b8 b0 a8 8a     ,....I..,L......
     a8b:	9a f5 20 aa da df d8 a8 40 aa d0 da de d8 a8 60     .. .....@......`
     a9b:	aa da d0 df d8 f1 97 86 a8 31 9b 06 99 07 ab 97     .........1......
     aab:	28 88 9b f0 0c 20 14 40 b8 b0 b4 a8 8c 9c f0 04     (.... .@........
     abb:	28 51 79 1d 30 14 38 b2 82 ab d0 98 2c 50 50 78     (Qy.0.8.....,PPx
     acb:	78 9b f1 1a b0 f0 8a 9c a8 29 51 79 8b 29 51 79     x........)Qy.)Qy
     adb:	8a 24 70 59 8b 20 58 71 8a 44 69 38 8b 39 40 68     .$pY. Xq.Di8.9@h
     aeb:	8a 64 48 31 8b 30 49 60 a5 88 20 09 71 58 44 68     .dH1.0I`.. .qXDh
     afb:	11 39 64 49 30 19 f1 ac 00 2c 54 7c f0 8c a8 04     .9dI0....,T|....
     b0b:	28 50 78 f1 88 97 26 a8 59 98 ac 8c 02 26 46 66     (Px...&.Y....&Ff
     b1b:	f0 89 9c a8 29 51 79 24 70 59 44 69 38 64 48 31     ....)Qy$pYDi8dH1
     b2b:	a9 88 09 20 59 70 ab 11 38 40 69 a8 19 31 48 60     ... Yp..8@i..1H`
     b3b:	8c a8 3c 41 5c 20 7c 00 f1 87 98 19 86 a8 6e 76     ..<A\ |.......nv
     b4b:	7e a9 99 88 2d 55 7d 9e b9 a3 8a 22 8a 6e 8a 56     ~...-U}....".n.V
     b5b:	8a 5e 9f b1 83 06 26 46 66 0e 2e 4e 6e 9d b8 ad     .^....&Ff..Nn...
     b6b:	00 2c 54 7c f2 b1 8c b4 99 b9 a3 2d 55 7d 81 91     .,T|.......-U}..
     b7b:	ac 38 ad 3a b5 83 91 ac 2d d9 28 d8 4d d9 48 d8     .8.:....-.(.M.H.
     b8b:	6d d9 68 d8 8c 9d ae 29 d9 04 ae d8 51 d9 04 ae     m.h....)....Q...
     b9b:	d8 79 d9 04 d8 81 f3 9d ad 00 8d ae 19 81 ad d9     .y..............
     bab:	01 d8 f2 ae da 26 d8 8e 91 29 83 a7 d9 ad ad ad     .....&...)......
     bbb:	ad f3 2a d8 d8 f1 b0 ac 89 91 3e 5e 76 f3 ac 2e     ..*.......>^v...
     bcb:	2e f1 b1 8c 5a 9c ac 2c 28 28 28 9c ac 30 18 a8     ....Z..,(((..0..
     bdb:	98 81 28 34 3c 97 24 a7 28 34 3c 9c 24 f2 b0 89     ..(4<.$.(4<.$...
     beb:	ac 91 2c 4c 6c 8a 9b 2d d9 d8 d8 51 d9 d8 d8 79     ..,Ll..-...Q...y
     bfb:	d9 d8 d8 f1 9e 88 a3 31 da d8 d8 91 2d d9 28 d8     .......1....-.(.
     c0b:	4d d9 48 d8 6d d9 68 d8 b1 83 93 35 3d 80 25 da     M.H.m.h....5=.%.
     c1b:	d8 d8 85 69 da d8 d8 b4 93 81 a3 28 34 3c f3 ab     ...i.......(4<..
     c2b:	8b f8 a3 91 b6 09 b4 d9 ab de fa b0 87 9c b9 a3     ................
     c3b:	dd f1 20 28 30 38 9a f1 28 30 38 9d f1 a3 a3 a3     .. (08..(08.....
     c4b:	a3 f2 a3 b4 90 80 f2 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
     c5b:	a3 b2 a3 a3 a3 a3 a3 a3 b0 87 b5 99 f1 28 30 38     .............(08
     c6b:	98 f1 a3 a3 a3 a3 97 a3 a3 a3 a3 f3 9b a3 30 dc     ..............0.
     c7b:	b9 a7 f1 26 26 26 fe d8 ff                          ...&&&...

00000c84 <digital_pin_to_timer_PGM>:
     c84:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     c94:	00 00 00 00                                         ....

00000c98 <digital_pin_to_bit_mask_PGM>:
     c98:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     ca8:	04 08 10 20                                         ... 

00000cac <digital_pin_to_port_PGM>:
     cac:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     cbc:	03 03 03 03                                         ....

00000cc0 <port_to_output_PGM>:
     cc0:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000cca <__ctors_start>:
     cca:	32 10       	cpse	r3, r2
     ccc:	ba 15       	cp	r27, r10
     cce:	4c 1b       	sub	r20, r28

00000cd0 <__ctors_end>:
     cd0:	11 24       	eor	r1, r1
     cd2:	1f be       	out	0x3f, r1	; 63
     cd4:	cf ef       	ldi	r28, 0xFF	; 255
     cd6:	d8 e0       	ldi	r29, 0x08	; 8
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	cd bf       	out	0x3d, r28	; 61

00000cdc <__do_copy_data>:
     cdc:	11 e0       	ldi	r17, 0x01	; 1
     cde:	a0 e0       	ldi	r26, 0x00	; 0
     ce0:	b1 e0       	ldi	r27, 0x01	; 1
     ce2:	ea ec       	ldi	r30, 0xCA	; 202
     ce4:	f0 e4       	ldi	r31, 0x40	; 64
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <__do_copy_data+0x10>
     ce8:	05 90       	lpm	r0, Z+
     cea:	0d 92       	st	X+, r0
     cec:	a2 34       	cpi	r26, 0x42	; 66
     cee:	b1 07       	cpc	r27, r17
     cf0:	d9 f7       	brne	.-10     	; 0xce8 <__do_copy_data+0xc>

00000cf2 <__do_clear_bss>:
     cf2:	23 e0       	ldi	r18, 0x03	; 3
     cf4:	a2 e4       	ldi	r26, 0x42	; 66
     cf6:	b1 e0       	ldi	r27, 0x01	; 1
     cf8:	01 c0       	rjmp	.+2      	; 0xcfc <.do_clear_bss_start>

00000cfa <.do_clear_bss_loop>:
     cfa:	1d 92       	st	X+, r1

00000cfc <.do_clear_bss_start>:
     cfc:	a1 36       	cpi	r26, 0x61	; 97
     cfe:	b2 07       	cpc	r27, r18
     d00:	e1 f7       	brne	.-8      	; 0xcfa <.do_clear_bss_loop>

00000d02 <__do_global_ctors>:
     d02:	16 e0       	ldi	r17, 0x06	; 6
     d04:	c8 e6       	ldi	r28, 0x68	; 104
     d06:	d6 e0       	ldi	r29, 0x06	; 6
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <__do_global_ctors+0x10>
     d0a:	21 97       	sbiw	r28, 0x01	; 1
     d0c:	fe 01       	movw	r30, r28
     d0e:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <__tablejump2__>
     d12:	c5 36       	cpi	r28, 0x65	; 101
     d14:	d1 07       	cpc	r29, r17
     d16:	c9 f7       	brne	.-14     	; 0xd0a <__do_global_ctors+0x8>
     d18:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <main>
     d1c:	0c 94 63 20 	jmp	0x40c6	; 0x40c6 <_exit>

00000d20 <__bad_interrupt>:
     d20:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000d24 <_ZN6KalmanC1Ev>:
	P[0][1] -= K[0] * P01_temp;
	P[1][0] -= K[1] * P00_temp;
	P[1][1] -= K[1] * P01_temp;

	return angle;
};
     d24:	fc 01       	movw	r30, r24
     d26:	8f e6       	ldi	r24, 0x6F	; 111
     d28:	92 e1       	ldi	r25, 0x12	; 18
     d2a:	a3 e8       	ldi	r26, 0x83	; 131
     d2c:	ba e3       	ldi	r27, 0x3A	; 58
     d2e:	80 83       	st	Z, r24
     d30:	91 83       	std	Z+1, r25	; 0x01
     d32:	a2 83       	std	Z+2, r26	; 0x02
     d34:	b3 83       	std	Z+3, r27	; 0x03
     d36:	84 83       	std	Z+4, r24	; 0x04
     d38:	95 83       	std	Z+5, r25	; 0x05
     d3a:	a6 83       	std	Z+6, r26	; 0x06
     d3c:	b7 83       	std	Z+7, r27	; 0x07
     d3e:	8f e8       	ldi	r24, 0x8F	; 143
     d40:	92 ec       	ldi	r25, 0xC2	; 194
     d42:	a5 ef       	ldi	r26, 0xF5	; 245
     d44:	bc e3       	ldi	r27, 0x3C	; 60
     d46:	80 87       	std	Z+8, r24	; 0x08
     d48:	91 87       	std	Z+9, r25	; 0x09
     d4a:	a2 87       	std	Z+10, r26	; 0x0a
     d4c:	b3 87       	std	Z+11, r27	; 0x0b
     d4e:	14 86       	std	Z+12, r1	; 0x0c
     d50:	15 86       	std	Z+13, r1	; 0x0d
     d52:	16 86       	std	Z+14, r1	; 0x0e
     d54:	17 86       	std	Z+15, r1	; 0x0f
     d56:	10 8a       	std	Z+16, r1	; 0x10
     d58:	11 8a       	std	Z+17, r1	; 0x11
     d5a:	12 8a       	std	Z+18, r1	; 0x12
     d5c:	13 8a       	std	Z+19, r1	; 0x13
     d5e:	10 8e       	std	Z+24, r1	; 0x18
     d60:	11 8e       	std	Z+25, r1	; 0x19
     d62:	12 8e       	std	Z+26, r1	; 0x1a
     d64:	13 8e       	std	Z+27, r1	; 0x1b
     d66:	14 8e       	std	Z+28, r1	; 0x1c
     d68:	15 8e       	std	Z+29, r1	; 0x1d
     d6a:	16 8e       	std	Z+30, r1	; 0x1e
     d6c:	17 8e       	std	Z+31, r1	; 0x1f
     d6e:	10 a2       	std	Z+32, r1	; 0x20
     d70:	11 a2       	std	Z+33, r1	; 0x21
     d72:	12 a2       	std	Z+34, r1	; 0x22
     d74:	13 a2       	std	Z+35, r1	; 0x23
     d76:	14 a2       	std	Z+36, r1	; 0x24
     d78:	15 a2       	std	Z+37, r1	; 0x25
     d7a:	16 a2       	std	Z+38, r1	; 0x26
     d7c:	17 a2       	std	Z+39, r1	; 0x27
     d7e:	08 95       	ret

00000d80 <_ZN6Kalman8setAngleEf>:

void Kalman::setAngle(float angle) { this->angle = angle; }; // Used to set angle, this should be set as the starting angle
     d80:	fc 01       	movw	r30, r24
     d82:	44 87       	std	Z+12, r20	; 0x0c
     d84:	55 87       	std	Z+13, r21	; 0x0d
     d86:	66 87       	std	Z+14, r22	; 0x0e
     d88:	77 87       	std	Z+15, r23	; 0x0f
     d8a:	08 95       	ret

00000d8c <_ZN6I2Cdev10writeBytesEhhhPh>:
 * @param regAddr First register address to write to
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data) {
     d8c:	ff 92       	push	r15
     d8e:	0f 93       	push	r16
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	c6 2f       	mov	r28, r22
     d98:	14 2f       	mov	r17, r20
     d9a:	f2 2e       	mov	r15, r18
     d9c:	03 2f       	mov	r16, r19
        Wire.beginTransmission(devAddr);
        Wire.send((uint8_t) regAddr); // send address
    #elif ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100) \
            || (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_SBWIRE && ARDUINO >= 100) \
            || I2CDEV_IMPLEMENTATION == I2CDEV_TEENSY_3X_WIRE)
        Wire.beginTransmission(devAddr);
     d9e:	68 2f       	mov	r22, r24
     da0:	83 e9       	ldi	r24, 0x93	; 147
     da2:	92 e0       	ldi	r25, 0x02	; 2
     da4:	0e 94 c5 1a 	call	0x358a	; 0x358a <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t) regAddr); // send address
     da8:	6c 2f       	mov	r22, r28
     daa:	83 e9       	ldi	r24, 0x93	; 147
     dac:	92 e0       	ldi	r25, 0x02	; 2
     dae:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <_ZN7TwoWire5writeEh>
     db2:	cf 2d       	mov	r28, r15
     db4:	d0 2f       	mov	r29, r16
     db6:	ce 01       	movw	r24, r28
     db8:	81 0f       	add	r24, r17
     dba:	91 1d       	adc	r25, r1
     dbc:	8c 01       	movw	r16, r24
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) {
     dbe:	c0 17       	cp	r28, r16
     dc0:	d1 07       	cpc	r29, r17
     dc2:	31 f0       	breq	.+12     	; 0xdd0 <_ZN6I2Cdev10writeBytesEhhhPh+0x44>
        #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
            Wire.send((uint8_t) data[i]);
        #elif ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100) \
                || (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_SBWIRE && ARDUINO >= 100) \
                || I2CDEV_IMPLEMENTATION == I2CDEV_TEENSY_3X_WIRE)
            Wire.write((uint8_t) data[i]);
     dc4:	69 91       	ld	r22, Y+
     dc6:	83 e9       	ldi	r24, 0x93	; 147
     dc8:	92 e0       	ldi	r25, 0x02	; 2
     dca:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <_ZN7TwoWire5writeEh>
        Wire.write((uint8_t) regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) {
     dce:	f7 cf       	rjmp	.-18     	; 0xdbe <_ZN6I2Cdev10writeBytesEhhhPh+0x32>
    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
        Wire.endTransmission();
    #elif ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100) \
            || (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_SBWIRE && ARDUINO >= 100) \
            || I2CDEV_IMPLEMENTATION == I2CDEV_TEENSY_3X_WIRE)
        status = Wire.endTransmission();
     dd0:	83 e9       	ldi	r24, 0x93	; 147
     dd2:	92 e0       	ldi	r25, 0x02	; 2
     dd4:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN7TwoWire15endTransmissionEv>
        //status = Fastwire::endTransmission();
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
     dd8:	91 e0       	ldi	r25, 0x01	; 1
     dda:	81 11       	cpse	r24, r1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
}
     dde:	89 2f       	mov	r24, r25
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	1f 91       	pop	r17
     de6:	0f 91       	pop	r16
     de8:	ff 90       	pop	r15
     dea:	08 95       	ret

00000dec <_ZN6I2Cdev9writeByteEhhh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	1f 92       	push	r1
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
     df6:	49 83       	std	Y+1, r20	; 0x01
    return writeBytes(devAddr, regAddr, 1, &data);
     df8:	9e 01       	movw	r18, r28
     dfa:	2f 5f       	subi	r18, 0xFF	; 255
     dfc:	3f 4f       	sbci	r19, 0xFF	; 255
     dfe:	41 e0       	ldi	r20, 0x01	; 1
     e00:	0e 94 c6 06 	call	0xd8c	; 0xd8c <_ZN6I2Cdev10writeBytesEhhhPh>
}
     e04:	0f 90       	pop	r0
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	08 95       	ret

00000e0c <_ZN6I2Cdev10writeWordsEhhhPj>:
 * @param regAddr First register address to write to
 * @param length Number of words to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeWords(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint16_t* data) {
     e0c:	ef 92       	push	r14
     e0e:	ff 92       	push	r15
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	c6 2f       	mov	r28, r22
     e1a:	04 2f       	mov	r16, r20
     e1c:	f2 2e       	mov	r15, r18
     e1e:	13 2f       	mov	r17, r19
        Wire.beginTransmission(devAddr);
        Wire.send(regAddr); // send address
    #elif ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100) \
            || (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_SBWIRE && ARDUINO >= 100) \
            || I2CDEV_IMPLEMENTATION == I2CDEV_TEENSY_3X_WIRE)
        Wire.beginTransmission(devAddr);
     e20:	68 2f       	mov	r22, r24
     e22:	83 e9       	ldi	r24, 0x93	; 147
     e24:	92 e0       	ldi	r25, 0x02	; 2
     e26:	0e 94 c5 1a 	call	0x358a	; 0x358a <_ZN7TwoWire17beginTransmissionEh>
        Wire.write(regAddr); // send address
     e2a:	6c 2f       	mov	r22, r28
     e2c:	83 e9       	ldi	r24, 0x93	; 147
     e2e:	92 e0       	ldi	r25, 0x02	; 2
     e30:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <_ZN7TwoWire5writeEh>
     e34:	cf 2d       	mov	r28, r15
     e36:	d1 2f       	mov	r29, r17
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) { 
     e38:	10 e0       	ldi	r17, 0x00	; 0
     e3a:	10 17       	cp	r17, r16
     e3c:	69 f0       	breq	.+26     	; 0xe58 <_ZN6I2Cdev10writeWordsEhhhPj+0x4c>
            Wire.send((uint8_t)(data[i] >> 8));     // send MSB
            Wire.send((uint8_t)data[i]);          // send LSB
        #elif ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100) \
                || (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_SBWIRE && ARDUINO >= 100) \
                || I2CDEV_IMPLEMENTATION == I2CDEV_TEENSY_3X_WIRE)
            Wire.write((uint8_t)(data[i] >> 8));    // send MSB
     e3e:	69 81       	ldd	r22, Y+1	; 0x01
     e40:	83 e9       	ldi	r24, 0x93	; 147
     e42:	92 e0       	ldi	r25, 0x02	; 2
     e44:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <_ZN7TwoWire5writeEh>
            Wire.write((uint8_t)data[i]);         // send LSB
     e48:	68 81       	ld	r22, Y
     e4a:	22 96       	adiw	r28, 0x02	; 2
     e4c:	83 e9       	ldi	r24, 0x93	; 147
     e4e:	92 e0       	ldi	r25, 0x02	; 2
     e50:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <_ZN7TwoWire5writeEh>
        Wire.write(regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) { 
     e54:	1f 5f       	subi	r17, 0xFF	; 255
     e56:	f1 cf       	rjmp	.-30     	; 0xe3a <_ZN6I2Cdev10writeWordsEhhhPj+0x2e>
    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
        Wire.endTransmission();
    #elif ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100) \
            || (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_SBWIRE && ARDUINO >= 100) \
            || I2CDEV_IMPLEMENTATION == I2CDEV_TEENSY_3X_WIRE)
        status = Wire.endTransmission();
     e58:	83 e9       	ldi	r24, 0x93	; 147
     e5a:	92 e0       	ldi	r25, 0x02	; 2
     e5c:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN7TwoWire15endTransmissionEv>
        //status = Fastwire::endTransmission();
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
     e60:	91 e0       	ldi	r25, 0x01	; 1
     e62:	81 11       	cpse	r24, r1
     e64:	90 e0       	ldi	r25, 0x00	; 0
}
     e66:	89 2f       	mov	r24, r25
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	ff 90       	pop	r15
     e72:	ef 90       	pop	r14
     e74:	08 95       	ret

00000e76 <_ZN6I2Cdev9writeWordEhhj>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New word value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeWord(uint8_t devAddr, uint8_t regAddr, uint16_t data) {
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <_ZN6I2Cdev9writeWordEhhj+0x6>
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	5a 83       	std	Y+2, r21	; 0x02
     e82:	49 83       	std	Y+1, r20	; 0x01
    return writeWords(devAddr, regAddr, 1, &data);
     e84:	9e 01       	movw	r18, r28
     e86:	2f 5f       	subi	r18, 0xFF	; 255
     e88:	3f 4f       	sbci	r19, 0xFF	; 255
     e8a:	41 e0       	ldi	r20, 0x01	; 1
     e8c:	0e 94 06 07 	call	0xe0c	; 0xe0c <_ZN6I2Cdev10writeWordsEhhhPj>
}
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	08 95       	ret

00000e9a <_ZN6I2Cdev9readBytesEhhhPhj>:
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {
     e9a:	3f 92       	push	r3
     e9c:	4f 92       	push	r4
     e9e:	5f 92       	push	r5
     ea0:	6f 92       	push	r6
     ea2:	7f 92       	push	r7
     ea4:	8f 92       	push	r8
     ea6:	9f 92       	push	r9
     ea8:	af 92       	push	r10
     eaa:	bf 92       	push	r11
     eac:	cf 92       	push	r12
     eae:	df 92       	push	r13
     eb0:	ef 92       	push	r14
     eb2:	ff 92       	push	r15
     eb4:	0f 93       	push	r16
     eb6:	1f 93       	push	r17
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
     ebc:	00 d0       	rcall	.+0      	; 0xebe <_ZN6I2Cdev9readBytesEhhhPhj+0x24>
     ebe:	00 d0       	rcall	.+0      	; 0xec0 <_ZN6I2Cdev9readBytesEhhhPhj+0x26>
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <_ZN6I2Cdev9readBytesEhhhPhj+0x28>
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	d8 2e       	mov	r13, r24
     ec8:	c6 2e       	mov	r12, r22
     eca:	4d 83       	std	Y+5, r20	; 0x05
     ecc:	79 01       	movw	r14, r18
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif

    int8_t count = 0;
    uint32_t t1 = millis();
     ece:	0e 94 e5 18 	call	0x31ca	; 0x31ca <millis>
     ed2:	4b 01       	movw	r8, r22
     ed4:	5c 01       	movw	r10, r24
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min((int)length, BUFFER_LENGTH)) {
     ed6:	31 2c       	mov	r3, r1
        Serial.print(" bytes from 0x");
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif

    int8_t count = 0;
     ed8:	1e 82       	std	Y+6, r1	; 0x06
            for (uint8_t k = 0; k < length; k += min((int)length, BUFFER_LENGTH)) {
                Wire.beginTransmission(devAddr);
                Wire.write(regAddr);
                Wire.endTransmission();
                Wire.beginTransmission(devAddr);
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
     eda:	9d 81       	ldd	r25, Y+5	; 0x05
     edc:	89 2f       	mov	r24, r25
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	9c 83       	std	Y+4, r25	; 0x04
     ee2:	8b 83       	std	Y+3, r24	; 0x03
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
     ee4:	28 01       	movw	r4, r16
     ee6:	61 2c       	mov	r6, r1
     ee8:	71 2c       	mov	r7, r1
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min((int)length, BUFFER_LENGTH)) {
     eea:	ed 81       	ldd	r30, Y+5	; 0x05
     eec:	3e 16       	cp	r3, r30
     eee:	c8 f5       	brcc	.+114    	; 0xf62 <_ZN6I2Cdev9readBytesEhhhPhj+0xc8>
                Wire.beginTransmission(devAddr);
     ef0:	6d 2d       	mov	r22, r13
     ef2:	83 e9       	ldi	r24, 0x93	; 147
     ef4:	92 e0       	ldi	r25, 0x02	; 2
     ef6:	0e 94 c5 1a 	call	0x358a	; 0x358a <_ZN7TwoWire17beginTransmissionEh>
                Wire.write(regAddr);
     efa:	6c 2d       	mov	r22, r12
     efc:	83 e9       	ldi	r24, 0x93	; 147
     efe:	92 e0       	ldi	r25, 0x02	; 2
     f00:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <_ZN7TwoWire5writeEh>
                Wire.endTransmission();
     f04:	83 e9       	ldi	r24, 0x93	; 147
     f06:	92 e0       	ldi	r25, 0x02	; 2
     f08:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN7TwoWire15endTransmissionEv>
                Wire.beginTransmission(devAddr);
     f0c:	6d 2d       	mov	r22, r13
     f0e:	83 e9       	ldi	r24, 0x93	; 147
     f10:	92 e0       	ldi	r25, 0x02	; 2
     f12:	0e 94 c5 1a 	call	0x358a	; 0x358a <_ZN7TwoWire17beginTransmissionEh>
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
     f16:	4b 81       	ldd	r20, Y+3	; 0x03
     f18:	5c 81       	ldd	r21, Y+4	; 0x04
     f1a:	43 19       	sub	r20, r3
     f1c:	51 09       	sbc	r21, r1
     f1e:	41 32       	cpi	r20, 0x21	; 33
     f20:	51 05       	cpc	r21, r1
     f22:	14 f0       	brlt	.+4      	; 0xf28 <_ZN6I2Cdev9readBytesEhhhPhj+0x8e>
     f24:	40 e2       	ldi	r20, 0x20	; 32
     f26:	50 e0       	ldi	r21, 0x00	; 0
     f28:	6d 2d       	mov	r22, r13
     f2a:	83 e9       	ldi	r24, 0x93	; 147
     f2c:	92 e0       	ldi	r25, 0x02	; 2
     f2e:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN7TwoWire11requestFromEhh>
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
     f32:	83 e9       	ldi	r24, 0x93	; 147
     f34:	92 e0       	ldi	r25, 0x02	; 2
     f36:	0e 94 e5 19 	call	0x33ca	; 0x33ca <_ZN7TwoWire9availableEv>
     f3a:	89 2b       	or	r24, r25
     f3c:	09 f4       	brne	.+2      	; 0xf40 <_ZN6I2Cdev9readBytesEhhhPhj+0xa6>
     f3e:	43 c0       	rjmp	.+134    	; 0xfc6 <_ZN6I2Cdev9readBytesEhhhPhj+0x12c>
     f40:	01 15       	cp	r16, r1
     f42:	11 05       	cpc	r17, r1
     f44:	69 f1       	breq	.+90     	; 0xfa0 <_ZN6I2Cdev9readBytesEhhhPhj+0x106>
     f46:	0e 94 e5 18 	call	0x31ca	; 0x31ca <millis>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	88 19       	sub	r24, r8
     f50:	99 09       	sbc	r25, r9
     f52:	aa 09       	sbc	r26, r10
     f54:	bb 09       	sbc	r27, r11
     f56:	84 15       	cp	r24, r4
     f58:	95 05       	cpc	r25, r5
     f5a:	a6 05       	cpc	r26, r6
     f5c:	b7 05       	cpc	r27, r7
     f5e:	00 f1       	brcs	.+64     	; 0xfa0 <_ZN6I2Cdev9readBytesEhhhPhj+0x106>
     f60:	32 c0       	rjmp	.+100    	; 0xfc6 <_ZN6I2Cdev9readBytesEhhhPhj+0x12c>
        }

    #endif

    // check for timeout
    if (timeout > 0 && millis() - t1 >= timeout && count < length) count = -1; // timeout
     f62:	01 15       	cp	r16, r1
     f64:	11 05       	cpc	r17, r1
     f66:	a9 f1       	breq	.+106    	; 0xfd2 <_ZN6I2Cdev9readBytesEhhhPhj+0x138>
     f68:	0e 94 e5 18 	call	0x31ca	; 0x31ca <millis>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	88 19       	sub	r24, r8
     f72:	99 09       	sbc	r25, r9
     f74:	aa 09       	sbc	r26, r10
     f76:	bb 09       	sbc	r27, r11
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	80 17       	cp	r24, r16
     f7e:	91 07       	cpc	r25, r17
     f80:	a2 07       	cpc	r26, r18
     f82:	b3 07       	cpc	r27, r19
     f84:	30 f1       	brcs	.+76     	; 0xfd2 <_ZN6I2Cdev9readBytesEhhhPhj+0x138>
     f86:	fd 81       	ldd	r31, Y+5	; 0x05
     f88:	2f 2f       	mov	r18, r31
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	4e 81       	ldd	r20, Y+6	; 0x06
     f8e:	84 2f       	mov	r24, r20
     f90:	44 0f       	add	r20, r20
     f92:	99 0b       	sbc	r25, r25
     f94:	82 17       	cp	r24, r18
     f96:	93 07       	cpc	r25, r19
     f98:	e4 f4       	brge	.+56     	; 0xfd2 <_ZN6I2Cdev9readBytesEhhhPhj+0x138>
     f9a:	8f ef       	ldi	r24, 0xFF	; 255
     f9c:	8e 83       	std	Y+6, r24	; 0x06
        Serial.print(". Done (");
        Serial.print(count, DEC);
        Serial.println(" read).");
    #endif

    return count;
     f9e:	19 c0       	rjmp	.+50     	; 0xfd2 <_ZN6I2Cdev9readBytesEhhhPhj+0x138>
                Wire.endTransmission();
                Wire.beginTransmission(devAddr);
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
                    data[count] = Wire.read();
     fa0:	f7 01       	movw	r30, r14
     fa2:	2e 81       	ldd	r18, Y+6	; 0x06
     fa4:	e2 0f       	add	r30, r18
     fa6:	f1 1d       	adc	r31, r1
     fa8:	27 fd       	sbrc	r18, 7
     faa:	fa 95       	dec	r31
     fac:	fa 83       	std	Y+2, r31	; 0x02
     fae:	e9 83       	std	Y+1, r30	; 0x01
     fb0:	83 e9       	ldi	r24, 0x93	; 147
     fb2:	92 e0       	ldi	r25, 0x02	; 2
     fb4:	0e 94 ed 19 	call	0x33da	; 0x33da <_ZN7TwoWire4readEv>
     fb8:	e9 81       	ldd	r30, Y+1	; 0x01
     fba:	fa 81       	ldd	r31, Y+2	; 0x02
     fbc:	80 83       	st	Z, r24
     fbe:	fe 81       	ldd	r31, Y+6	; 0x06
     fc0:	ff 5f       	subi	r31, 0xFF	; 255
     fc2:	fe 83       	std	Y+6, r31	; 0x06
                Wire.write(regAddr);
                Wire.endTransmission();
                Wire.beginTransmission(devAddr);
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
     fc4:	b6 cf       	rjmp	.-148    	; 0xf32 <_ZN6I2Cdev9readBytesEhhhPhj+0x98>
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min((int)length, BUFFER_LENGTH)) {
     fc6:	8d 81       	ldd	r24, Y+5	; 0x05
     fc8:	81 32       	cpi	r24, 0x21	; 33
     fca:	08 f0       	brcs	.+2      	; 0xfce <_ZN6I2Cdev9readBytesEhhhPhj+0x134>
     fcc:	80 e2       	ldi	r24, 0x20	; 32
     fce:	38 0e       	add	r3, r24
     fd0:	8c cf       	rjmp	.-232    	; 0xeea <_ZN6I2Cdev9readBytesEhhhPhj+0x50>
        Serial.print(count, DEC);
        Serial.println(" read).");
    #endif

    return count;
}
     fd2:	8e 81       	ldd	r24, Y+6	; 0x06
     fd4:	26 96       	adiw	r28, 0x06	; 6
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	f8 94       	cli
     fda:	de bf       	out	0x3e, r29	; 62
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	cd bf       	out	0x3d, r28	; 61
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	ff 90       	pop	r15
     fea:	ef 90       	pop	r14
     fec:	df 90       	pop	r13
     fee:	cf 90       	pop	r12
     ff0:	bf 90       	pop	r11
     ff2:	af 90       	pop	r10
     ff4:	9f 90       	pop	r9
     ff6:	8f 90       	pop	r8
     ff8:	7f 90       	pop	r7
     ffa:	6f 90       	pop	r6
     ffc:	5f 90       	pop	r5
     ffe:	4f 90       	pop	r4
    1000:	3f 90       	pop	r3
    1002:	08 95       	ret

00001004 <_ZN6I2Cdev8readByteEhhPhj>:
 * @param regAddr Register regAddr to read from
 * @param data Container for byte value read from device
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
    1004:	0f 93       	push	r16
    1006:	1f 93       	push	r17
    return readBytes(devAddr, regAddr, 1, data, timeout);
    1008:	89 01       	movw	r16, r18
    100a:	9a 01       	movw	r18, r20
    100c:	41 e0       	ldi	r20, 0x01	; 1
    100e:	0e 94 4d 07 	call	0xe9a	; 0xe9a <_ZN6I2Cdev9readBytesEhhhPhj>
}
    1012:	1f 91       	pop	r17
    1014:	0f 91       	pop	r16
    1016:	08 95       	ret

00001018 <_ZN6I2Cdev7readBitEhhhPhj>:
 * @param bitNum Bit position to read (0-7)
 * @param data Container for single bit value
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t *data, uint16_t timeout) {
    1018:	df 92       	push	r13
    101a:	ef 92       	push	r14
    101c:	ff 92       	push	r15
    101e:	0f 93       	push	r16
    1020:	1f 93       	push	r17
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	1f 92       	push	r1
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	d4 2e       	mov	r13, r20
    102e:	79 01       	movw	r14, r18
    1030:	98 01       	movw	r18, r16
    uint8_t b;
    uint8_t count = readByte(devAddr, regAddr, &b, timeout);
    1032:	ae 01       	movw	r20, r28
    1034:	4f 5f       	subi	r20, 0xFF	; 255
    1036:	5f 4f       	sbci	r21, 0xFF	; 255
    1038:	0e 94 02 08 	call	0x1004	; 0x1004 <_ZN6I2Cdev8readByteEhhPhj>
    *data = b & (1 << bitNum);
    103c:	21 e0       	ldi	r18, 0x01	; 1
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	01 c0       	rjmp	.+2      	; 0x1044 <_ZN6I2Cdev7readBitEhhhPhj+0x2c>
    1042:	22 0f       	add	r18, r18
    1044:	da 94       	dec	r13
    1046:	ea f7       	brpl	.-6      	; 0x1042 <_ZN6I2Cdev7readBitEhhhPhj+0x2a>
    1048:	99 81       	ldd	r25, Y+1	; 0x01
    104a:	29 23       	and	r18, r25
    104c:	f7 01       	movw	r30, r14
    104e:	20 83       	st	Z, r18
    return count;
}
    1050:	0f 90       	pop	r0
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	1f 91       	pop	r17
    1058:	0f 91       	pop	r16
    105a:	ff 90       	pop	r15
    105c:	ef 90       	pop	r14
    105e:	df 90       	pop	r13
    1060:	08 95       	ret

00001062 <_ZN6I2Cdev8readBitsEhhhhPhj>:
 * @param length Number of bits to read (not more than 8)
 * @param data Container for right-aligned value (i.e. '101' read from any bitStart position will equal 0x05)
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout) {
    1062:	cf 92       	push	r12
    1064:	df 92       	push	r13
    1066:	ef 92       	push	r14
    1068:	ff 92       	push	r15
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	1f 92       	push	r1
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	d4 2e       	mov	r13, r20
    107a:	c2 2e       	mov	r12, r18
    107c:	97 01       	movw	r18, r14
    // 76543210 bit numbers
    //    xxx   args: bitStart=4, length=3
    //    010   masked
    //   -> 010 shifted
    uint8_t count, b;
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0) {
    107e:	ae 01       	movw	r20, r28
    1080:	4f 5f       	subi	r20, 0xFF	; 255
    1082:	5f 4f       	sbci	r21, 0xFF	; 255
    1084:	0e 94 02 08 	call	0x1004	; 0x1004 <_ZN6I2Cdev8readByteEhhPhj>
    1088:	88 23       	and	r24, r24
    108a:	f1 f0       	breq	.+60     	; 0x10c8 <_ZN6I2Cdev8readBitsEhhhhPhj+0x66>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    108c:	4d 2d       	mov	r20, r13
    108e:	50 e0       	ldi	r21, 0x00	; 0
    1090:	4c 19       	sub	r20, r12
    1092:	51 09       	sbc	r21, r1
    1094:	4f 5f       	subi	r20, 0xFF	; 255
    1096:	5f 4f       	sbci	r21, 0xFF	; 255
        b &= mask;
        b >>= (bitStart - length + 1);
        *data = b;
    1098:	21 e0       	ldi	r18, 0x01	; 1
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <_ZN6I2Cdev8readBitsEhhhhPhj+0x40>
    109e:	22 0f       	add	r18, r18
    10a0:	33 1f       	adc	r19, r19
    10a2:	ca 94       	dec	r12
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <_ZN6I2Cdev8readBitsEhhhhPhj+0x3c>
    10a6:	21 50       	subi	r18, 0x01	; 1
    10a8:	31 09       	sbc	r19, r1
    10aa:	04 2e       	mov	r0, r20
    10ac:	01 c0       	rjmp	.+2      	; 0x10b0 <_ZN6I2Cdev8readBitsEhhhhPhj+0x4e>
    10ae:	22 0f       	add	r18, r18
    10b0:	0a 94       	dec	r0
    10b2:	ea f7       	brpl	.-6      	; 0x10ae <_ZN6I2Cdev8readBitsEhhhhPhj+0x4c>
    10b4:	99 81       	ldd	r25, Y+1	; 0x01
    10b6:	29 23       	and	r18, r25
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <_ZN6I2Cdev8readBitsEhhhhPhj+0x5e>
    10bc:	35 95       	asr	r19
    10be:	27 95       	ror	r18
    10c0:	4a 95       	dec	r20
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <_ZN6I2Cdev8readBitsEhhhhPhj+0x5a>
    10c4:	f8 01       	movw	r30, r16
    10c6:	20 83       	st	Z, r18
    }
    return count;
}
    10c8:	0f 90       	pop	r0
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	1f 91       	pop	r17
    10d0:	0f 91       	pop	r16
    10d2:	ff 90       	pop	r15
    10d4:	ef 90       	pop	r14
    10d6:	df 90       	pop	r13
    10d8:	cf 90       	pop	r12
    10da:	08 95       	ret

000010dc <_ZN6I2Cdev8writeBitEhhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    10dc:	ef 92       	push	r14
    10de:	ff 92       	push	r15
    10e0:	0f 93       	push	r16
    10e2:	1f 93       	push	r17
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	1f 92       	push	r1
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	18 2f       	mov	r17, r24
    10f0:	06 2f       	mov	r16, r22
    10f2:	f4 2e       	mov	r15, r20
    10f4:	e2 2e       	mov	r14, r18
    uint8_t b;
    readByte(devAddr, regAddr, &b);
    10f6:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    10fa:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    10fe:	ae 01       	movw	r20, r28
    1100:	4f 5f       	subi	r20, 0xFF	; 255
    1102:	5f 4f       	sbci	r21, 0xFF	; 255
    1104:	0e 94 02 08 	call	0x1004	; 0x1004 <_ZN6I2Cdev8readByteEhhPhj>
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    110a:	41 e0       	ldi	r20, 0x01	; 1
    110c:	50 e0       	ldi	r21, 0x00	; 0
    110e:	01 c0       	rjmp	.+2      	; 0x1112 <_ZN6I2Cdev8writeBitEhhhh+0x36>
    1110:	44 0f       	add	r20, r20
    1112:	fa 94       	dec	r15
    1114:	ea f7       	brpl	.-6      	; 0x1110 <_ZN6I2Cdev8writeBitEhhhh+0x34>
    1116:	ee 20       	and	r14, r14
    1118:	11 f0       	breq	.+4      	; 0x111e <_ZN6I2Cdev8writeBitEhhhh+0x42>
    111a:	48 2b       	or	r20, r24
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <_ZN6I2Cdev8writeBitEhhhh+0x46>
    111e:	40 95       	com	r20
    1120:	48 23       	and	r20, r24
    1122:	49 83       	std	Y+1, r20	; 0x01
    return writeByte(devAddr, regAddr, b);
    1124:	60 2f       	mov	r22, r16
    1126:	81 2f       	mov	r24, r17
    1128:	0e 94 f6 06 	call	0xdec	; 0xdec <_ZN6I2Cdev9writeByteEhhh>
}
    112c:	0f 90       	pop	r0
    112e:	df 91       	pop	r29
    1130:	cf 91       	pop	r28
    1132:	1f 91       	pop	r17
    1134:	0f 91       	pop	r16
    1136:	ff 90       	pop	r15
    1138:	ef 90       	pop	r14
    113a:	08 95       	ret

0000113c <_ZN6I2Cdev9writeBitsEhhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
    113c:	df 92       	push	r13
    113e:	ef 92       	push	r14
    1140:	ff 92       	push	r15
    1142:	0f 93       	push	r16
    1144:	1f 93       	push	r17
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	1f 92       	push	r1
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
    1150:	18 2f       	mov	r17, r24
    1152:	f6 2e       	mov	r15, r22
    1154:	e4 2e       	mov	r14, r20
    1156:	d2 2e       	mov	r13, r18
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
    1158:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    115c:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    1160:	ae 01       	movw	r20, r28
    1162:	4f 5f       	subi	r20, 0xFF	; 255
    1164:	5f 4f       	sbci	r21, 0xFF	; 255
    1166:	0e 94 02 08 	call	0x1004	; 0x1004 <_ZN6I2Cdev8readByteEhhPhj>
    116a:	88 23       	and	r24, r24
    116c:	39 f1       	breq	.+78     	; 0x11bc <_ZN6I2Cdev9writeBitsEhhhhh+0x80>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    116e:	2e 2d       	mov	r18, r14
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	2d 19       	sub	r18, r13
    1174:	31 09       	sbc	r19, r1
    1176:	2f 5f       	subi	r18, 0xFF	; 255
    1178:	3f 4f       	sbci	r19, 0xFF	; 255
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <_ZN6I2Cdev9writeBitsEhhhhh+0x48>
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	da 94       	dec	r13
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <_ZN6I2Cdev9writeBitsEhhhhh+0x44>
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	02 2e       	mov	r0, r18
    118c:	01 c0       	rjmp	.+2      	; 0x1190 <_ZN6I2Cdev9writeBitsEhhhhh+0x54>
    118e:	88 0f       	add	r24, r24
    1190:	0a 94       	dec	r0
    1192:	ea f7       	brpl	.-6      	; 0x118e <_ZN6I2Cdev9writeBitsEhhhhh+0x52>
        data <<= (bitStart - length + 1); // shift data into correct position
    1194:	40 2f       	mov	r20, r16
    1196:	50 e0       	ldi	r21, 0x00	; 0
    1198:	ba 01       	movw	r22, r20
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <_ZN6I2Cdev9writeBitsEhhhhh+0x64>
    119c:	66 0f       	add	r22, r22
    119e:	77 1f       	adc	r23, r23
    11a0:	2a 95       	dec	r18
    11a2:	e2 f7       	brpl	.-8      	; 0x119c <_ZN6I2Cdev9writeBitsEhhhhh+0x60>
        data &= mask; // zero all non-important bits in data
        b &= ~(mask); // zero all important bits in existing byte
        b |= data; // combine data with existing byte
    11a4:	48 2f       	mov	r20, r24
    11a6:	40 95       	com	r20
    11a8:	99 81       	ldd	r25, Y+1	; 0x01
    11aa:	49 23       	and	r20, r25
    11ac:	86 23       	and	r24, r22
    11ae:	48 2b       	or	r20, r24
    11b0:	49 83       	std	Y+1, r20	; 0x01
        return writeByte(devAddr, regAddr, b);
    11b2:	6f 2d       	mov	r22, r15
    11b4:	81 2f       	mov	r24, r17
    11b6:	0e 94 f6 06 	call	0xdec	; 0xdec <_ZN6I2Cdev9writeByteEhhh>
    11ba:	01 c0       	rjmp	.+2      	; 0x11be <_ZN6I2Cdev9writeBitsEhhhhh+0x82>
    } else {
        return false;
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    11be:	0f 90       	pop	r0
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	ff 90       	pop	r15
    11ca:	ef 90       	pop	r14
    11cc:	df 90       	pop	r13
    11ce:	08 95       	ret

000011d0 <_ZN7MPU6050C1Eh>:
// DMP_CFG_2 register

uint8_t MPU6050::getDMPConfig2() {
    I2Cdev::readByte(devAddr, MPU6050_RA_DMP_CFG_2, buffer);
    return buffer[0];
}
    11d0:	fc 01       	movw	r30, r24
    11d2:	60 83       	st	Z, r22
    11d4:	08 95       	ret

000011d6 <_ZN7MPU60507setRateEh>:
    11d6:	46 2f       	mov	r20, r22
    11d8:	69 e1       	ldi	r22, 0x19	; 25
    11da:	fc 01       	movw	r30, r24
    11dc:	80 81       	ld	r24, Z
    11de:	0c 94 f6 06 	jmp	0xdec	; 0xdec <_ZN6I2Cdev9writeByteEhhh>

000011e2 <_ZN7MPU605020setExternalFrameSyncEh>:
    11e2:	0f 93       	push	r16
    11e4:	06 2f       	mov	r16, r22
    11e6:	23 e0       	ldi	r18, 0x03	; 3
    11e8:	45 e0       	ldi	r20, 0x05	; 5
    11ea:	6a e1       	ldi	r22, 0x1A	; 26
    11ec:	fc 01       	movw	r30, r24
    11ee:	80 81       	ld	r24, Z
    11f0:	0e 94 9e 08 	call	0x113c	; 0x113c <_ZN6I2Cdev9writeBitsEhhhhh>
    11f4:	0f 91       	pop	r16
    11f6:	08 95       	ret

000011f8 <_ZN7MPU605011setDLPFModeEh>:
    11f8:	0f 93       	push	r16
    11fa:	06 2f       	mov	r16, r22
    11fc:	23 e0       	ldi	r18, 0x03	; 3
    11fe:	42 e0       	ldi	r20, 0x02	; 2
    1200:	6a e1       	ldi	r22, 0x1A	; 26
    1202:	fc 01       	movw	r30, r24
    1204:	80 81       	ld	r24, Z
    1206:	0e 94 9e 08 	call	0x113c	; 0x113c <_ZN6I2Cdev9writeBitsEhhhhh>
    120a:	0f 91       	pop	r16
    120c:	08 95       	ret

0000120e <_ZN7MPU605021setFullScaleGyroRangeEh>:
    120e:	0f 93       	push	r16
    1210:	06 2f       	mov	r16, r22
    1212:	22 e0       	ldi	r18, 0x02	; 2
    1214:	44 e0       	ldi	r20, 0x04	; 4
    1216:	6b e1       	ldi	r22, 0x1B	; 27
    1218:	fc 01       	movw	r30, r24
    121a:	80 81       	ld	r24, Z
    121c:	0e 94 9e 08 	call	0x113c	; 0x113c <_ZN6I2Cdev9writeBitsEhhhhh>
    1220:	0f 91       	pop	r16
    1222:	08 95       	ret

00001224 <_ZN7MPU605022setFullScaleAccelRangeEh>:
    1224:	0f 93       	push	r16
    1226:	06 2f       	mov	r16, r22
    1228:	22 e0       	ldi	r18, 0x02	; 2
    122a:	44 e0       	ldi	r20, 0x04	; 4
    122c:	6c e1       	ldi	r22, 0x1C	; 28
    122e:	fc 01       	movw	r30, r24
    1230:	80 81       	ld	r24, Z
    1232:	0e 94 9e 08 	call	0x113c	; 0x113c <_ZN6I2Cdev9writeBitsEhhhhh>
    1236:	0f 91       	pop	r16
    1238:	08 95       	ret

0000123a <_ZN7MPU605011setDHPFModeEh>:
    123a:	0f 93       	push	r16
    123c:	06 2f       	mov	r16, r22
    123e:	23 e0       	ldi	r18, 0x03	; 3
    1240:	42 e0       	ldi	r20, 0x02	; 2
    1242:	6c e1       	ldi	r22, 0x1C	; 28
    1244:	fc 01       	movw	r30, r24
    1246:	80 81       	ld	r24, Z
    1248:	0e 94 9e 08 	call	0x113c	; 0x113c <_ZN6I2Cdev9writeBitsEhhhhh>
    124c:	0f 91       	pop	r16
    124e:	08 95       	ret

00001250 <_ZN7MPU605027setMotionDetectionThresholdEh>:
    1250:	46 2f       	mov	r20, r22
    1252:	6f e1       	ldi	r22, 0x1F	; 31
    1254:	fc 01       	movw	r30, r24
    1256:	80 81       	ld	r24, Z
    1258:	0c 94 f6 06 	jmp	0xdec	; 0xdec <_ZN6I2Cdev9writeByteEhhh>

0000125c <_ZN7MPU605026setMotionDetectionDurationEh>:
    125c:	46 2f       	mov	r20, r22
    125e:	60 e2       	ldi	r22, 0x20	; 32
    1260:	fc 01       	movw	r30, r24
    1262:	80 81       	ld	r24, Z
    1264:	0c 94 f6 06 	jmp	0xdec	; 0xdec <_ZN6I2Cdev9writeByteEhhh>

00001268 <_ZN7MPU605031setZeroMotionDetectionThresholdEh>:
    1268:	46 2f       	mov	r20, r22
    126a:	61 e2       	ldi	r22, 0x21	; 33
    126c:	fc 01       	movw	r30, r24
    126e:	80 81       	ld	r24, Z
    1270:	0c 94 f6 06 	jmp	0xdec	; 0xdec <_ZN6I2Cdev9writeByteEhhh>

00001274 <_ZN7MPU605030setZeroMotionDetectionDurationEh>:
    1274:	46 2f       	mov	r20, r22
    1276:	62 e2       	ldi	r22, 0x22	; 34
    1278:	fc 01       	movw	r30, r24
    127a:	80 81       	ld	r24, Z
    127c:	0c 94 f6 06 	jmp	0xdec	; 0xdec <_ZN6I2Cdev9writeByteEhhh>

00001280 <_ZN7MPU605015setSlaveAddressEhh>:
    1280:	64 30       	cpi	r22, 0x04	; 4
    1282:	40 f4       	brcc	.+16     	; 0x1294 <_ZN7MPU605015setSlaveAddressEhh+0x14>
    1284:	26 2f       	mov	r18, r22
    1286:	22 0f       	add	r18, r18
    1288:	62 0f       	add	r22, r18
    128a:	6b 5d       	subi	r22, 0xDB	; 219
    128c:	fc 01       	movw	r30, r24
    128e:	80 81       	ld	r24, Z
    1290:	0c 94 f6 06 	jmp	0xdec	; 0xdec <_ZN6I2Cdev9writeByteEhhh>
    1294:	08 95       	ret

00001296 <_ZN7MPU605013setIntEnabledEh>:
    1296:	46 2f       	mov	r20, r22
    1298:	68 e3       	ldi	r22, 0x38	; 56
    129a:	fc 01       	movw	r30, r24
    129c:	80 81       	ld	r24, Z
    129e:	0c 94 f6 06 	jmp	0xdec	; 0xdec <_ZN6I2Cdev9writeByteEhhh>

000012a2 <_ZN7MPU605012getIntStatusEv>:
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	ec 01       	movw	r28, r24
    12a8:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    12ac:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    12b0:	ac 01       	movw	r20, r24
    12b2:	4f 5f       	subi	r20, 0xFF	; 255
    12b4:	5f 4f       	sbci	r21, 0xFF	; 255
    12b6:	6a e3       	ldi	r22, 0x3A	; 58
    12b8:	88 81       	ld	r24, Y
    12ba:	0e 94 02 08 	call	0x1004	; 0x1004 <_ZN6I2Cdev8readByteEhhPhj>
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	df 91       	pop	r29
    12c2:	cf 91       	pop	r28
    12c4:	08 95       	ret

000012c6 <_ZN7MPU605014setFIFOEnabledEb>:
    12c6:	26 2f       	mov	r18, r22
    12c8:	46 e0       	ldi	r20, 0x06	; 6
    12ca:	6a e6       	ldi	r22, 0x6A	; 106
    12cc:	fc 01       	movw	r30, r24
    12ce:	80 81       	ld	r24, Z
    12d0:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <_ZN6I2Cdev8writeBitEhhhh>

000012d4 <_ZN7MPU605023setI2CMasterModeEnabledEb>:
    12d4:	26 2f       	mov	r18, r22
    12d6:	45 e0       	ldi	r20, 0x05	; 5
    12d8:	6a e6       	ldi	r22, 0x6A	; 106
    12da:	fc 01       	movw	r30, r24
    12dc:	80 81       	ld	r24, Z
    12de:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <_ZN6I2Cdev8writeBitEhhhh>

000012e2 <_ZN7MPU60509resetFIFOEv>:
    12e2:	21 e0       	ldi	r18, 0x01	; 1
    12e4:	42 e0       	ldi	r20, 0x02	; 2
    12e6:	6a e6       	ldi	r22, 0x6A	; 106
    12e8:	fc 01       	movw	r30, r24
    12ea:	80 81       	ld	r24, Z
    12ec:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <_ZN6I2Cdev8writeBitEhhhh>

000012f0 <_ZN7MPU605014resetI2CMasterEv>:
    12f0:	21 e0       	ldi	r18, 0x01	; 1
    12f2:	41 e0       	ldi	r20, 0x01	; 1
    12f4:	6a e6       	ldi	r22, 0x6A	; 106
    12f6:	fc 01       	movw	r30, r24
    12f8:	80 81       	ld	r24, Z
    12fa:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <_ZN6I2Cdev8writeBitEhhhh>

000012fe <_ZN7MPU60505resetEv>:
    12fe:	21 e0       	ldi	r18, 0x01	; 1
    1300:	47 e0       	ldi	r20, 0x07	; 7
    1302:	6b e6       	ldi	r22, 0x6B	; 107
    1304:	fc 01       	movw	r30, r24
    1306:	80 81       	ld	r24, Z
    1308:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <_ZN6I2Cdev8writeBitEhhhh>

0000130c <_ZN7MPU605015setSleepEnabledEb>:
    130c:	26 2f       	mov	r18, r22
    130e:	46 e0       	ldi	r20, 0x06	; 6
    1310:	6b e6       	ldi	r22, 0x6B	; 107
    1312:	fc 01       	movw	r30, r24
    1314:	80 81       	ld	r24, Z
    1316:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <_ZN6I2Cdev8writeBitEhhhh>

0000131a <_ZN7MPU605014setClockSourceEh>:
    131a:	0f 93       	push	r16
    131c:	06 2f       	mov	r16, r22
    131e:	23 e0       	ldi	r18, 0x03	; 3
    1320:	42 e0       	ldi	r20, 0x02	; 2
    1322:	6b e6       	ldi	r22, 0x6B	; 107
    1324:	fc 01       	movw	r30, r24
    1326:	80 81       	ld	r24, Z
    1328:	0e 94 9e 08 	call	0x113c	; 0x113c <_ZN6I2Cdev9writeBitsEhhhhh>
    132c:	0f 91       	pop	r16
    132e:	08 95       	ret

00001330 <_ZN7MPU605010initializeEv>:
    1330:	cf 93       	push	r28
    1332:	df 93       	push	r29
    1334:	ec 01       	movw	r28, r24
    1336:	61 e0       	ldi	r22, 0x01	; 1
    1338:	0e 94 8d 09 	call	0x131a	; 0x131a <_ZN7MPU605014setClockSourceEh>
    133c:	60 e0       	ldi	r22, 0x00	; 0
    133e:	ce 01       	movw	r24, r28
    1340:	0e 94 07 09 	call	0x120e	; 0x120e <_ZN7MPU605021setFullScaleGyroRangeEh>
    1344:	60 e0       	ldi	r22, 0x00	; 0
    1346:	ce 01       	movw	r24, r28
    1348:	0e 94 12 09 	call	0x1224	; 0x1224 <_ZN7MPU605022setFullScaleAccelRangeEh>
    134c:	60 e0       	ldi	r22, 0x00	; 0
    134e:	ce 01       	movw	r24, r28
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	0c 94 86 09 	jmp	0x130c	; 0x130c <_ZN7MPU605015setSleepEnabledEb>

00001358 <_ZN7MPU605012getFIFOCountEv>:
    1358:	0f 93       	push	r16
    135a:	1f 93       	push	r17
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
    1360:	ec 01       	movw	r28, r24
    1362:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    1366:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    136a:	9c 01       	movw	r18, r24
    136c:	2f 5f       	subi	r18, 0xFF	; 255
    136e:	3f 4f       	sbci	r19, 0xFF	; 255
    1370:	42 e0       	ldi	r20, 0x02	; 2
    1372:	62 e7       	ldi	r22, 0x72	; 114
    1374:	88 81       	ld	r24, Y
    1376:	0e 94 4d 07 	call	0xe9a	; 0xe9a <_ZN6I2Cdev9readBytesEhhhPhj>
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	9a 81       	ldd	r25, Y+2	; 0x02
    137e:	98 27       	eor	r25, r24
    1380:	89 27       	eor	r24, r25
    1382:	98 27       	eor	r25, r24
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	1f 91       	pop	r17
    138a:	0f 91       	pop	r16
    138c:	08 95       	ret

0000138e <_ZN7MPU605012getFIFOBytesEPhh>:
    138e:	0f 93       	push	r16
    1390:	1f 93       	push	r17
    1392:	44 23       	and	r20, r20
    1394:	59 f0       	breq	.+22     	; 0x13ac <_ZN7MPU605012getFIFOBytesEPhh+0x1e>
    1396:	9b 01       	movw	r18, r22
    1398:	fc 01       	movw	r30, r24
    139a:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    139e:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    13a2:	64 e7       	ldi	r22, 0x74	; 116
    13a4:	80 81       	ld	r24, Z
    13a6:	0e 94 4d 07 	call	0xe9a	; 0xe9a <_ZN6I2Cdev9readBytesEhhhPhj>
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <_ZN7MPU605012getFIFOBytesEPhh+0x22>
    13ac:	fb 01       	movw	r30, r22
    13ae:	10 82       	st	Z, r1
    13b0:	1f 91       	pop	r17
    13b2:	0f 91       	pop	r16
    13b4:	08 95       	ret

000013b6 <_ZN7MPU605011getDeviceIDEv>:
    13b6:	ef 92       	push	r14
    13b8:	ff 92       	push	r15
    13ba:	0f 93       	push	r16
    13bc:	1f 93       	push	r17
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	ec 01       	movw	r28, r24
    13c4:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    13c8:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    13cc:	8c 01       	movw	r16, r24
    13ce:	0f 5f       	subi	r16, 0xFF	; 255
    13d0:	1f 4f       	sbci	r17, 0xFF	; 255
    13d2:	26 e0       	ldi	r18, 0x06	; 6
    13d4:	46 e0       	ldi	r20, 0x06	; 6
    13d6:	65 e7       	ldi	r22, 0x75	; 117
    13d8:	88 81       	ld	r24, Y
    13da:	0e 94 31 08 	call	0x1062	; 0x1062 <_ZN6I2Cdev8readBitsEhhhhPhj>
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	1f 91       	pop	r17
    13e6:	0f 91       	pop	r16
    13e8:	ff 90       	pop	r15
    13ea:	ef 90       	pop	r14
    13ec:	08 95       	ret

000013ee <_ZN7MPU605015getOTPBankValidEv>:
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	ec 01       	movw	r28, r24
    13f8:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    13fc:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    1400:	9c 01       	movw	r18, r24
    1402:	2f 5f       	subi	r18, 0xFF	; 255
    1404:	3f 4f       	sbci	r19, 0xFF	; 255
    1406:	40 e0       	ldi	r20, 0x00	; 0
    1408:	60 e0       	ldi	r22, 0x00	; 0
    140a:	88 81       	ld	r24, Y
    140c:	0e 94 0c 08 	call	0x1018	; 0x1018 <_ZN6I2Cdev7readBitEhhhPhj>
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	df 91       	pop	r29
    1414:	cf 91       	pop	r28
    1416:	1f 91       	pop	r17
    1418:	0f 91       	pop	r16
    141a:	08 95       	ret

0000141c <_ZN7MPU605015setOTPBankValidEb>:
    141c:	26 2f       	mov	r18, r22
    141e:	40 e0       	ldi	r20, 0x00	; 0
    1420:	60 e0       	ldi	r22, 0x00	; 0
    1422:	fc 01       	movw	r30, r24
    1424:	80 81       	ld	r24, Z
    1426:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <_ZN6I2Cdev8writeBitEhhhh>

0000142a <_ZN7MPU605015setZAccelOffsetEi>:
    142a:	0f 93       	push	r16
    142c:	1f 93       	push	r17
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	ec 01       	movw	r28, r24
    1434:	8b 01       	movw	r16, r22
    1436:	0e 94 db 09 	call	0x13b6	; 0x13b6 <_ZN7MPU605011getDeviceIDEv>
    143a:	88 33       	cpi	r24, 0x38	; 56
    143c:	10 f0       	brcs	.+4      	; 0x1442 <_ZN7MPU605015setZAccelOffsetEi+0x18>
    143e:	6d e7       	ldi	r22, 0x7D	; 125
    1440:	01 c0       	rjmp	.+2      	; 0x1444 <_ZN7MPU605015setZAccelOffsetEi+0x1a>
    1442:	6a e0       	ldi	r22, 0x0A	; 10
    1444:	a8 01       	movw	r20, r16
    1446:	88 81       	ld	r24, Y
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	1f 91       	pop	r17
    144e:	0f 91       	pop	r16
    1450:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <_ZN6I2Cdev9writeWordEhhj>

00001454 <_ZN7MPU605014setXGyroOffsetEi>:
    1454:	ab 01       	movw	r20, r22
    1456:	63 e1       	ldi	r22, 0x13	; 19
    1458:	fc 01       	movw	r30, r24
    145a:	80 81       	ld	r24, Z
    145c:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <_ZN6I2Cdev9writeWordEhhj>

00001460 <_ZN7MPU605014setYGyroOffsetEi>:
    1460:	ab 01       	movw	r20, r22
    1462:	65 e1       	ldi	r22, 0x15	; 21
    1464:	fc 01       	movw	r30, r24
    1466:	80 81       	ld	r24, Z
    1468:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <_ZN6I2Cdev9writeWordEhhj>

0000146c <_ZN7MPU605014setZGyroOffsetEi>:
    146c:	ab 01       	movw	r20, r22
    146e:	67 e1       	ldi	r22, 0x17	; 23
    1470:	fc 01       	movw	r30, r24
    1472:	80 81       	ld	r24, Z
    1474:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <_ZN6I2Cdev9writeWordEhhj>

00001478 <_ZN7MPU605013setDMPEnabledEb>:
    1478:	26 2f       	mov	r18, r22
    147a:	47 e0       	ldi	r20, 0x07	; 7
    147c:	6a e6       	ldi	r22, 0x6A	; 106
    147e:	fc 01       	movw	r30, r24
    1480:	80 81       	ld	r24, Z
    1482:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <_ZN6I2Cdev8writeBitEhhhh>

00001486 <_ZN7MPU60508resetDMPEv>:
    1486:	21 e0       	ldi	r18, 0x01	; 1
    1488:	43 e0       	ldi	r20, 0x03	; 3
    148a:	6a e6       	ldi	r22, 0x6A	; 106
    148c:	fc 01       	movw	r30, r24
    148e:	80 81       	ld	r24, Z
    1490:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <_ZN6I2Cdev8writeBitEhhhh>

00001494 <_ZN7MPU605013setMemoryBankEhbb>:
    1494:	6f 71       	andi	r22, 0x1F	; 31
    1496:	21 11       	cpse	r18, r1
    1498:	60 62       	ori	r22, 0x20	; 32
    149a:	41 11       	cpse	r20, r1
    149c:	60 64       	ori	r22, 0x40	; 64
    149e:	46 2f       	mov	r20, r22
    14a0:	6d e6       	ldi	r22, 0x6D	; 109
    14a2:	fc 01       	movw	r30, r24
    14a4:	80 81       	ld	r24, Z
    14a6:	0c 94 f6 06 	jmp	0xdec	; 0xdec <_ZN6I2Cdev9writeByteEhhh>

000014aa <_ZN7MPU605021setMemoryStartAddressEh>:
    14aa:	46 2f       	mov	r20, r22
    14ac:	6e e6       	ldi	r22, 0x6E	; 110
    14ae:	fc 01       	movw	r30, r24
    14b0:	80 81       	ld	r24, Z
    14b2:	0c 94 f6 06 	jmp	0xdec	; 0xdec <_ZN6I2Cdev9writeByteEhhh>

000014b6 <_ZN7MPU605014readMemoryByteEv>:
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	ec 01       	movw	r28, r24
    14bc:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    14c0:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    14c4:	ac 01       	movw	r20, r24
    14c6:	4f 5f       	subi	r20, 0xFF	; 255
    14c8:	5f 4f       	sbci	r21, 0xFF	; 255
    14ca:	6f e6       	ldi	r22, 0x6F	; 111
    14cc:	88 81       	ld	r24, Y
    14ce:	0e 94 02 08 	call	0x1004	; 0x1004 <_ZN6I2Cdev8readByteEhhPhj>
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	08 95       	ret

000014da <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>:
    14da:	2f 92       	push	r2
    14dc:	3f 92       	push	r3
    14de:	4f 92       	push	r4
    14e0:	5f 92       	push	r5
    14e2:	6f 92       	push	r6
    14e4:	7f 92       	push	r7
    14e6:	8f 92       	push	r8
    14e8:	9f 92       	push	r9
    14ea:	af 92       	push	r10
    14ec:	bf 92       	push	r11
    14ee:	cf 92       	push	r12
    14f0:	df 92       	push	r13
    14f2:	ef 92       	push	r14
    14f4:	ff 92       	push	r15
    14f6:	0f 93       	push	r16
    14f8:	1f 93       	push	r17
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x26>
    1500:	00 d0       	rcall	.+0      	; 0x1502 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x28>
    1502:	1f 92       	push	r1
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	9d 83       	std	Y+5, r25	; 0x05
    150a:	8c 83       	std	Y+4, r24	; 0x04
    150c:	1b 01       	movw	r2, r22
    150e:	3a 01       	movw	r6, r20
    1510:	29 83       	std	Y+1, r18	; 0x01
    1512:	50 2e       	mov	r5, r16
    1514:	eb 82       	std	Y+3, r14	; 0x03
    1516:	ca 82       	std	Y+2, r12	; 0x02
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	40 e0       	ldi	r20, 0x00	; 0
    151c:	69 81       	ldd	r22, Y+1	; 0x01
    151e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <_ZN7MPU605013setMemoryBankEhbb>
    1522:	60 2f       	mov	r22, r16
    1524:	8c 81       	ldd	r24, Y+4	; 0x04
    1526:	9d 81       	ldd	r25, Y+5	; 0x05
    1528:	0e 94 55 0a 	call	0x14aa	; 0x14aa <_ZN7MPU605021setMemoryStartAddressEh>
    152c:	eb 80       	ldd	r14, Y+3	; 0x03
    152e:	ee 20       	and	r14, r14
    1530:	31 f0       	breq	.+12     	; 0x153e <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x64>
    1532:	80 e1       	ldi	r24, 0x10	; 16
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <malloc>
    153a:	5c 01       	movw	r10, r24
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x68>
    153e:	a1 2c       	mov	r10, r1
    1540:	b1 2c       	mov	r11, r1
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	88 23       	and	r24, r24
    1546:	31 f0       	breq	.+12     	; 0x1554 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x7a>
    1548:	80 e1       	ldi	r24, 0x10	; 16
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <malloc>
    1550:	6c 01       	movw	r12, r24
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x7e>
    1554:	c1 2c       	mov	r12, r1
    1556:	d1 2c       	mov	r13, r1
    1558:	e1 2c       	mov	r14, r1
    155a:	f1 2c       	mov	r15, r1
    155c:	e6 14       	cp	r14, r6
    155e:	f7 04       	cpc	r15, r7
    1560:	08 f0       	brcs	.+2      	; 0x1564 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x8a>
    1562:	7b c0       	rjmp	.+246    	; 0x165a <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x180>
    1564:	c7 01       	movw	r24, r14
    1566:	40 96       	adiw	r24, 0x10	; 16
    1568:	68 16       	cp	r6, r24
    156a:	79 06       	cpc	r7, r25
    156c:	18 f4       	brcc	.+6      	; 0x1574 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x9a>
    156e:	46 2c       	mov	r4, r6
    1570:	4e 18       	sub	r4, r14
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x9e>
    1574:	80 e1       	ldi	r24, 0x10	; 16
    1576:	48 2e       	mov	r4, r24
    1578:	84 2d       	mov	r24, r4
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	31 e0       	ldi	r19, 0x01	; 1
    1580:	25 19       	sub	r18, r5
    1582:	31 09       	sbc	r19, r1
    1584:	28 17       	cp	r18, r24
    1586:	39 07       	cpc	r19, r25
    1588:	14 f4       	brge	.+4      	; 0x158e <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0xb4>
    158a:	45 2c       	mov	r4, r5
    158c:	41 94       	neg	r4
    158e:	ea 81       	ldd	r30, Y+2	; 0x02
    1590:	ee 23       	and	r30, r30
    1592:	71 f0       	breq	.+28     	; 0x15b0 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0xd6>
    1594:	d6 01       	movw	r26, r12
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	84 15       	cp	r24, r4
    159c:	60 f4       	brcc	.+24     	; 0x15b6 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0xdc>
    159e:	f7 01       	movw	r30, r14
    15a0:	e8 0f       	add	r30, r24
    15a2:	f9 1f       	adc	r31, r25
    15a4:	e2 0d       	add	r30, r2
    15a6:	f3 1d       	adc	r31, r3
    15a8:	e4 91       	lpm	r30, Z
    15aa:	ed 93       	st	X+, r30
    15ac:	01 96       	adiw	r24, 0x01	; 1
    15ae:	f5 cf       	rjmp	.-22     	; 0x159a <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0xc0>
    15b0:	61 01       	movw	r12, r2
    15b2:	ce 0c       	add	r12, r14
    15b4:	df 1c       	adc	r13, r15
    15b6:	96 01       	movw	r18, r12
    15b8:	44 2d       	mov	r20, r4
    15ba:	6f e6       	ldi	r22, 0x6F	; 111
    15bc:	ec 81       	ldd	r30, Y+4	; 0x04
    15be:	fd 81       	ldd	r31, Y+5	; 0x05
    15c0:	80 81       	ld	r24, Z
    15c2:	0e 94 c6 06 	call	0xd8c	; 0xd8c <_ZN6I2Cdev10writeBytesEhhhPh>
    15c6:	84 2c       	mov	r8, r4
    15c8:	91 2c       	mov	r9, r1
    15ca:	fb 81       	ldd	r31, Y+3	; 0x03
    15cc:	ff 23       	and	r31, r31
    15ce:	61 f1       	breq	.+88     	; 0x1628 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x14e>
    15d0:	a1 14       	cp	r10, r1
    15d2:	b1 04       	cpc	r11, r1
    15d4:	49 f1       	breq	.+82     	; 0x1628 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x14e>
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	40 e0       	ldi	r20, 0x00	; 0
    15da:	69 81       	ldd	r22, Y+1	; 0x01
    15dc:	8c 81       	ldd	r24, Y+4	; 0x04
    15de:	9d 81       	ldd	r25, Y+5	; 0x05
    15e0:	0e 94 4a 0a 	call	0x1494	; 0x1494 <_ZN7MPU605013setMemoryBankEhbb>
    15e4:	65 2d       	mov	r22, r5
    15e6:	8c 81       	ldd	r24, Y+4	; 0x04
    15e8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ea:	0e 94 55 0a 	call	0x14aa	; 0x14aa <_ZN7MPU605021setMemoryStartAddressEh>
    15ee:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZN6I2Cdev11readTimeoutE>
    15f2:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZN6I2Cdev11readTimeoutE+0x1>
    15f6:	95 01       	movw	r18, r10
    15f8:	44 2d       	mov	r20, r4
    15fa:	6f e6       	ldi	r22, 0x6F	; 111
    15fc:	ec 81       	ldd	r30, Y+4	; 0x04
    15fe:	fd 81       	ldd	r31, Y+5	; 0x05
    1600:	80 81       	ld	r24, Z
    1602:	0e 94 4d 07 	call	0xe9a	; 0xe9a <_ZN6I2Cdev9readBytesEhhhPhj>
    1606:	a4 01       	movw	r20, r8
    1608:	b5 01       	movw	r22, r10
    160a:	c6 01       	movw	r24, r12
    160c:	0e 94 56 20 	call	0x40ac	; 0x40ac <memcmp>
    1610:	89 2b       	or	r24, r25
    1612:	51 f0       	breq	.+20     	; 0x1628 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x14e>
    1614:	c5 01       	movw	r24, r10
    1616:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <free>
    161a:	fa 81       	ldd	r31, Y+2	; 0x02
    161c:	ff 23       	and	r31, r31
    161e:	51 f1       	breq	.+84     	; 0x1674 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x19a>
    1620:	c6 01       	movw	r24, r12
    1622:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <free>
    1626:	26 c0       	rjmp	.+76     	; 0x1674 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x19a>
    1628:	e8 0c       	add	r14, r8
    162a:	f9 1c       	adc	r15, r9
    162c:	54 0c       	add	r5, r4
    162e:	e6 14       	cp	r14, r6
    1630:	f7 04       	cpc	r15, r7
    1632:	08 f0       	brcs	.+2      	; 0x1636 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x15c>
    1634:	93 cf       	rjmp	.-218    	; 0x155c <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x82>
    1636:	51 10       	cpse	r5, r1
    1638:	03 c0       	rjmp	.+6      	; 0x1640 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x166>
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	8f 5f       	subi	r24, 0xFF	; 255
    163e:	89 83       	std	Y+1, r24	; 0x01
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	40 e0       	ldi	r20, 0x00	; 0
    1644:	69 81       	ldd	r22, Y+1	; 0x01
    1646:	8c 81       	ldd	r24, Y+4	; 0x04
    1648:	9d 81       	ldd	r25, Y+5	; 0x05
    164a:	0e 94 4a 0a 	call	0x1494	; 0x1494 <_ZN7MPU605013setMemoryBankEhbb>
    164e:	65 2d       	mov	r22, r5
    1650:	8c 81       	ldd	r24, Y+4	; 0x04
    1652:	9d 81       	ldd	r25, Y+5	; 0x05
    1654:	0e 94 55 0a 	call	0x14aa	; 0x14aa <_ZN7MPU605021setMemoryStartAddressEh>
    1658:	81 cf       	rjmp	.-254    	; 0x155c <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x82>
    165a:	eb 81       	ldd	r30, Y+3	; 0x03
    165c:	ee 23       	and	r30, r30
    165e:	19 f0       	breq	.+6      	; 0x1666 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x18c>
    1660:	c5 01       	movw	r24, r10
    1662:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <free>
    1666:	fa 81       	ldd	r31, Y+2	; 0x02
    1668:	ff 23       	and	r31, r31
    166a:	31 f0       	breq	.+12     	; 0x1678 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x19e>
    166c:	c6 01       	movw	r24, r12
    166e:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <free>
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x19e>
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	01 c0       	rjmp	.+2      	; 0x167a <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x1a0>
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	df 91       	pop	r29
    1686:	cf 91       	pop	r28
    1688:	1f 91       	pop	r17
    168a:	0f 91       	pop	r16
    168c:	ff 90       	pop	r15
    168e:	ef 90       	pop	r14
    1690:	df 90       	pop	r13
    1692:	cf 90       	pop	r12
    1694:	bf 90       	pop	r11
    1696:	af 90       	pop	r10
    1698:	9f 90       	pop	r9
    169a:	8f 90       	pop	r8
    169c:	7f 90       	pop	r7
    169e:	6f 90       	pop	r6
    16a0:	5f 90       	pop	r5
    16a2:	4f 90       	pop	r4
    16a4:	3f 90       	pop	r3
    16a6:	2f 90       	pop	r2
    16a8:	08 95       	ret

000016aa <_ZN7MPU605020writeProgMemoryBlockEPKhjhhb>:
    16aa:	cf 92       	push	r12
    16ac:	ef 92       	push	r14
    16ae:	0f 93       	push	r16
    16b0:	cc 24       	eor	r12, r12
    16b2:	c3 94       	inc	r12
    16b4:	0e 94 6d 0a 	call	0x14da	; 0x14da <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>
    16b8:	0f 91       	pop	r16
    16ba:	ef 90       	pop	r14
    16bc:	cf 90       	pop	r12
    16be:	08 95       	ret

000016c0 <_ZN7MPU605013setDMPConfig1Eh>:
    16c0:	46 2f       	mov	r20, r22
    16c2:	60 e7       	ldi	r22, 0x70	; 112
    16c4:	fc 01       	movw	r30, r24
    16c6:	80 81       	ld	r24, Z
    16c8:	0c 94 f6 06 	jmp	0xdec	; 0xdec <_ZN6I2Cdev9writeByteEhhh>

000016cc <_ZN7MPU605013setDMPConfig2Eh>:
void MPU6050::setDMPConfig2(uint8_t config) {
    16cc:	46 2f       	mov	r20, r22
    I2Cdev::writeByte(devAddr, MPU6050_RA_DMP_CFG_2, config);
    16ce:	61 e7       	ldi	r22, 0x71	; 113
    16d0:	fc 01       	movw	r30, r24
    16d2:	80 81       	ld	r24, Z
    16d4:	0c 94 f6 06 	jmp	0xdec	; 0xdec <_ZN6I2Cdev9writeByteEhhh>

000016d8 <_Z12dmpDataReadyv>:
}



uint8_t MPU6050::dmpGetCurrentFIFOPacket(uint8_t *data) { // overflow proof
    return(GetCurrentFIFOPacket(data, dmpPacketSize));
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
    16de:	08 95       	ret

000016e0 <_ZN7MPU605013dmpInitializeEv>:
    16e0:	af 92       	push	r10
    16e2:	bf 92       	push	r11
    16e4:	cf 92       	push	r12
    16e6:	ef 92       	push	r14
    16e8:	0f 93       	push	r16
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <_ZN7MPU605013dmpInitializeEv+0x10>
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	5c 01       	movw	r10, r24
    16f6:	64 ee       	ldi	r22, 0xE4	; 228
    16f8:	74 e0       	ldi	r23, 0x04	; 4
    16fa:	8d ee       	ldi	r24, 0xED	; 237
    16fc:	91 e0       	ldi	r25, 0x01	; 1
    16fe:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
    1702:	c5 01       	movw	r24, r10
    1704:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN7MPU60505resetEv>
    1708:	6e e1       	ldi	r22, 0x1E	; 30
    170a:	70 e0       	ldi	r23, 0x00	; 0
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	0e 94 16 19 	call	0x322c	; 0x322c <delay>
    1714:	60 e0       	ldi	r22, 0x00	; 0
    1716:	c5 01       	movw	r24, r10
    1718:	0e 94 86 09 	call	0x130c	; 0x130c <_ZN7MPU605015setSleepEnabledEb>
    171c:	21 e0       	ldi	r18, 0x01	; 1
    171e:	41 e0       	ldi	r20, 0x01	; 1
    1720:	60 e1       	ldi	r22, 0x10	; 16
    1722:	c5 01       	movw	r24, r10
    1724:	0e 94 4a 0a 	call	0x1494	; 0x1494 <_ZN7MPU605013setMemoryBankEhbb>
    1728:	66 e0       	ldi	r22, 0x06	; 6
    172a:	c5 01       	movw	r24, r10
    172c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <_ZN7MPU605021setMemoryStartAddressEh>
    1730:	66 ec       	ldi	r22, 0xC6	; 198
    1732:	74 e0       	ldi	r23, 0x04	; 4
    1734:	8d ee       	ldi	r24, 0xED	; 237
    1736:	91 e0       	ldi	r25, 0x01	; 1
    1738:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
    173c:	6c ea       	ldi	r22, 0xAC	; 172
    173e:	74 e0       	ldi	r23, 0x04	; 4
    1740:	8d ee       	ldi	r24, 0xED	; 237
    1742:	91 e0       	ldi	r25, 0x01	; 1
    1744:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <_ZN5Print5printEPK19__FlashStringHelper>
    1748:	c5 01       	movw	r24, r10
    174a:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <_ZN7MPU605014readMemoryByteEv>
    174e:	4a e0       	ldi	r20, 0x0A	; 10
    1750:	50 e0       	ldi	r21, 0x00	; 0
    1752:	68 2f       	mov	r22, r24
    1754:	8d ee       	ldi	r24, 0xED	; 237
    1756:	91 e0       	ldi	r25, 0x01	; 1
    1758:	0e 94 d6 16 	call	0x2dac	; 0x2dac <_ZN5Print7printlnEhi>
    175c:	64 e8       	ldi	r22, 0x84	; 132
    175e:	74 e0       	ldi	r23, 0x04	; 4
    1760:	8d ee       	ldi	r24, 0xED	; 237
    1762:	91 e0       	ldi	r25, 0x01	; 1
    1764:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	40 e0       	ldi	r20, 0x00	; 0
    176c:	60 e0       	ldi	r22, 0x00	; 0
    176e:	c5 01       	movw	r24, r10
    1770:	0e 94 4a 0a 	call	0x1494	; 0x1494 <_ZN7MPU605013setMemoryBankEhbb>
    1774:	65 e6       	ldi	r22, 0x65	; 101
    1776:	74 e0       	ldi	r23, 0x04	; 4
    1778:	8d ee       	ldi	r24, 0xED	; 237
    177a:	91 e0       	ldi	r25, 0x01	; 1
    177c:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
    1780:	68 e5       	ldi	r22, 0x58	; 88
    1782:	74 e0       	ldi	r23, 0x04	; 4
    1784:	8d ee       	ldi	r24, 0xED	; 237
    1786:	91 e0       	ldi	r25, 0x01	; 1
    1788:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <_ZN5Print5printEPK19__FlashStringHelper>
    178c:	c5 01       	movw	r24, r10
    178e:	0e 94 f7 09 	call	0x13ee	; 0x13ee <_ZN7MPU605015getOTPBankValidEv>
    1792:	81 11       	cpse	r24, r1
    1794:	03 c0       	rjmp	.+6      	; 0x179c <_ZN7MPU605013dmpInitializeEv+0xbc>
    1796:	68 e4       	ldi	r22, 0x48	; 72
    1798:	74 e0       	ldi	r23, 0x04	; 4
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <_ZN7MPU605013dmpInitializeEv+0xc0>
    179c:	61 e5       	ldi	r22, 0x51	; 81
    179e:	74 e0       	ldi	r23, 0x04	; 4
    17a0:	8d ee       	ldi	r24, 0xED	; 237
    17a2:	91 e0       	ldi	r25, 0x01	; 1
    17a4:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
    17a8:	65 e2       	ldi	r22, 0x25	; 37
    17aa:	74 e0       	ldi	r23, 0x04	; 4
    17ac:	8d ee       	ldi	r24, 0xED	; 237
    17ae:	91 e0       	ldi	r25, 0x01	; 1
    17b0:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
    17b4:	4f e7       	ldi	r20, 0x7F	; 127
    17b6:	60 e0       	ldi	r22, 0x00	; 0
    17b8:	c5 01       	movw	r24, r10
    17ba:	0e 94 40 09 	call	0x1280	; 0x1280 <_ZN7MPU605015setSlaveAddressEhh>
    17be:	68 e0       	ldi	r22, 0x08	; 8
    17c0:	74 e0       	ldi	r23, 0x04	; 4
    17c2:	8d ee       	ldi	r24, 0xED	; 237
    17c4:	91 e0       	ldi	r25, 0x01	; 1
    17c6:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	c5 01       	movw	r24, r10
    17ce:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_ZN7MPU605023setI2CMasterModeEnabledEb>
    17d2:	6e ed       	ldi	r22, 0xDE	; 222
    17d4:	73 e0       	ldi	r23, 0x03	; 3
    17d6:	8d ee       	ldi	r24, 0xED	; 237
    17d8:	91 e0       	ldi	r25, 0x01	; 1
    17da:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
    17de:	48 e6       	ldi	r20, 0x68	; 104
    17e0:	60 e0       	ldi	r22, 0x00	; 0
    17e2:	c5 01       	movw	r24, r10
    17e4:	0e 94 40 09 	call	0x1280	; 0x1280 <_ZN7MPU605015setSlaveAddressEhh>
    17e8:	6e eb       	ldi	r22, 0xBE	; 190
    17ea:	73 e0       	ldi	r23, 0x03	; 3
    17ec:	8d ee       	ldi	r24, 0xED	; 237
    17ee:	91 e0       	ldi	r25, 0x01	; 1
    17f0:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
    17f4:	c5 01       	movw	r24, r10
    17f6:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN7MPU605014resetI2CMasterEv>
    17fa:	64 e1       	ldi	r22, 0x14	; 20
    17fc:	70 e0       	ldi	r23, 0x00	; 0
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	0e 94 16 19 	call	0x322c	; 0x322c <delay>
    1806:	6c e9       	ldi	r22, 0x9C	; 156
    1808:	73 e0       	ldi	r23, 0x03	; 3
    180a:	8d ee       	ldi	r24, 0xED	; 237
    180c:	91 e0       	ldi	r25, 0x01	; 1
    180e:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
    1812:	63 e0       	ldi	r22, 0x03	; 3
    1814:	c5 01       	movw	r24, r10
    1816:	0e 94 8d 09 	call	0x131a	; 0x131a <_ZN7MPU605014setClockSourceEh>
    181a:	6b e6       	ldi	r22, 0x6B	; 107
    181c:	73 e0       	ldi	r23, 0x03	; 3
    181e:	8d ee       	ldi	r24, 0xED	; 237
    1820:	91 e0       	ldi	r25, 0x01	; 1
    1822:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
    1826:	62 e1       	ldi	r22, 0x12	; 18
    1828:	c5 01       	movw	r24, r10
    182a:	0e 94 4b 09 	call	0x1296	; 0x1296 <_ZN7MPU605013setIntEnabledEh>
    182e:	6b e4       	ldi	r22, 0x4B	; 75
    1830:	73 e0       	ldi	r23, 0x03	; 3
    1832:	8d ee       	ldi	r24, 0xED	; 237
    1834:	91 e0       	ldi	r25, 0x01	; 1
    1836:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
    183a:	64 e0       	ldi	r22, 0x04	; 4
    183c:	c5 01       	movw	r24, r10
    183e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <_ZN7MPU60507setRateEh>
    1842:	6b e1       	ldi	r22, 0x1B	; 27
    1844:	73 e0       	ldi	r23, 0x03	; 3
    1846:	8d ee       	ldi	r24, 0xED	; 237
    1848:	91 e0       	ldi	r25, 0x01	; 1
    184a:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
    184e:	61 e0       	ldi	r22, 0x01	; 1
    1850:	c5 01       	movw	r24, r10
    1852:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_ZN7MPU605020setExternalFrameSyncEh>
    1856:	69 ef       	ldi	r22, 0xF9	; 249
    1858:	72 e0       	ldi	r23, 0x02	; 2
    185a:	8d ee       	ldi	r24, 0xED	; 237
    185c:	91 e0       	ldi	r25, 0x01	; 1
    185e:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
    1862:	63 e0       	ldi	r22, 0x03	; 3
    1864:	c5 01       	movw	r24, r10
    1866:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_ZN7MPU605011setDLPFModeEh>
    186a:	69 ec       	ldi	r22, 0xC9	; 201
    186c:	72 e0       	ldi	r23, 0x02	; 2
    186e:	8d ee       	ldi	r24, 0xED	; 237
    1870:	91 e0       	ldi	r25, 0x01	; 1
    1872:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
    1876:	63 e0       	ldi	r22, 0x03	; 3
    1878:	c5 01       	movw	r24, r10
    187a:	0e 94 07 09 	call	0x120e	; 0x120e <_ZN7MPU605021setFullScaleGyroRangeEh>
    187e:	62 ea       	ldi	r22, 0xA2	; 162
    1880:	72 e0       	ldi	r23, 0x02	; 2
    1882:	8d ee       	ldi	r24, 0xED	; 237
    1884:	91 e0       	ldi	r25, 0x01	; 1
    1886:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <_ZN5Print5printEPK19__FlashStringHelper>
    188a:	4a e0       	ldi	r20, 0x0A	; 10
    188c:	50 e0       	ldi	r21, 0x00	; 0
    188e:	69 e8       	ldi	r22, 0x89	; 137
    1890:	77 e0       	ldi	r23, 0x07	; 7
    1892:	8d ee       	ldi	r24, 0xED	; 237
    1894:	91 e0       	ldi	r25, 0x01	; 1
    1896:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <_ZN5Print5printEii>
    189a:	6a e9       	ldi	r22, 0x9A	; 154
    189c:	72 e0       	ldi	r23, 0x02	; 2
    189e:	8d ee       	ldi	r24, 0xED	; 237
    18a0:	91 e0       	ldi	r25, 0x01	; 1
    18a2:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
    18a6:	ee 24       	eor	r14, r14
    18a8:	e3 94       	inc	r14
    18aa:	00 e0       	ldi	r16, 0x00	; 0
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	49 e8       	ldi	r20, 0x89	; 137
    18b0:	57 e0       	ldi	r21, 0x07	; 7
    18b2:	6b ef       	ldi	r22, 0xFB	; 251
    18b4:	74 e0       	ldi	r23, 0x04	; 4
    18b6:	c5 01       	movw	r24, r10
    18b8:	0e 94 55 0b 	call	0x16aa	; 0x16aa <_ZN7MPU605020writeProgMemoryBlockEPKhjhhb>
    18bc:	88 23       	and	r24, r24
    18be:	09 f4       	brne	.+2      	; 0x18c2 <_ZN7MPU605013dmpInitializeEv+0x1e2>
    18c0:	8a c0       	rjmp	.+276    	; 0x19d6 <_ZN7MPU605013dmpInitializeEv+0x2f6>
    18c2:	62 e7       	ldi	r22, 0x72	; 114
    18c4:	72 e0       	ldi	r23, 0x02	; 2
    18c6:	8d ee       	ldi	r24, 0xED	; 237
    18c8:	91 e0       	ldi	r25, 0x01	; 1
    18ca:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
    18ce:	19 82       	std	Y+1, r1	; 0x01
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	8a 83       	std	Y+2, r24	; 0x02
    18d4:	c1 2c       	mov	r12, r1
    18d6:	06 e1       	ldi	r16, 0x16	; 22
    18d8:	22 e0       	ldi	r18, 0x02	; 2
    18da:	42 e0       	ldi	r20, 0x02	; 2
    18dc:	50 e0       	ldi	r21, 0x00	; 0
    18de:	be 01       	movw	r22, r28
    18e0:	6f 5f       	subi	r22, 0xFF	; 255
    18e2:	7f 4f       	sbci	r23, 0xFF	; 255
    18e4:	c5 01       	movw	r24, r10
    18e6:	0e 94 6d 0a 	call	0x14da	; 0x14da <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>
    18ea:	63 e0       	ldi	r22, 0x03	; 3
    18ec:	c5 01       	movw	r24, r10
    18ee:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <_ZN7MPU605013setDMPConfig1Eh>
    18f2:	60 e0       	ldi	r22, 0x00	; 0
    18f4:	c5 01       	movw	r24, r10
    18f6:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN7MPU605013setDMPConfig2Eh>
    18fa:	68 e5       	ldi	r22, 0x58	; 88
    18fc:	72 e0       	ldi	r23, 0x02	; 2
    18fe:	8d ee       	ldi	r24, 0xED	; 237
    1900:	91 e0       	ldi	r25, 0x01	; 1
    1902:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
    1906:	60 e0       	ldi	r22, 0x00	; 0
    1908:	c5 01       	movw	r24, r10
    190a:	0e 94 0e 0a 	call	0x141c	; 0x141c <_ZN7MPU605015setOTPBankValidEb>
    190e:	6d e2       	ldi	r22, 0x2D	; 45
    1910:	72 e0       	ldi	r23, 0x02	; 2
    1912:	8d ee       	ldi	r24, 0xED	; 237
    1914:	91 e0       	ldi	r25, 0x01	; 1
    1916:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
    191a:	62 e0       	ldi	r22, 0x02	; 2
    191c:	c5 01       	movw	r24, r10
    191e:	0e 94 28 09 	call	0x1250	; 0x1250 <_ZN7MPU605027setMotionDetectionThresholdEh>
    1922:	6b ef       	ldi	r22, 0xFB	; 251
    1924:	71 e0       	ldi	r23, 0x01	; 1
    1926:	8d ee       	ldi	r24, 0xED	; 237
    1928:	91 e0       	ldi	r25, 0x01	; 1
    192a:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
    192e:	6c e9       	ldi	r22, 0x9C	; 156
    1930:	c5 01       	movw	r24, r10
    1932:	0e 94 34 09 	call	0x1268	; 0x1268 <_ZN7MPU605031setZeroMotionDetectionThresholdEh>
    1936:	60 ed       	ldi	r22, 0xD0	; 208
    1938:	71 e0       	ldi	r23, 0x01	; 1
    193a:	8d ee       	ldi	r24, 0xED	; 237
    193c:	91 e0       	ldi	r25, 0x01	; 1
    193e:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
    1942:	60 e5       	ldi	r22, 0x50	; 80
    1944:	c5 01       	movw	r24, r10
    1946:	0e 94 2e 09 	call	0x125c	; 0x125c <_ZN7MPU605026setMotionDetectionDurationEh>
    194a:	61 ea       	ldi	r22, 0xA1	; 161
    194c:	71 e0       	ldi	r23, 0x01	; 1
    194e:	8d ee       	ldi	r24, 0xED	; 237
    1950:	91 e0       	ldi	r25, 0x01	; 1
    1952:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
    1956:	60 e0       	ldi	r22, 0x00	; 0
    1958:	c5 01       	movw	r24, r10
    195a:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN7MPU605030setZeroMotionDetectionDurationEh>
    195e:	60 e9       	ldi	r22, 0x90	; 144
    1960:	71 e0       	ldi	r23, 0x01	; 1
    1962:	8d ee       	ldi	r24, 0xED	; 237
    1964:	91 e0       	ldi	r25, 0x01	; 1
    1966:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
    196a:	61 e0       	ldi	r22, 0x01	; 1
    196c:	c5 01       	movw	r24, r10
    196e:	0e 94 63 09 	call	0x12c6	; 0x12c6 <_ZN7MPU605014setFIFOEnabledEb>
    1972:	6f e7       	ldi	r22, 0x7F	; 127
    1974:	71 e0       	ldi	r23, 0x01	; 1
    1976:	8d ee       	ldi	r24, 0xED	; 237
    1978:	91 e0       	ldi	r25, 0x01	; 1
    197a:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
    197e:	c5 01       	movw	r24, r10
    1980:	0e 94 43 0a 	call	0x1486	; 0x1486 <_ZN7MPU60508resetDMPEv>
    1984:	63 e6       	ldi	r22, 0x63	; 99
    1986:	71 e0       	ldi	r23, 0x01	; 1
    1988:	8d ee       	ldi	r24, 0xED	; 237
    198a:	91 e0       	ldi	r25, 0x01	; 1
    198c:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
    1990:	6b e3       	ldi	r22, 0x3B	; 59
    1992:	71 e0       	ldi	r23, 0x01	; 1
    1994:	8d ee       	ldi	r24, 0xED	; 237
    1996:	91 e0       	ldi	r25, 0x01	; 1
    1998:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
    199c:	60 e0       	ldi	r22, 0x00	; 0
    199e:	c5 01       	movw	r24, r10
    19a0:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN7MPU605013setDMPEnabledEb>
    19a4:	60 e0       	ldi	r22, 0x00	; 0
    19a6:	71 e0       	ldi	r23, 0x01	; 1
    19a8:	8d ee       	ldi	r24, 0xED	; 237
    19aa:	91 e0       	ldi	r25, 0x01	; 1
    19ac:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
    19b0:	8a e2       	ldi	r24, 0x2A	; 42
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	f5 01       	movw	r30, r10
    19b6:	92 8b       	std	Z+18, r25	; 0x12
    19b8:	81 8b       	std	Z+17, r24	; 0x11
    19ba:	68 ec       	ldi	r22, 0xC8	; 200
    19bc:	70 e0       	ldi	r23, 0x00	; 0
    19be:	8d ee       	ldi	r24, 0xED	; 237
    19c0:	91 e0       	ldi	r25, 0x01	; 1
    19c2:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
    19c6:	c5 01       	movw	r24, r10
    19c8:	0e 94 71 09 	call	0x12e2	; 0x12e2 <_ZN7MPU60509resetFIFOEv>
    19cc:	c5 01       	movw	r24, r10
    19ce:	0e 94 51 09 	call	0x12a2	; 0x12a2 <_ZN7MPU605012getIntStatusEv>
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	01 c0       	rjmp	.+2      	; 0x19d8 <_ZN7MPU605013dmpInitializeEv+0x2f8>
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	df 91       	pop	r29
    19de:	cf 91       	pop	r28
    19e0:	0f 91       	pop	r16
    19e2:	ef 90       	pop	r14
    19e4:	cf 90       	pop	r12
    19e6:	bf 90       	pop	r11
    19e8:	af 90       	pop	r10
    19ea:	08 95       	ret

000019ec <_ZN7MPU605016dmpGetQuaternionEPiPKh>:
    19ec:	cf 93       	push	r28
    19ee:	df 93       	push	r29
    19f0:	db 01       	movw	r26, r22
    19f2:	fa 01       	movw	r30, r20
    19f4:	30 97       	sbiw	r30, 0x00	; 0
    19f6:	19 f4       	brne	.+6      	; 0x19fe <_ZN7MPU605016dmpGetQuaternionEPiPKh+0x12>
    19f8:	ec 01       	movw	r28, r24
    19fa:	ef 85       	ldd	r30, Y+15	; 0x0f
    19fc:	f8 89       	ldd	r31, Y+16	; 0x10
    19fe:	80 81       	ld	r24, Z
    1a00:	91 81       	ldd	r25, Z+1	; 0x01
    1a02:	98 27       	eor	r25, r24
    1a04:	89 27       	eor	r24, r25
    1a06:	98 27       	eor	r25, r24
    1a08:	11 96       	adiw	r26, 0x01	; 1
    1a0a:	9c 93       	st	X, r25
    1a0c:	8e 93       	st	-X, r24
    1a0e:	84 81       	ldd	r24, Z+4	; 0x04
    1a10:	95 81       	ldd	r25, Z+5	; 0x05
    1a12:	98 27       	eor	r25, r24
    1a14:	89 27       	eor	r24, r25
    1a16:	98 27       	eor	r25, r24
    1a18:	13 96       	adiw	r26, 0x03	; 3
    1a1a:	9c 93       	st	X, r25
    1a1c:	8e 93       	st	-X, r24
    1a1e:	12 97       	sbiw	r26, 0x02	; 2
    1a20:	80 85       	ldd	r24, Z+8	; 0x08
    1a22:	91 85       	ldd	r25, Z+9	; 0x09
    1a24:	98 27       	eor	r25, r24
    1a26:	89 27       	eor	r24, r25
    1a28:	98 27       	eor	r25, r24
    1a2a:	15 96       	adiw	r26, 0x05	; 5
    1a2c:	9c 93       	st	X, r25
    1a2e:	8e 93       	st	-X, r24
    1a30:	14 97       	sbiw	r26, 0x04	; 4
    1a32:	84 85       	ldd	r24, Z+12	; 0x0c
    1a34:	95 85       	ldd	r25, Z+13	; 0x0d
    1a36:	98 27       	eor	r25, r24
    1a38:	89 27       	eor	r24, r25
    1a3a:	98 27       	eor	r25, r24
    1a3c:	17 96       	adiw	r26, 0x07	; 7
    1a3e:	9c 93       	st	X, r25
    1a40:	8e 93       	st	-X, r24
    1a42:	16 97       	sbiw	r26, 0x06	; 6
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	08 95       	ret

00001a4c <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh>:
    1a4c:	ff 92       	push	r15
    1a4e:	0f 93       	push	r16
    1a50:	1f 93       	push	r17
    1a52:	cf 93       	push	r28
    1a54:	df 93       	push	r29
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
    1a5a:	28 97       	sbiw	r28, 0x08	; 8
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	cd bf       	out	0x3d, r28	; 61
    1a66:	8b 01       	movw	r16, r22
    1a68:	be 01       	movw	r22, r28
    1a6a:	6f 5f       	subi	r22, 0xFF	; 255
    1a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6e:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <_ZN7MPU605016dmpGetQuaternionEPiPKh>
    1a72:	f8 2e       	mov	r15, r24
    1a74:	81 11       	cpse	r24, r1
    1a76:	4c c0       	rjmp	.+152    	; 0x1b10 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0xc4>
    1a78:	69 81       	ldd	r22, Y+1	; 0x01
    1a7a:	7a 81       	ldd	r23, Y+2	; 0x02
    1a7c:	07 2e       	mov	r0, r23
    1a7e:	00 0c       	add	r0, r0
    1a80:	88 0b       	sbc	r24, r24
    1a82:	99 0b       	sbc	r25, r25
    1a84:	0e 94 64 12 	call	0x24c8	; 0x24c8 <__floatsisf>
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e8       	ldi	r20, 0x80	; 128
    1a8e:	58 e3       	ldi	r21, 0x38	; 56
    1a90:	0e 94 48 13 	call	0x2690	; 0x2690 <__mulsf3>
    1a94:	f8 01       	movw	r30, r16
    1a96:	60 83       	st	Z, r22
    1a98:	71 83       	std	Z+1, r23	; 0x01
    1a9a:	82 83       	std	Z+2, r24	; 0x02
    1a9c:	93 83       	std	Z+3, r25	; 0x03
    1a9e:	6b 81       	ldd	r22, Y+3	; 0x03
    1aa0:	7c 81       	ldd	r23, Y+4	; 0x04
    1aa2:	07 2e       	mov	r0, r23
    1aa4:	00 0c       	add	r0, r0
    1aa6:	88 0b       	sbc	r24, r24
    1aa8:	99 0b       	sbc	r25, r25
    1aaa:	0e 94 64 12 	call	0x24c8	; 0x24c8 <__floatsisf>
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	40 e8       	ldi	r20, 0x80	; 128
    1ab4:	58 e3       	ldi	r21, 0x38	; 56
    1ab6:	0e 94 48 13 	call	0x2690	; 0x2690 <__mulsf3>
    1aba:	f8 01       	movw	r30, r16
    1abc:	64 83       	std	Z+4, r22	; 0x04
    1abe:	75 83       	std	Z+5, r23	; 0x05
    1ac0:	86 83       	std	Z+6, r24	; 0x06
    1ac2:	97 83       	std	Z+7, r25	; 0x07
    1ac4:	6d 81       	ldd	r22, Y+5	; 0x05
    1ac6:	7e 81       	ldd	r23, Y+6	; 0x06
    1ac8:	07 2e       	mov	r0, r23
    1aca:	00 0c       	add	r0, r0
    1acc:	88 0b       	sbc	r24, r24
    1ace:	99 0b       	sbc	r25, r25
    1ad0:	0e 94 64 12 	call	0x24c8	; 0x24c8 <__floatsisf>
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 e8       	ldi	r20, 0x80	; 128
    1ada:	58 e3       	ldi	r21, 0x38	; 56
    1adc:	0e 94 48 13 	call	0x2690	; 0x2690 <__mulsf3>
    1ae0:	f8 01       	movw	r30, r16
    1ae2:	60 87       	std	Z+8, r22	; 0x08
    1ae4:	71 87       	std	Z+9, r23	; 0x09
    1ae6:	82 87       	std	Z+10, r24	; 0x0a
    1ae8:	93 87       	std	Z+11, r25	; 0x0b
    1aea:	6f 81       	ldd	r22, Y+7	; 0x07
    1aec:	78 85       	ldd	r23, Y+8	; 0x08
    1aee:	07 2e       	mov	r0, r23
    1af0:	00 0c       	add	r0, r0
    1af2:	88 0b       	sbc	r24, r24
    1af4:	99 0b       	sbc	r25, r25
    1af6:	0e 94 64 12 	call	0x24c8	; 0x24c8 <__floatsisf>
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	40 e8       	ldi	r20, 0x80	; 128
    1b00:	58 e3       	ldi	r21, 0x38	; 56
    1b02:	0e 94 48 13 	call	0x2690	; 0x2690 <__mulsf3>
    1b06:	f8 01       	movw	r30, r16
    1b08:	64 87       	std	Z+12, r22	; 0x0c
    1b0a:	75 87       	std	Z+13, r23	; 0x0d
    1b0c:	86 87       	std	Z+14, r24	; 0x0e
    1b0e:	97 87       	std	Z+15, r25	; 0x0f
    1b10:	8f 2d       	mov	r24, r15
    1b12:	28 96       	adiw	r28, 0x08	; 8
    1b14:	0f b6       	in	r0, 0x3f	; 63
    1b16:	f8 94       	cli
    1b18:	de bf       	out	0x3e, r29	; 62
    1b1a:	0f be       	out	0x3f, r0	; 63
    1b1c:	cd bf       	out	0x3d, r28	; 61
    1b1e:	df 91       	pop	r29
    1b20:	cf 91       	pop	r28
    1b22:	1f 91       	pop	r17
    1b24:	0f 91       	pop	r16
    1b26:	ff 90       	pop	r15
    1b28:	08 95       	ret

00001b2a <_ZN7MPU605013dmpGetGravityEP11VectorFloatP10Quaternion>:
    1b2a:	4f 92       	push	r4
    1b2c:	5f 92       	push	r5
    1b2e:	6f 92       	push	r6
    1b30:	7f 92       	push	r7
    1b32:	8f 92       	push	r8
    1b34:	9f 92       	push	r9
    1b36:	af 92       	push	r10
    1b38:	bf 92       	push	r11
    1b3a:	cf 92       	push	r12
    1b3c:	df 92       	push	r13
    1b3e:	ef 92       	push	r14
    1b40:	ff 92       	push	r15
    1b42:	cf 93       	push	r28
    1b44:	df 93       	push	r29
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	2a 97       	sbiw	r28, 0x0a	; 10
    1b4c:	0f b6       	in	r0, 0x3f	; 63
    1b4e:	f8 94       	cli
    1b50:	de bf       	out	0x3e, r29	; 62
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	cd bf       	out	0x3d, r28	; 61
    1b56:	7a 87       	std	Y+10, r23	; 0x0a
    1b58:	69 87       	std	Y+9, r22	; 0x09
    1b5a:	fa 01       	movw	r30, r20
    1b5c:	c4 80       	ldd	r12, Z+4	; 0x04
    1b5e:	d5 80       	ldd	r13, Z+5	; 0x05
    1b60:	e6 80       	ldd	r14, Z+6	; 0x06
    1b62:	f7 80       	ldd	r15, Z+7	; 0x07
    1b64:	44 84       	ldd	r4, Z+12	; 0x0c
    1b66:	55 84       	ldd	r5, Z+13	; 0x0d
    1b68:	66 84       	ldd	r6, Z+14	; 0x0e
    1b6a:	77 84       	ldd	r7, Z+15	; 0x0f
    1b6c:	80 80       	ld	r8, Z
    1b6e:	91 80       	ldd	r9, Z+1	; 0x01
    1b70:	a2 80       	ldd	r10, Z+2	; 0x02
    1b72:	b3 80       	ldd	r11, Z+3	; 0x03
    1b74:	80 85       	ldd	r24, Z+8	; 0x08
    1b76:	91 85       	ldd	r25, Z+9	; 0x09
    1b78:	a2 85       	ldd	r26, Z+10	; 0x0a
    1b7a:	b3 85       	ldd	r27, Z+11	; 0x0b
    1b7c:	89 83       	std	Y+1, r24	; 0x01
    1b7e:	9a 83       	std	Y+2, r25	; 0x02
    1b80:	ab 83       	std	Y+3, r26	; 0x03
    1b82:	bc 83       	std	Y+4, r27	; 0x04
    1b84:	a3 01       	movw	r20, r6
    1b86:	92 01       	movw	r18, r4
    1b88:	c7 01       	movw	r24, r14
    1b8a:	b6 01       	movw	r22, r12
    1b8c:	0e 94 48 13 	call	0x2690	; 0x2690 <__mulsf3>
    1b90:	6d 83       	std	Y+5, r22	; 0x05
    1b92:	7e 83       	std	Y+6, r23	; 0x06
    1b94:	8f 83       	std	Y+7, r24	; 0x07
    1b96:	98 87       	std	Y+8, r25	; 0x08
    1b98:	29 81       	ldd	r18, Y+1	; 0x01
    1b9a:	3a 81       	ldd	r19, Y+2	; 0x02
    1b9c:	4b 81       	ldd	r20, Y+3	; 0x03
    1b9e:	5c 81       	ldd	r21, Y+4	; 0x04
    1ba0:	c5 01       	movw	r24, r10
    1ba2:	b4 01       	movw	r22, r8
    1ba4:	0e 94 48 13 	call	0x2690	; 0x2690 <__mulsf3>
    1ba8:	9b 01       	movw	r18, r22
    1baa:	ac 01       	movw	r20, r24
    1bac:	6d 81       	ldd	r22, Y+5	; 0x05
    1bae:	7e 81       	ldd	r23, Y+6	; 0x06
    1bb0:	8f 81       	ldd	r24, Y+7	; 0x07
    1bb2:	98 85       	ldd	r25, Y+8	; 0x08
    1bb4:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__subsf3>
    1bb8:	9b 01       	movw	r18, r22
    1bba:	ac 01       	movw	r20, r24
    1bbc:	0e 94 de 10 	call	0x21bc	; 0x21bc <__addsf3>
    1bc0:	a9 85       	ldd	r26, Y+9	; 0x09
    1bc2:	ba 85       	ldd	r27, Y+10	; 0x0a
    1bc4:	6d 93       	st	X+, r22
    1bc6:	7d 93       	st	X+, r23
    1bc8:	8d 93       	st	X+, r24
    1bca:	9c 93       	st	X, r25
    1bcc:	13 97       	sbiw	r26, 0x03	; 3
    1bce:	a5 01       	movw	r20, r10
    1bd0:	94 01       	movw	r18, r8
    1bd2:	c7 01       	movw	r24, r14
    1bd4:	b6 01       	movw	r22, r12
    1bd6:	0e 94 48 13 	call	0x2690	; 0x2690 <__mulsf3>
    1bda:	6d 83       	std	Y+5, r22	; 0x05
    1bdc:	7e 83       	std	Y+6, r23	; 0x06
    1bde:	8f 83       	std	Y+7, r24	; 0x07
    1be0:	98 87       	std	Y+8, r25	; 0x08
    1be2:	29 81       	ldd	r18, Y+1	; 0x01
    1be4:	3a 81       	ldd	r19, Y+2	; 0x02
    1be6:	4b 81       	ldd	r20, Y+3	; 0x03
    1be8:	5c 81       	ldd	r21, Y+4	; 0x04
    1bea:	c3 01       	movw	r24, r6
    1bec:	b2 01       	movw	r22, r4
    1bee:	0e 94 48 13 	call	0x2690	; 0x2690 <__mulsf3>
    1bf2:	9b 01       	movw	r18, r22
    1bf4:	ac 01       	movw	r20, r24
    1bf6:	6d 81       	ldd	r22, Y+5	; 0x05
    1bf8:	7e 81       	ldd	r23, Y+6	; 0x06
    1bfa:	8f 81       	ldd	r24, Y+7	; 0x07
    1bfc:	98 85       	ldd	r25, Y+8	; 0x08
    1bfe:	0e 94 de 10 	call	0x21bc	; 0x21bc <__addsf3>
    1c02:	9b 01       	movw	r18, r22
    1c04:	ac 01       	movw	r20, r24
    1c06:	0e 94 de 10 	call	0x21bc	; 0x21bc <__addsf3>
    1c0a:	e9 85       	ldd	r30, Y+9	; 0x09
    1c0c:	fa 85       	ldd	r31, Y+10	; 0x0a
    1c0e:	64 83       	std	Z+4, r22	; 0x04
    1c10:	75 83       	std	Z+5, r23	; 0x05
    1c12:	86 83       	std	Z+6, r24	; 0x06
    1c14:	97 83       	std	Z+7, r25	; 0x07
    1c16:	a5 01       	movw	r20, r10
    1c18:	94 01       	movw	r18, r8
    1c1a:	c5 01       	movw	r24, r10
    1c1c:	b4 01       	movw	r22, r8
    1c1e:	0e 94 48 13 	call	0x2690	; 0x2690 <__mulsf3>
    1c22:	4b 01       	movw	r8, r22
    1c24:	5c 01       	movw	r10, r24
    1c26:	a7 01       	movw	r20, r14
    1c28:	96 01       	movw	r18, r12
    1c2a:	c7 01       	movw	r24, r14
    1c2c:	b6 01       	movw	r22, r12
    1c2e:	0e 94 48 13 	call	0x2690	; 0x2690 <__mulsf3>
    1c32:	9b 01       	movw	r18, r22
    1c34:	ac 01       	movw	r20, r24
    1c36:	c5 01       	movw	r24, r10
    1c38:	b4 01       	movw	r22, r8
    1c3a:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__subsf3>
    1c3e:	6b 01       	movw	r12, r22
    1c40:	7c 01       	movw	r14, r24
    1c42:	29 81       	ldd	r18, Y+1	; 0x01
    1c44:	3a 81       	ldd	r19, Y+2	; 0x02
    1c46:	4b 81       	ldd	r20, Y+3	; 0x03
    1c48:	5c 81       	ldd	r21, Y+4	; 0x04
    1c4a:	ca 01       	movw	r24, r20
    1c4c:	b9 01       	movw	r22, r18
    1c4e:	0e 94 48 13 	call	0x2690	; 0x2690 <__mulsf3>
    1c52:	9b 01       	movw	r18, r22
    1c54:	ac 01       	movw	r20, r24
    1c56:	c7 01       	movw	r24, r14
    1c58:	b6 01       	movw	r22, r12
    1c5a:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__subsf3>
    1c5e:	6b 01       	movw	r12, r22
    1c60:	7c 01       	movw	r14, r24
    1c62:	a3 01       	movw	r20, r6
    1c64:	92 01       	movw	r18, r4
    1c66:	c3 01       	movw	r24, r6
    1c68:	b2 01       	movw	r22, r4
    1c6a:	0e 94 48 13 	call	0x2690	; 0x2690 <__mulsf3>
    1c6e:	9b 01       	movw	r18, r22
    1c70:	ac 01       	movw	r20, r24
    1c72:	c7 01       	movw	r24, r14
    1c74:	b6 01       	movw	r22, r12
    1c76:	0e 94 de 10 	call	0x21bc	; 0x21bc <__addsf3>
    1c7a:	a9 85       	ldd	r26, Y+9	; 0x09
    1c7c:	ba 85       	ldd	r27, Y+10	; 0x0a
    1c7e:	18 96       	adiw	r26, 0x08	; 8
    1c80:	6d 93       	st	X+, r22
    1c82:	7d 93       	st	X+, r23
    1c84:	8d 93       	st	X+, r24
    1c86:	9c 93       	st	X, r25
    1c88:	1b 97       	sbiw	r26, 0x0b	; 11
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	2a 96       	adiw	r28, 0x0a	; 10
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	f8 94       	cli
    1c92:	de bf       	out	0x3e, r29	; 62
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	cd bf       	out	0x3d, r28	; 61
    1c98:	df 91       	pop	r29
    1c9a:	cf 91       	pop	r28
    1c9c:	ff 90       	pop	r15
    1c9e:	ef 90       	pop	r14
    1ca0:	df 90       	pop	r13
    1ca2:	cf 90       	pop	r12
    1ca4:	bf 90       	pop	r11
    1ca6:	af 90       	pop	r10
    1ca8:	9f 90       	pop	r9
    1caa:	8f 90       	pop	r8
    1cac:	7f 90       	pop	r7
    1cae:	6f 90       	pop	r6
    1cb0:	5f 90       	pop	r5
    1cb2:	4f 90       	pop	r4
    1cb4:	08 95       	ret

00001cb6 <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat>:
    1cb6:	2f 92       	push	r2
    1cb8:	3f 92       	push	r3
    1cba:	4f 92       	push	r4
    1cbc:	5f 92       	push	r5
    1cbe:	6f 92       	push	r6
    1cc0:	7f 92       	push	r7
    1cc2:	8f 92       	push	r8
    1cc4:	9f 92       	push	r9
    1cc6:	af 92       	push	r10
    1cc8:	bf 92       	push	r11
    1cca:	cf 92       	push	r12
    1ccc:	df 92       	push	r13
    1cce:	ef 92       	push	r14
    1cd0:	ff 92       	push	r15
    1cd2:	0f 93       	push	r16
    1cd4:	1f 93       	push	r17
    1cd6:	cf 93       	push	r28
    1cd8:	df 93       	push	r29
    1cda:	00 d0       	rcall	.+0      	; 0x1cdc <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x26>
    1cdc:	00 d0       	rcall	.+0      	; 0x1cde <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x28>
    1cde:	00 d0       	rcall	.+0      	; 0x1ce0 <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x2a>
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62
    1ce4:	8b 01       	movw	r16, r22
    1ce6:	1a 01       	movw	r2, r20
    1ce8:	3e 83       	std	Y+6, r19	; 0x06
    1cea:	2d 83       	std	Y+5, r18	; 0x05
    1cec:	fa 01       	movw	r30, r20
    1cee:	c0 80       	ld	r12, Z
    1cf0:	d1 80       	ldd	r13, Z+1	; 0x01
    1cf2:	e2 80       	ldd	r14, Z+2	; 0x02
    1cf4:	f3 80       	ldd	r15, Z+3	; 0x03
    1cf6:	a7 01       	movw	r20, r14
    1cf8:	96 01       	movw	r18, r12
    1cfa:	c7 01       	movw	r24, r14
    1cfc:	b6 01       	movw	r22, r12
    1cfe:	0e 94 de 10 	call	0x21bc	; 0x21bc <__addsf3>
    1d02:	69 83       	std	Y+1, r22	; 0x01
    1d04:	7a 83       	std	Y+2, r23	; 0x02
    1d06:	8b 83       	std	Y+3, r24	; 0x03
    1d08:	9c 83       	std	Y+4, r25	; 0x04
    1d0a:	f1 01       	movw	r30, r2
    1d0c:	84 80       	ldd	r8, Z+4	; 0x04
    1d0e:	95 80       	ldd	r9, Z+5	; 0x05
    1d10:	a6 80       	ldd	r10, Z+6	; 0x06
    1d12:	b7 80       	ldd	r11, Z+7	; 0x07
    1d14:	a5 01       	movw	r20, r10
    1d16:	94 01       	movw	r18, r8
    1d18:	c5 01       	movw	r24, r10
    1d1a:	b4 01       	movw	r22, r8
    1d1c:	0e 94 de 10 	call	0x21bc	; 0x21bc <__addsf3>
    1d20:	2b 01       	movw	r4, r22
    1d22:	3c 01       	movw	r6, r24
    1d24:	29 81       	ldd	r18, Y+1	; 0x01
    1d26:	3a 81       	ldd	r19, Y+2	; 0x02
    1d28:	4b 81       	ldd	r20, Y+3	; 0x03
    1d2a:	5c 81       	ldd	r21, Y+4	; 0x04
    1d2c:	c7 01       	movw	r24, r14
    1d2e:	b6 01       	movw	r22, r12
    1d30:	0e 94 48 13 	call	0x2690	; 0x2690 <__mulsf3>
    1d34:	6b 01       	movw	r12, r22
    1d36:	7c 01       	movw	r14, r24
    1d38:	a3 01       	movw	r20, r6
    1d3a:	92 01       	movw	r18, r4
    1d3c:	c5 01       	movw	r24, r10
    1d3e:	b4 01       	movw	r22, r8
    1d40:	0e 94 48 13 	call	0x2690	; 0x2690 <__mulsf3>
    1d44:	9b 01       	movw	r18, r22
    1d46:	ac 01       	movw	r20, r24
    1d48:	c7 01       	movw	r24, r14
    1d4a:	b6 01       	movw	r22, r12
    1d4c:	0e 94 de 10 	call	0x21bc	; 0x21bc <__addsf3>
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	40 e8       	ldi	r20, 0x80	; 128
    1d56:	5f e3       	ldi	r21, 0x3F	; 63
    1d58:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__subsf3>
    1d5c:	6b 01       	movw	r12, r22
    1d5e:	7c 01       	movw	r14, r24
    1d60:	f1 01       	movw	r30, r2
    1d62:	20 85       	ldd	r18, Z+8	; 0x08
    1d64:	31 85       	ldd	r19, Z+9	; 0x09
    1d66:	42 85       	ldd	r20, Z+10	; 0x0a
    1d68:	53 85       	ldd	r21, Z+11	; 0x0b
    1d6a:	c3 01       	movw	r24, r6
    1d6c:	b2 01       	movw	r22, r4
    1d6e:	0e 94 48 13 	call	0x2690	; 0x2690 <__mulsf3>
    1d72:	2b 01       	movw	r4, r22
    1d74:	3c 01       	movw	r6, r24
    1d76:	f1 01       	movw	r30, r2
    1d78:	24 85       	ldd	r18, Z+12	; 0x0c
    1d7a:	35 85       	ldd	r19, Z+13	; 0x0d
    1d7c:	46 85       	ldd	r20, Z+14	; 0x0e
    1d7e:	57 85       	ldd	r21, Z+15	; 0x0f
    1d80:	69 81       	ldd	r22, Y+1	; 0x01
    1d82:	7a 81       	ldd	r23, Y+2	; 0x02
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	9c 81       	ldd	r25, Y+4	; 0x04
    1d88:	0e 94 48 13 	call	0x2690	; 0x2690 <__mulsf3>
    1d8c:	9b 01       	movw	r18, r22
    1d8e:	ac 01       	movw	r20, r24
    1d90:	c3 01       	movw	r24, r6
    1d92:	b2 01       	movw	r22, r4
    1d94:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__subsf3>
    1d98:	a7 01       	movw	r20, r14
    1d9a:	96 01       	movw	r18, r12
    1d9c:	0e 94 5d 11 	call	0x22ba	; 0x22ba <atan2>
    1da0:	f8 01       	movw	r30, r16
    1da2:	60 83       	st	Z, r22
    1da4:	71 83       	std	Z+1, r23	; 0x01
    1da6:	82 83       	std	Z+2, r24	; 0x02
    1da8:	93 83       	std	Z+3, r25	; 0x03
    1daa:	ed 81       	ldd	r30, Y+5	; 0x05
    1dac:	fe 81       	ldd	r31, Y+6	; 0x06
    1dae:	64 81       	ldd	r22, Z+4	; 0x04
    1db0:	75 81       	ldd	r23, Z+5	; 0x05
    1db2:	86 81       	ldd	r24, Z+6	; 0x06
    1db4:	97 81       	ldd	r25, Z+7	; 0x07
    1db6:	c0 84       	ldd	r12, Z+8	; 0x08
    1db8:	d1 84       	ldd	r13, Z+9	; 0x09
    1dba:	e2 84       	ldd	r14, Z+10	; 0x0a
    1dbc:	f3 84       	ldd	r15, Z+11	; 0x0b
    1dbe:	9b 01       	movw	r18, r22
    1dc0:	ac 01       	movw	r20, r24
    1dc2:	0e 94 48 13 	call	0x2690	; 0x2690 <__mulsf3>
    1dc6:	4b 01       	movw	r8, r22
    1dc8:	5c 01       	movw	r10, r24
    1dca:	a7 01       	movw	r20, r14
    1dcc:	96 01       	movw	r18, r12
    1dce:	c7 01       	movw	r24, r14
    1dd0:	b6 01       	movw	r22, r12
    1dd2:	0e 94 48 13 	call	0x2690	; 0x2690 <__mulsf3>
    1dd6:	9b 01       	movw	r18, r22
    1dd8:	ac 01       	movw	r20, r24
    1dda:	c5 01       	movw	r24, r10
    1ddc:	b4 01       	movw	r22, r8
    1dde:	0e 94 de 10 	call	0x21bc	; 0x21bc <__addsf3>
    1de2:	0e 94 bb 13 	call	0x2776	; 0x2776 <sqrt>
    1de6:	9b 01       	movw	r18, r22
    1de8:	ac 01       	movw	r20, r24
    1dea:	ed 81       	ldd	r30, Y+5	; 0x05
    1dec:	fe 81       	ldd	r31, Y+6	; 0x06
    1dee:	60 81       	ld	r22, Z
    1df0:	71 81       	ldd	r23, Z+1	; 0x01
    1df2:	82 81       	ldd	r24, Z+2	; 0x02
    1df4:	93 81       	ldd	r25, Z+3	; 0x03
    1df6:	0e 94 5d 11 	call	0x22ba	; 0x22ba <atan2>
    1dfa:	6b 01       	movw	r12, r22
    1dfc:	7c 01       	movw	r14, r24
    1dfe:	f8 01       	movw	r30, r16
    1e00:	64 83       	std	Z+4, r22	; 0x04
    1e02:	75 83       	std	Z+5, r23	; 0x05
    1e04:	86 83       	std	Z+6, r24	; 0x06
    1e06:	97 83       	std	Z+7, r25	; 0x07
    1e08:	ed 81       	ldd	r30, Y+5	; 0x05
    1e0a:	fe 81       	ldd	r31, Y+6	; 0x06
    1e0c:	20 85       	ldd	r18, Z+8	; 0x08
    1e0e:	31 85       	ldd	r19, Z+9	; 0x09
    1e10:	42 85       	ldd	r20, Z+10	; 0x0a
    1e12:	53 85       	ldd	r21, Z+11	; 0x0b
    1e14:	64 81       	ldd	r22, Z+4	; 0x04
    1e16:	75 81       	ldd	r23, Z+5	; 0x05
    1e18:	86 81       	ldd	r24, Z+6	; 0x06
    1e1a:	97 81       	ldd	r25, Z+7	; 0x07
    1e1c:	0e 94 5d 11 	call	0x22ba	; 0x22ba <atan2>
    1e20:	f8 01       	movw	r30, r16
    1e22:	60 87       	std	Z+8, r22	; 0x08
    1e24:	71 87       	std	Z+9, r23	; 0x09
    1e26:	82 87       	std	Z+10, r24	; 0x0a
    1e28:	93 87       	std	Z+11, r25	; 0x0b
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	a9 01       	movw	r20, r18
    1e30:	ed 81       	ldd	r30, Y+5	; 0x05
    1e32:	fe 81       	ldd	r31, Y+6	; 0x06
    1e34:	60 85       	ldd	r22, Z+8	; 0x08
    1e36:	71 85       	ldd	r23, Z+9	; 0x09
    1e38:	82 85       	ldd	r24, Z+10	; 0x0a
    1e3a:	93 85       	ldd	r25, Z+11	; 0x0b
    1e3c:	0e 94 bc 11 	call	0x2378	; 0x2378 <__cmpsf2>
    1e40:	87 ff       	sbrs	r24, 7
    1e42:	1b c0       	rjmp	.+54     	; 0x1e7a <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x1c4>
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	a9 01       	movw	r20, r18
    1e4a:	c7 01       	movw	r24, r14
    1e4c:	b6 01       	movw	r22, r12
    1e4e:	0e 94 3b 13 	call	0x2676	; 0x2676 <__gesf2>
    1e52:	a7 01       	movw	r20, r14
    1e54:	96 01       	movw	r18, r12
    1e56:	18 16       	cp	r1, r24
    1e58:	2c f4       	brge	.+10     	; 0x1e64 <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x1ae>
    1e5a:	6b ed       	ldi	r22, 0xDB	; 219
    1e5c:	7f e0       	ldi	r23, 0x0F	; 15
    1e5e:	89 e4       	ldi	r24, 0x49	; 73
    1e60:	90 e4       	ldi	r25, 0x40	; 64
    1e62:	04 c0       	rjmp	.+8      	; 0x1e6c <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x1b6>
    1e64:	6b ed       	ldi	r22, 0xDB	; 219
    1e66:	7f e0       	ldi	r23, 0x0F	; 15
    1e68:	89 e4       	ldi	r24, 0x49	; 73
    1e6a:	90 ec       	ldi	r25, 0xC0	; 192
    1e6c:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__subsf3>
    1e70:	f8 01       	movw	r30, r16
    1e72:	64 83       	std	Z+4, r22	; 0x04
    1e74:	75 83       	std	Z+5, r23	; 0x05
    1e76:	86 83       	std	Z+6, r24	; 0x06
    1e78:	97 83       	std	Z+7, r25	; 0x07
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	26 96       	adiw	r28, 0x06	; 6
    1e7e:	0f b6       	in	r0, 0x3f	; 63
    1e80:	f8 94       	cli
    1e82:	de bf       	out	0x3e, r29	; 62
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	cd bf       	out	0x3d, r28	; 61
    1e88:	df 91       	pop	r29
    1e8a:	cf 91       	pop	r28
    1e8c:	1f 91       	pop	r17
    1e8e:	0f 91       	pop	r16
    1e90:	ff 90       	pop	r15
    1e92:	ef 90       	pop	r14
    1e94:	df 90       	pop	r13
    1e96:	cf 90       	pop	r12
    1e98:	bf 90       	pop	r11
    1e9a:	af 90       	pop	r10
    1e9c:	9f 90       	pop	r9
    1e9e:	8f 90       	pop	r8
    1ea0:	7f 90       	pop	r7
    1ea2:	6f 90       	pop	r6
    1ea4:	5f 90       	pop	r5
    1ea6:	4f 90       	pop	r4
    1ea8:	3f 90       	pop	r3
    1eaa:	2f 90       	pop	r2
    1eac:	08 95       	ret

00001eae <loop>:
 
 
void loop()
{
  // if programming failed, don't try to do anything
  if (!dmpReady) return;
    1eae:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <dmpReady>
    1eb2:	88 23       	and	r24, r24
    1eb4:	09 f4       	brne	.+2      	; 0x1eb8 <loop+0xa>
    1eb6:	d5 c0       	rjmp	.+426    	; 0x2062 <loop+0x1b4>
 
  // wait for MPU interrupt or extra packet(s) available
  while (!mpuInterrupt && fifoCount < packetSize);
    1eb8:	20 91 ab 01 	lds	r18, 0x01AB	; 0x8001ab <fifoCount>
    1ebc:	30 91 ac 01 	lds	r19, 0x01AC	; 0x8001ac <fifoCount+0x1>
    1ec0:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <packetSize>
    1ec4:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <packetSize+0x1>
    1ec8:	40 91 42 01 	lds	r20, 0x0142	; 0x800142 <__data_end>
    1ecc:	41 11       	cpse	r20, r1
    1ece:	03 c0       	rjmp	.+6      	; 0x1ed6 <loop+0x28>
    1ed0:	28 17       	cp	r18, r24
    1ed2:	39 07       	cpc	r19, r25
    1ed4:	c8 f3       	brcs	.-14     	; 0x1ec8 <loop+0x1a>
 
  // reset interrupt flag and get INT_STATUS byte
  mpuInterrupt = false;
    1ed6:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <__data_end>
  mpuIntStatus = mpu.getIntStatus();
    1eda:	8a ed       	ldi	r24, 0xDA	; 218
    1edc:	91 e0       	ldi	r25, 0x01	; 1
    1ede:	0e 94 51 09 	call	0x12a2	; 0x12a2 <_ZN7MPU605012getIntStatusEv>
    1ee2:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <mpuIntStatus>
 
  // get current FIFO count
  fifoCount = mpu.getFIFOCount();
    1ee6:	8a ed       	ldi	r24, 0xDA	; 218
    1ee8:	91 e0       	ldi	r25, 0x01	; 1
    1eea:	0e 94 ac 09 	call	0x1358	; 0x1358 <_ZN7MPU605012getFIFOCountEv>
    1eee:	9c 01       	movw	r18, r24
    1ef0:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <fifoCount+0x1>
    1ef4:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <fifoCount>
 
  // check for overflow (this should never happen unless our code is too inefficient)
  if ((mpuIntStatus & 0x10) || fifoCount == 1024)
    1ef8:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <mpuIntStatus>
    1efc:	94 fd       	sbrc	r25, 4
    1efe:	03 c0       	rjmp	.+6      	; 0x1f06 <loop+0x58>
    1f00:	21 15       	cp	r18, r1
    1f02:	34 40       	sbci	r19, 0x04	; 4
    1f04:	51 f4       	brne	.+20     	; 0x1f1a <loop+0x6c>
  {
    // reset so we can continue cleanly
    mpu.resetFIFO();
    1f06:	8a ed       	ldi	r24, 0xDA	; 218
    1f08:	91 e0       	ldi	r25, 0x01	; 1
    1f0a:	0e 94 71 09 	call	0x12e2	; 0x12e2 <_ZN7MPU60509resetFIFOEv>
    Serial.println(F("FIFO overflow!"));
    1f0e:	66 e9       	ldi	r22, 0x96	; 150
    1f10:	70 e0       	ldi	r23, 0x00	; 0
    1f12:	8d ee       	ldi	r24, 0xED	; 237
    1f14:	91 e0       	ldi	r25, 0x01	; 1
    1f16:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
 
  // otherwise, check for DMP data ready interrupt (this should happen frequently)
  }
  else if (mpuIntStatus & 0x02)
    1f1a:	91 ff       	sbrs	r25, 1
    1f1c:	a2 c0       	rjmp	.+324    	; 0x2062 <loop+0x1b4>
  {
    // wait for correct available data length, should be a VERY short wait
    while (fifoCount < packetSize) fifoCount = mpu.getFIFOCount();
    1f1e:	40 91 ad 01 	lds	r20, 0x01AD	; 0x8001ad <packetSize>
    1f22:	50 91 ae 01 	lds	r21, 0x01AE	; 0x8001ae <packetSize+0x1>
    1f26:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <fifoCount>
    1f2a:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <fifoCount+0x1>
    1f2e:	84 17       	cp	r24, r20
    1f30:	95 07       	cpc	r25, r21
    1f32:	48 f4       	brcc	.+18     	; 0x1f46 <loop+0x98>
    1f34:	8a ed       	ldi	r24, 0xDA	; 218
    1f36:	91 e0       	ldi	r25, 0x01	; 1
    1f38:	0e 94 ac 09 	call	0x1358	; 0x1358 <_ZN7MPU605012getFIFOCountEv>
    1f3c:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <fifoCount+0x1>
    1f40:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <fifoCount>
    1f44:	ec cf       	rjmp	.-40     	; 0x1f1e <loop+0x70>
    // read a packet from FIFO
    mpu.getFIFOBytes(fifoBuffer, packetSize);
    1f46:	6b e6       	ldi	r22, 0x6B	; 107
    1f48:	71 e0       	ldi	r23, 0x01	; 1
    1f4a:	8a ed       	ldi	r24, 0xDA	; 218
    1f4c:	91 e0       	ldi	r25, 0x01	; 1
    1f4e:	0e 94 c7 09 	call	0x138e	; 0x138e <_ZN7MPU605012getFIFOBytesEPhh>
    // track FIFO count here in case there is > 1 packet available
    // (this lets us immediately read more without waiting for an interrupt)
    fifoCount -= packetSize;
    1f52:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <fifoCount>
    1f56:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <fifoCount+0x1>
    1f5a:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <packetSize>
    1f5e:	30 91 ae 01 	lds	r19, 0x01AE	; 0x8001ae <packetSize+0x1>
    1f62:	82 1b       	sub	r24, r18
    1f64:	93 0b       	sbc	r25, r19
    1f66:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <fifoCount+0x1>
    1f6a:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <fifoCount>
 
    mpu.dmpGetQuaternion(&q, fifoBuffer);
    1f6e:	4b e6       	ldi	r20, 0x6B	; 107
    1f70:	51 e0       	ldi	r21, 0x01	; 1
    1f72:	6b e5       	ldi	r22, 0x5B	; 91
    1f74:	71 e0       	ldi	r23, 0x01	; 1
    1f76:	8a ed       	ldi	r24, 0xDA	; 218
    1f78:	91 e0       	ldi	r25, 0x01	; 1
    1f7a:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh>
    Serial.print(q.y);
    Serial.print("\t");
    Serial.println(q.z);
	*/
	
    mpu.dmpGetGravity(&gravity, &q);
    1f7e:	4b e5       	ldi	r20, 0x5B	; 91
    1f80:	51 e0       	ldi	r21, 0x01	; 1
    1f82:	6f e4       	ldi	r22, 0x4F	; 79
    1f84:	71 e0       	ldi	r23, 0x01	; 1
    1f86:	8a ed       	ldi	r24, 0xDA	; 218
    1f88:	91 e0       	ldi	r25, 0x01	; 1
    1f8a:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <_ZN7MPU605013dmpGetGravityEP11VectorFloatP10Quaternion>
    mpu.dmpGetYawPitchRoll(ypr, &q, &gravity);
    1f8e:	2f e4       	ldi	r18, 0x4F	; 79
    1f90:	31 e0       	ldi	r19, 0x01	; 1
    1f92:	4b e5       	ldi	r20, 0x5B	; 91
    1f94:	51 e0       	ldi	r21, 0x01	; 1
    1f96:	63 e4       	ldi	r22, 0x43	; 67
    1f98:	71 e0       	ldi	r23, 0x01	; 1
    1f9a:	8a ed       	ldi	r24, 0xDA	; 218
    1f9c:	91 e0       	ldi	r25, 0x01	; 1
    1f9e:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat>
	
    Serial.print(ypr[0] * 180/M_PI);
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	44 e3       	ldi	r20, 0x34	; 52
    1fa8:	53 e4       	ldi	r21, 0x43	; 67
    1faa:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <ypr>
    1fae:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <ypr+0x1>
    1fb2:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <ypr+0x2>
    1fb6:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <ypr+0x3>
    1fba:	0e 94 48 13 	call	0x2690	; 0x2690 <__mulsf3>
    1fbe:	2b ed       	ldi	r18, 0xDB	; 219
    1fc0:	3f e0       	ldi	r19, 0x0F	; 15
    1fc2:	49 e4       	ldi	r20, 0x49	; 73
    1fc4:	50 e4       	ldi	r21, 0x40	; 64
    1fc6:	0e 94 c1 11 	call	0x2382	; 0x2382 <__divsf3>
    1fca:	ab 01       	movw	r20, r22
    1fcc:	bc 01       	movw	r22, r24
    1fce:	22 e0       	ldi	r18, 0x02	; 2
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	8d ee       	ldi	r24, 0xED	; 237
    1fd4:	91 e0       	ldi	r25, 0x01	; 1
    1fd6:	0e 94 18 18 	call	0x3030	; 0x3030 <_ZN5Print5printEdi>
    Serial.print(",");
    1fda:	6c e0       	ldi	r22, 0x0C	; 12
    1fdc:	71 e0       	ldi	r23, 0x01	; 1
    1fde:	8d ee       	ldi	r24, 0xED	; 237
    1fe0:	91 e0       	ldi	r25, 0x01	; 1
    1fe2:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <_ZN5Print5printEPKc>
    Serial.print(ypr[1] * 180/M_PI);
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	44 e3       	ldi	r20, 0x34	; 52
    1fec:	53 e4       	ldi	r21, 0x43	; 67
    1fee:	60 91 47 01 	lds	r22, 0x0147	; 0x800147 <ypr+0x4>
    1ff2:	70 91 48 01 	lds	r23, 0x0148	; 0x800148 <ypr+0x5>
    1ff6:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <ypr+0x6>
    1ffa:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <ypr+0x7>
    1ffe:	0e 94 48 13 	call	0x2690	; 0x2690 <__mulsf3>
    2002:	2b ed       	ldi	r18, 0xDB	; 219
    2004:	3f e0       	ldi	r19, 0x0F	; 15
    2006:	49 e4       	ldi	r20, 0x49	; 73
    2008:	50 e4       	ldi	r21, 0x40	; 64
    200a:	0e 94 c1 11 	call	0x2382	; 0x2382 <__divsf3>
    200e:	ab 01       	movw	r20, r22
    2010:	bc 01       	movw	r22, r24
    2012:	22 e0       	ldi	r18, 0x02	; 2
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	8d ee       	ldi	r24, 0xED	; 237
    2018:	91 e0       	ldi	r25, 0x01	; 1
    201a:	0e 94 18 18 	call	0x3030	; 0x3030 <_ZN5Print5printEdi>
    Serial.print(",");
    201e:	6c e0       	ldi	r22, 0x0C	; 12
    2020:	71 e0       	ldi	r23, 0x01	; 1
    2022:	8d ee       	ldi	r24, 0xED	; 237
    2024:	91 e0       	ldi	r25, 0x01	; 1
    2026:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <_ZN5Print5printEPKc>
    Serial.println(ypr[2] * 180/M_PI);
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	44 e3       	ldi	r20, 0x34	; 52
    2030:	53 e4       	ldi	r21, 0x43	; 67
    2032:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <ypr+0x8>
    2036:	70 91 4c 01 	lds	r23, 0x014C	; 0x80014c <ypr+0x9>
    203a:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <ypr+0xa>
    203e:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <ypr+0xb>
    2042:	0e 94 48 13 	call	0x2690	; 0x2690 <__mulsf3>
    2046:	2b ed       	ldi	r18, 0xDB	; 219
    2048:	3f e0       	ldi	r19, 0x0F	; 15
    204a:	49 e4       	ldi	r20, 0x49	; 73
    204c:	50 e4       	ldi	r21, 0x40	; 64
    204e:	0e 94 c1 11 	call	0x2382	; 0x2382 <__divsf3>
    2052:	ab 01       	movw	r20, r22
    2054:	bc 01       	movw	r22, r24
    2056:	22 e0       	ldi	r18, 0x02	; 2
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	8d ee       	ldi	r24, 0xED	; 237
    205c:	91 e0       	ldi	r25, 0x01	; 1
    205e:	0c 94 1a 18 	jmp	0x3034	; 0x3034 <_ZN5Print7printlnEdi>
    2062:	08 95       	ret

00002064 <_GLOBAL__sub_I__ZN7MPU605013dmpInitializeEv>:
//End of Auto generated function prototypes by Atmel Studio


#endif
 
MPU6050 mpu;
    2064:	68 e6       	ldi	r22, 0x68	; 104
    2066:	8a ed       	ldi	r24, 0xDA	; 218
    2068:	91 e0       	ldi	r25, 0x01	; 1
    206a:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <_ZN7MPU6050C1Eh>
 
Kalman kalmanX;
    206e:	82 eb       	ldi	r24, 0xB2	; 178
    2070:	91 e0       	ldi	r25, 0x01	; 1
    2072:	0e 94 92 06 	call	0xd24	; 0xd24 <_ZN6KalmanC1Ev>
        float x;
        float y;
        float z;
        
        Quaternion() {
            w = 1.0f;
    2076:	eb e5       	ldi	r30, 0x5B	; 91
    2078:	f1 e0       	ldi	r31, 0x01	; 1
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	a0 e8       	ldi	r26, 0x80	; 128
    2080:	bf e3       	ldi	r27, 0x3F	; 63
    2082:	80 83       	st	Z, r24
    2084:	91 83       	std	Z+1, r25	; 0x01
    2086:	a2 83       	std	Z+2, r26	; 0x02
    2088:	b3 83       	std	Z+3, r27	; 0x03
            x = 0.0f;
    208a:	14 82       	std	Z+4, r1	; 0x04
    208c:	15 82       	std	Z+5, r1	; 0x05
    208e:	16 82       	std	Z+6, r1	; 0x06
    2090:	17 82       	std	Z+7, r1	; 0x07
            y = 0.0f;
    2092:	10 86       	std	Z+8, r1	; 0x08
    2094:	11 86       	std	Z+9, r1	; 0x09
    2096:	12 86       	std	Z+10, r1	; 0x0a
    2098:	13 86       	std	Z+11, r1	; 0x0b
            z = 0.0f;
    209a:	14 86       	std	Z+12, r1	; 0x0c
    209c:	15 86       	std	Z+13, r1	; 0x0d
    209e:	16 86       	std	Z+14, r1	; 0x0e
    20a0:	17 86       	std	Z+15, r1	; 0x0f
        float x;
        float y;
        float z;

        VectorFloat() {
            x = 0;
    20a2:	ef e4       	ldi	r30, 0x4F	; 79
    20a4:	f1 e0       	ldi	r31, 0x01	; 1
    20a6:	10 82       	st	Z, r1
    20a8:	11 82       	std	Z+1, r1	; 0x01
    20aa:	12 82       	std	Z+2, r1	; 0x02
    20ac:	13 82       	std	Z+3, r1	; 0x03
            y = 0;
    20ae:	14 82       	std	Z+4, r1	; 0x04
    20b0:	15 82       	std	Z+5, r1	; 0x05
    20b2:	16 82       	std	Z+6, r1	; 0x06
    20b4:	17 82       	std	Z+7, r1	; 0x07
            z = 0;
    20b6:	10 86       	std	Z+8, r1	; 0x08
    20b8:	11 86       	std	Z+9, r1	; 0x09
    20ba:	12 86       	std	Z+10, r1	; 0x0a
    20bc:	13 86       	std	Z+11, r1	; 0x0b
    20be:	08 95       	ret

000020c0 <setup>:
void setup()
{
  
// join I2C bus (I2Cdev library doesn't do this automatically)
#if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
  Wire.begin();
    20c0:	83 e9       	ldi	r24, 0x93	; 147
    20c2:	92 e0       	ldi	r25, 0x02	; 2
    20c4:	0e 94 b3 1a 	call	0x3566	; 0x3566 <_ZN7TwoWire5beginEv>
  TWBR = 24; // 400kHz I2C clock (200kHz if CPU is 8MHz)
    20c8:	88 e1       	ldi	r24, 0x18	; 24
    20ca:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
#elif I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE
  Fastwire::setup(400, true);
#endif

 //Serial.println(F("init start"));
mpu.initialize();
    20ce:	8a ed       	ldi	r24, 0xDA	; 218
    20d0:	91 e0       	ldi	r25, 0x01	; 1
    20d2:	0e 94 98 09 	call	0x1330	; 0x1330 <_ZN7MPU605010initializeEv>
//Serial.println(F("init done"));
devStatus = mpu.dmpInitialize();
    20d6:	8a ed       	ldi	r24, 0xDA	; 218
    20d8:	91 e0       	ldi	r25, 0x01	; 1
    20da:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <_ZN7MPU605013dmpInitializeEv>
    20de:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <devStatus>
 //Serial.println(devStatus);
 //Serial.println(mpu.getDLPFMode());
// supply your own gyro offsets here, scaled for min sensitivity
mpu.setXGyroOffset(220);
    20e2:	6c ed       	ldi	r22, 0xDC	; 220
    20e4:	70 e0       	ldi	r23, 0x00	; 0
    20e6:	8a ed       	ldi	r24, 0xDA	; 218
    20e8:	91 e0       	ldi	r25, 0x01	; 1
    20ea:	0e 94 2a 0a 	call	0x1454	; 0x1454 <_ZN7MPU605014setXGyroOffsetEi>
mpu.setYGyroOffset(76);
    20ee:	6c e4       	ldi	r22, 0x4C	; 76
    20f0:	70 e0       	ldi	r23, 0x00	; 0
    20f2:	8a ed       	ldi	r24, 0xDA	; 218
    20f4:	91 e0       	ldi	r25, 0x01	; 1
    20f6:	0e 94 30 0a 	call	0x1460	; 0x1460 <_ZN7MPU605014setYGyroOffsetEi>
mpu.setZGyroOffset(-85);
    20fa:	6b ea       	ldi	r22, 0xAB	; 171
    20fc:	7f ef       	ldi	r23, 0xFF	; 255
    20fe:	8a ed       	ldi	r24, 0xDA	; 218
    2100:	91 e0       	ldi	r25, 0x01	; 1
    2102:	0e 94 36 0a 	call	0x146c	; 0x146c <_ZN7MPU605014setZGyroOffsetEi>
mpu.setZAccelOffset(1688); // 1688 factory default for my test chip
    2106:	68 e9       	ldi	r22, 0x98	; 152
    2108:	76 e0       	ldi	r23, 0x06	; 6
    210a:	8a ed       	ldi	r24, 0xDA	; 218
    210c:	91 e0       	ldi	r25, 0x01	; 1
    210e:	0e 94 15 0a 	call	0x142a	; 0x142a <_ZN7MPU605015setZAccelOffsetEi>
 
// make sure it worked (returns 0 if so)
  if (devStatus == 0)
    2112:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <devStatus>
    2116:	81 11       	cpse	r24, r1
    2118:	28 c0       	rjmp	.+80     	; 0x216a <setup+0xaa>
  {
    // turn on the DMP, now that it's ready
    mpu.setDMPEnabled(true);
    211a:	61 e0       	ldi	r22, 0x01	; 1
    211c:	8a ed       	ldi	r24, 0xDA	; 218
    211e:	91 e0       	ldi	r25, 0x01	; 1
    2120:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN7MPU605013setDMPEnabledEb>
	mpu.setDLPFMode(0);
    2124:	60 e0       	ldi	r22, 0x00	; 0
    2126:	8a ed       	ldi	r24, 0xDA	; 218
    2128:	91 e0       	ldi	r25, 0x01	; 1
    212a:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_ZN7MPU605011setDLPFModeEh>
	mpu.setDHPFMode(0);
    212e:	60 e0       	ldi	r22, 0x00	; 0
    2130:	8a ed       	ldi	r24, 0xDA	; 218
    2132:	91 e0       	ldi	r25, 0x01	; 1
    2134:	0e 94 1d 09 	call	0x123a	; 0x123a <_ZN7MPU605011setDHPFModeEh>
	//mpu.CalibrateGyro(10);
	//mpu.CalibrateAccel(10);
    // enable Arduino interrupt detection
    attachInterrupt(0, dmpDataReady, RISING);
    2138:	43 e0       	ldi	r20, 0x03	; 3
    213a:	50 e0       	ldi	r21, 0x00	; 0
    213c:	6c e6       	ldi	r22, 0x6C	; 108
    213e:	7b e0       	ldi	r23, 0x0B	; 11
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	0e 94 2d 18 	call	0x305a	; 0x305a <attachInterrupt>
    mpuIntStatus = mpu.getIntStatus();
    2146:	8a ed       	ldi	r24, 0xDA	; 218
    2148:	91 e0       	ldi	r25, 0x01	; 1
    214a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <_ZN7MPU605012getIntStatusEv>
    214e:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <mpuIntStatus>
    // set our DMP Ready flag so the main loop() function knows it's okay to use it
    dmpReady = true;
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <dmpReady>

    // get expected DMP packet size for later comparison
    packetSize = mpu.dmpGetFIFOPacketSize();
    2158:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <mpu+0x11>
    215c:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <mpu+0x12>
    2160:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <packetSize+0x1>
    2164:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <packetSize>
    2168:	14 c0       	rjmp	.+40     	; 0x2192 <setup+0xd2>
  {
    // ERROR!
    // 1 = initial memory load failed
    // 2 = DMP configuration updates failed
    // (if it's going to break, usually the code will be 1)
    Serial.print(F("DMP Initialization failed (code "));
    216a:	67 ea       	ldi	r22, 0xA7	; 167
    216c:	70 e0       	ldi	r23, 0x00	; 0
    216e:	8d ee       	ldi	r24, 0xED	; 237
    2170:	91 e0       	ldi	r25, 0x01	; 1
    2172:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(devStatus);
    2176:	4a e0       	ldi	r20, 0x0A	; 10
    2178:	50 e0       	ldi	r21, 0x00	; 0
    217a:	60 91 af 01 	lds	r22, 0x01AF	; 0x8001af <devStatus>
    217e:	8d ee       	ldi	r24, 0xED	; 237
    2180:	91 e0       	ldi	r25, 0x01	; 1
    2182:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_ZN5Print5printEhi>
    Serial.println(F(")"));
    2186:	65 ea       	ldi	r22, 0xA5	; 165
    2188:	70 e0       	ldi	r23, 0x00	; 0
    218a:	8d ee       	ldi	r24, 0xED	; 237
    218c:	91 e0       	ldi	r25, 0x01	; 1
    218e:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Print7printlnEPK19__FlashStringHelper>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    2192:	26 e0       	ldi	r18, 0x06	; 6
    2194:	40 e0       	ldi	r20, 0x00	; 0
    2196:	52 ec       	ldi	r21, 0xC2	; 194
    2198:	61 e0       	ldi	r22, 0x01	; 1
    219a:	70 e0       	ldi	r23, 0x00	; 0
    219c:	8d ee       	ldi	r24, 0xED	; 237
    219e:	91 e0       	ldi	r25, 0x01	; 1
    21a0:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <_ZN14HardwareSerial5beginEmh>
  }
  Serial.begin(115200);
  Serial.flush();
    21a4:	8d ee       	ldi	r24, 0xED	; 237
    21a6:	91 e0       	ldi	r25, 0x01	; 1
    21a8:	0e 94 ce 14 	call	0x299c	; 0x299c <_ZN14HardwareSerial5flushEv>
   kalmanX.setAngle(0);
    21ac:	40 e0       	ldi	r20, 0x00	; 0
    21ae:	50 e0       	ldi	r21, 0x00	; 0
    21b0:	ba 01       	movw	r22, r20
    21b2:	82 eb       	ldi	r24, 0xB2	; 178
    21b4:	91 e0       	ldi	r25, 0x01	; 1
    21b6:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <_ZN6Kalman8setAngleEf>

000021ba <__subsf3>:
    21ba:	50 58       	subi	r21, 0x80	; 128

000021bc <__addsf3>:
    21bc:	bb 27       	eor	r27, r27
    21be:	aa 27       	eor	r26, r26
    21c0:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__addsf3x>
    21c4:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__fp_round>
    21c8:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__fp_pscA>
    21cc:	38 f0       	brcs	.+14     	; 0x21dc <__addsf3+0x20>
    21ce:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <__fp_pscB>
    21d2:	20 f0       	brcs	.+8      	; 0x21dc <__addsf3+0x20>
    21d4:	39 f4       	brne	.+14     	; 0x21e4 <__addsf3+0x28>
    21d6:	9f 3f       	cpi	r25, 0xFF	; 255
    21d8:	19 f4       	brne	.+6      	; 0x21e0 <__addsf3+0x24>
    21da:	26 f4       	brtc	.+8      	; 0x21e4 <__addsf3+0x28>
    21dc:	0c 94 c9 12 	jmp	0x2592	; 0x2592 <__fp_nan>
    21e0:	0e f4       	brtc	.+2      	; 0x21e4 <__addsf3+0x28>
    21e2:	e0 95       	com	r30
    21e4:	e7 fb       	bst	r30, 7
    21e6:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__fp_inf>

000021ea <__addsf3x>:
    21ea:	e9 2f       	mov	r30, r25
    21ec:	0e 94 12 13 	call	0x2624	; 0x2624 <__fp_split3>
    21f0:	58 f3       	brcs	.-42     	; 0x21c8 <__addsf3+0xc>
    21f2:	ba 17       	cp	r27, r26
    21f4:	62 07       	cpc	r22, r18
    21f6:	73 07       	cpc	r23, r19
    21f8:	84 07       	cpc	r24, r20
    21fa:	95 07       	cpc	r25, r21
    21fc:	20 f0       	brcs	.+8      	; 0x2206 <__addsf3x+0x1c>
    21fe:	79 f4       	brne	.+30     	; 0x221e <__addsf3x+0x34>
    2200:	a6 f5       	brtc	.+104    	; 0x226a <__addsf3x+0x80>
    2202:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__fp_zero>
    2206:	0e f4       	brtc	.+2      	; 0x220a <__addsf3x+0x20>
    2208:	e0 95       	com	r30
    220a:	0b 2e       	mov	r0, r27
    220c:	ba 2f       	mov	r27, r26
    220e:	a0 2d       	mov	r26, r0
    2210:	0b 01       	movw	r0, r22
    2212:	b9 01       	movw	r22, r18
    2214:	90 01       	movw	r18, r0
    2216:	0c 01       	movw	r0, r24
    2218:	ca 01       	movw	r24, r20
    221a:	a0 01       	movw	r20, r0
    221c:	11 24       	eor	r1, r1
    221e:	ff 27       	eor	r31, r31
    2220:	59 1b       	sub	r21, r25
    2222:	99 f0       	breq	.+38     	; 0x224a <__addsf3x+0x60>
    2224:	59 3f       	cpi	r21, 0xF9	; 249
    2226:	50 f4       	brcc	.+20     	; 0x223c <__addsf3x+0x52>
    2228:	50 3e       	cpi	r21, 0xE0	; 224
    222a:	68 f1       	brcs	.+90     	; 0x2286 <__addsf3x+0x9c>
    222c:	1a 16       	cp	r1, r26
    222e:	f0 40       	sbci	r31, 0x00	; 0
    2230:	a2 2f       	mov	r26, r18
    2232:	23 2f       	mov	r18, r19
    2234:	34 2f       	mov	r19, r20
    2236:	44 27       	eor	r20, r20
    2238:	58 5f       	subi	r21, 0xF8	; 248
    223a:	f3 cf       	rjmp	.-26     	; 0x2222 <__addsf3x+0x38>
    223c:	46 95       	lsr	r20
    223e:	37 95       	ror	r19
    2240:	27 95       	ror	r18
    2242:	a7 95       	ror	r26
    2244:	f0 40       	sbci	r31, 0x00	; 0
    2246:	53 95       	inc	r21
    2248:	c9 f7       	brne	.-14     	; 0x223c <__addsf3x+0x52>
    224a:	7e f4       	brtc	.+30     	; 0x226a <__addsf3x+0x80>
    224c:	1f 16       	cp	r1, r31
    224e:	ba 0b       	sbc	r27, r26
    2250:	62 0b       	sbc	r22, r18
    2252:	73 0b       	sbc	r23, r19
    2254:	84 0b       	sbc	r24, r20
    2256:	ba f0       	brmi	.+46     	; 0x2286 <__addsf3x+0x9c>
    2258:	91 50       	subi	r25, 0x01	; 1
    225a:	a1 f0       	breq	.+40     	; 0x2284 <__addsf3x+0x9a>
    225c:	ff 0f       	add	r31, r31
    225e:	bb 1f       	adc	r27, r27
    2260:	66 1f       	adc	r22, r22
    2262:	77 1f       	adc	r23, r23
    2264:	88 1f       	adc	r24, r24
    2266:	c2 f7       	brpl	.-16     	; 0x2258 <__addsf3x+0x6e>
    2268:	0e c0       	rjmp	.+28     	; 0x2286 <__addsf3x+0x9c>
    226a:	ba 0f       	add	r27, r26
    226c:	62 1f       	adc	r22, r18
    226e:	73 1f       	adc	r23, r19
    2270:	84 1f       	adc	r24, r20
    2272:	48 f4       	brcc	.+18     	; 0x2286 <__addsf3x+0x9c>
    2274:	87 95       	ror	r24
    2276:	77 95       	ror	r23
    2278:	67 95       	ror	r22
    227a:	b7 95       	ror	r27
    227c:	f7 95       	ror	r31
    227e:	9e 3f       	cpi	r25, 0xFE	; 254
    2280:	08 f0       	brcs	.+2      	; 0x2284 <__addsf3x+0x9a>
    2282:	b0 cf       	rjmp	.-160    	; 0x21e4 <__addsf3+0x28>
    2284:	93 95       	inc	r25
    2286:	88 0f       	add	r24, r24
    2288:	08 f0       	brcs	.+2      	; 0x228c <__addsf3x+0xa2>
    228a:	99 27       	eor	r25, r25
    228c:	ee 0f       	add	r30, r30
    228e:	97 95       	ror	r25
    2290:	87 95       	ror	r24
    2292:	08 95       	ret
    2294:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__fp_pscA>
    2298:	60 f0       	brcs	.+24     	; 0x22b2 <__addsf3x+0xc8>
    229a:	80 e8       	ldi	r24, 0x80	; 128
    229c:	91 e0       	ldi	r25, 0x01	; 1
    229e:	09 f4       	brne	.+2      	; 0x22a2 <__addsf3x+0xb8>
    22a0:	9e ef       	ldi	r25, 0xFE	; 254
    22a2:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <__fp_pscB>
    22a6:	28 f0       	brcs	.+10     	; 0x22b2 <__addsf3x+0xc8>
    22a8:	40 e8       	ldi	r20, 0x80	; 128
    22aa:	51 e0       	ldi	r21, 0x01	; 1
    22ac:	71 f4       	brne	.+28     	; 0x22ca <atan2+0x10>
    22ae:	5e ef       	ldi	r21, 0xFE	; 254
    22b0:	0c c0       	rjmp	.+24     	; 0x22ca <atan2+0x10>
    22b2:	0c 94 c9 12 	jmp	0x2592	; 0x2592 <__fp_nan>
    22b6:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__fp_zero>

000022ba <atan2>:
    22ba:	e9 2f       	mov	r30, r25
    22bc:	e0 78       	andi	r30, 0x80	; 128
    22be:	0e 94 12 13 	call	0x2624	; 0x2624 <__fp_split3>
    22c2:	40 f3       	brcs	.-48     	; 0x2294 <__addsf3x+0xaa>
    22c4:	09 2e       	mov	r0, r25
    22c6:	05 2a       	or	r0, r21
    22c8:	b1 f3       	breq	.-20     	; 0x22b6 <__addsf3x+0xcc>
    22ca:	26 17       	cp	r18, r22
    22cc:	37 07       	cpc	r19, r23
    22ce:	48 07       	cpc	r20, r24
    22d0:	59 07       	cpc	r21, r25
    22d2:	38 f0       	brcs	.+14     	; 0x22e2 <atan2+0x28>
    22d4:	0e 2e       	mov	r0, r30
    22d6:	07 f8       	bld	r0, 7
    22d8:	e0 25       	eor	r30, r0
    22da:	69 f0       	breq	.+26     	; 0x22f6 <atan2+0x3c>
    22dc:	e0 25       	eor	r30, r0
    22de:	e0 64       	ori	r30, 0x40	; 64
    22e0:	0a c0       	rjmp	.+20     	; 0x22f6 <atan2+0x3c>
    22e2:	ef 63       	ori	r30, 0x3F	; 63
    22e4:	07 f8       	bld	r0, 7
    22e6:	00 94       	com	r0
    22e8:	07 fa       	bst	r0, 7
    22ea:	db 01       	movw	r26, r22
    22ec:	b9 01       	movw	r22, r18
    22ee:	9d 01       	movw	r18, r26
    22f0:	dc 01       	movw	r26, r24
    22f2:	ca 01       	movw	r24, r20
    22f4:	ad 01       	movw	r20, r26
    22f6:	ef 93       	push	r30
    22f8:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <__divsf3_pse>
    22fc:	0e 94 01 13 	call	0x2602	; 0x2602 <__fp_round>
    2300:	0e 94 8d 11 	call	0x231a	; 0x231a <atan>
    2304:	5f 91       	pop	r21
    2306:	55 23       	and	r21, r21
    2308:	39 f0       	breq	.+14     	; 0x2318 <atan2+0x5e>
    230a:	2b ed       	ldi	r18, 0xDB	; 219
    230c:	3f e0       	ldi	r19, 0x0F	; 15
    230e:	49 e4       	ldi	r20, 0x49	; 73
    2310:	50 fd       	sbrc	r21, 0
    2312:	49 ec       	ldi	r20, 0xC9	; 201
    2314:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__addsf3>
    2318:	08 95       	ret

0000231a <atan>:
    231a:	df 93       	push	r29
    231c:	dd 27       	eor	r29, r29
    231e:	b9 2f       	mov	r27, r25
    2320:	bf 77       	andi	r27, 0x7F	; 127
    2322:	40 e8       	ldi	r20, 0x80	; 128
    2324:	5f e3       	ldi	r21, 0x3F	; 63
    2326:	16 16       	cp	r1, r22
    2328:	17 06       	cpc	r1, r23
    232a:	48 07       	cpc	r20, r24
    232c:	5b 07       	cpc	r21, r27
    232e:	18 f4       	brcc	.+6      	; 0x2336 <atan+0x1c>
    2330:	d9 2f       	mov	r29, r25
    2332:	0e 94 40 13 	call	0x2680	; 0x2680 <inverse>
    2336:	9f 93       	push	r25
    2338:	8f 93       	push	r24
    233a:	7f 93       	push	r23
    233c:	6f 93       	push	r22
    233e:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <square>
    2342:	e8 e6       	ldi	r30, 0x68	; 104
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	0e 94 cc 12 	call	0x2598	; 0x2598 <__fp_powser>
    234a:	0e 94 01 13 	call	0x2602	; 0x2602 <__fp_round>
    234e:	2f 91       	pop	r18
    2350:	3f 91       	pop	r19
    2352:	4f 91       	pop	r20
    2354:	5f 91       	pop	r21
    2356:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <__mulsf3x>
    235a:	dd 23       	and	r29, r29
    235c:	51 f0       	breq	.+20     	; 0x2372 <atan+0x58>
    235e:	90 58       	subi	r25, 0x80	; 128
    2360:	a2 ea       	ldi	r26, 0xA2	; 162
    2362:	2a ed       	ldi	r18, 0xDA	; 218
    2364:	3f e0       	ldi	r19, 0x0F	; 15
    2366:	49 ec       	ldi	r20, 0xC9	; 201
    2368:	5f e3       	ldi	r21, 0x3F	; 63
    236a:	d0 78       	andi	r29, 0x80	; 128
    236c:	5d 27       	eor	r21, r29
    236e:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__addsf3x>
    2372:	df 91       	pop	r29
    2374:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__fp_round>

00002378 <__cmpsf2>:
    2378:	0e 94 9f 12 	call	0x253e	; 0x253e <__fp_cmp>
    237c:	08 f4       	brcc	.+2      	; 0x2380 <__cmpsf2+0x8>
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	08 95       	ret

00002382 <__divsf3>:
    2382:	0e 94 d5 11 	call	0x23aa	; 0x23aa <__divsf3x>
    2386:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__fp_round>
    238a:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <__fp_pscB>
    238e:	58 f0       	brcs	.+22     	; 0x23a6 <__divsf3+0x24>
    2390:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__fp_pscA>
    2394:	40 f0       	brcs	.+16     	; 0x23a6 <__divsf3+0x24>
    2396:	29 f4       	brne	.+10     	; 0x23a2 <__divsf3+0x20>
    2398:	5f 3f       	cpi	r21, 0xFF	; 255
    239a:	29 f0       	breq	.+10     	; 0x23a6 <__divsf3+0x24>
    239c:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__fp_inf>
    23a0:	51 11       	cpse	r21, r1
    23a2:	0c 94 35 13 	jmp	0x266a	; 0x266a <__fp_szero>
    23a6:	0c 94 c9 12 	jmp	0x2592	; 0x2592 <__fp_nan>

000023aa <__divsf3x>:
    23aa:	0e 94 12 13 	call	0x2624	; 0x2624 <__fp_split3>
    23ae:	68 f3       	brcs	.-38     	; 0x238a <__divsf3+0x8>

000023b0 <__divsf3_pse>:
    23b0:	99 23       	and	r25, r25
    23b2:	b1 f3       	breq	.-20     	; 0x23a0 <__divsf3+0x1e>
    23b4:	55 23       	and	r21, r21
    23b6:	91 f3       	breq	.-28     	; 0x239c <__divsf3+0x1a>
    23b8:	95 1b       	sub	r25, r21
    23ba:	55 0b       	sbc	r21, r21
    23bc:	bb 27       	eor	r27, r27
    23be:	aa 27       	eor	r26, r26
    23c0:	62 17       	cp	r22, r18
    23c2:	73 07       	cpc	r23, r19
    23c4:	84 07       	cpc	r24, r20
    23c6:	38 f0       	brcs	.+14     	; 0x23d6 <__divsf3_pse+0x26>
    23c8:	9f 5f       	subi	r25, 0xFF	; 255
    23ca:	5f 4f       	sbci	r21, 0xFF	; 255
    23cc:	22 0f       	add	r18, r18
    23ce:	33 1f       	adc	r19, r19
    23d0:	44 1f       	adc	r20, r20
    23d2:	aa 1f       	adc	r26, r26
    23d4:	a9 f3       	breq	.-22     	; 0x23c0 <__divsf3_pse+0x10>
    23d6:	35 d0       	rcall	.+106    	; 0x2442 <__divsf3_pse+0x92>
    23d8:	0e 2e       	mov	r0, r30
    23da:	3a f0       	brmi	.+14     	; 0x23ea <__divsf3_pse+0x3a>
    23dc:	e0 e8       	ldi	r30, 0x80	; 128
    23de:	32 d0       	rcall	.+100    	; 0x2444 <__divsf3_pse+0x94>
    23e0:	91 50       	subi	r25, 0x01	; 1
    23e2:	50 40       	sbci	r21, 0x00	; 0
    23e4:	e6 95       	lsr	r30
    23e6:	00 1c       	adc	r0, r0
    23e8:	ca f7       	brpl	.-14     	; 0x23dc <__divsf3_pse+0x2c>
    23ea:	2b d0       	rcall	.+86     	; 0x2442 <__divsf3_pse+0x92>
    23ec:	fe 2f       	mov	r31, r30
    23ee:	29 d0       	rcall	.+82     	; 0x2442 <__divsf3_pse+0x92>
    23f0:	66 0f       	add	r22, r22
    23f2:	77 1f       	adc	r23, r23
    23f4:	88 1f       	adc	r24, r24
    23f6:	bb 1f       	adc	r27, r27
    23f8:	26 17       	cp	r18, r22
    23fa:	37 07       	cpc	r19, r23
    23fc:	48 07       	cpc	r20, r24
    23fe:	ab 07       	cpc	r26, r27
    2400:	b0 e8       	ldi	r27, 0x80	; 128
    2402:	09 f0       	breq	.+2      	; 0x2406 <__divsf3_pse+0x56>
    2404:	bb 0b       	sbc	r27, r27
    2406:	80 2d       	mov	r24, r0
    2408:	bf 01       	movw	r22, r30
    240a:	ff 27       	eor	r31, r31
    240c:	93 58       	subi	r25, 0x83	; 131
    240e:	5f 4f       	sbci	r21, 0xFF	; 255
    2410:	3a f0       	brmi	.+14     	; 0x2420 <__divsf3_pse+0x70>
    2412:	9e 3f       	cpi	r25, 0xFE	; 254
    2414:	51 05       	cpc	r21, r1
    2416:	78 f0       	brcs	.+30     	; 0x2436 <__divsf3_pse+0x86>
    2418:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__fp_inf>
    241c:	0c 94 35 13 	jmp	0x266a	; 0x266a <__fp_szero>
    2420:	5f 3f       	cpi	r21, 0xFF	; 255
    2422:	e4 f3       	brlt	.-8      	; 0x241c <__divsf3_pse+0x6c>
    2424:	98 3e       	cpi	r25, 0xE8	; 232
    2426:	d4 f3       	brlt	.-12     	; 0x241c <__divsf3_pse+0x6c>
    2428:	86 95       	lsr	r24
    242a:	77 95       	ror	r23
    242c:	67 95       	ror	r22
    242e:	b7 95       	ror	r27
    2430:	f7 95       	ror	r31
    2432:	9f 5f       	subi	r25, 0xFF	; 255
    2434:	c9 f7       	brne	.-14     	; 0x2428 <__divsf3_pse+0x78>
    2436:	88 0f       	add	r24, r24
    2438:	91 1d       	adc	r25, r1
    243a:	96 95       	lsr	r25
    243c:	87 95       	ror	r24
    243e:	97 f9       	bld	r25, 7
    2440:	08 95       	ret
    2442:	e1 e0       	ldi	r30, 0x01	; 1
    2444:	66 0f       	add	r22, r22
    2446:	77 1f       	adc	r23, r23
    2448:	88 1f       	adc	r24, r24
    244a:	bb 1f       	adc	r27, r27
    244c:	62 17       	cp	r22, r18
    244e:	73 07       	cpc	r23, r19
    2450:	84 07       	cpc	r24, r20
    2452:	ba 07       	cpc	r27, r26
    2454:	20 f0       	brcs	.+8      	; 0x245e <__divsf3_pse+0xae>
    2456:	62 1b       	sub	r22, r18
    2458:	73 0b       	sbc	r23, r19
    245a:	84 0b       	sbc	r24, r20
    245c:	ba 0b       	sbc	r27, r26
    245e:	ee 1f       	adc	r30, r30
    2460:	88 f7       	brcc	.-30     	; 0x2444 <__divsf3_pse+0x94>
    2462:	e0 95       	com	r30
    2464:	08 95       	ret

00002466 <__fixunssfsi>:
    2466:	0e 94 1a 13 	call	0x2634	; 0x2634 <__fp_splitA>
    246a:	88 f0       	brcs	.+34     	; 0x248e <__fixunssfsi+0x28>
    246c:	9f 57       	subi	r25, 0x7F	; 127
    246e:	98 f0       	brcs	.+38     	; 0x2496 <__fixunssfsi+0x30>
    2470:	b9 2f       	mov	r27, r25
    2472:	99 27       	eor	r25, r25
    2474:	b7 51       	subi	r27, 0x17	; 23
    2476:	b0 f0       	brcs	.+44     	; 0x24a4 <__fixunssfsi+0x3e>
    2478:	e1 f0       	breq	.+56     	; 0x24b2 <__fixunssfsi+0x4c>
    247a:	66 0f       	add	r22, r22
    247c:	77 1f       	adc	r23, r23
    247e:	88 1f       	adc	r24, r24
    2480:	99 1f       	adc	r25, r25
    2482:	1a f0       	brmi	.+6      	; 0x248a <__fixunssfsi+0x24>
    2484:	ba 95       	dec	r27
    2486:	c9 f7       	brne	.-14     	; 0x247a <__fixunssfsi+0x14>
    2488:	14 c0       	rjmp	.+40     	; 0x24b2 <__fixunssfsi+0x4c>
    248a:	b1 30       	cpi	r27, 0x01	; 1
    248c:	91 f0       	breq	.+36     	; 0x24b2 <__fixunssfsi+0x4c>
    248e:	0e 94 34 13 	call	0x2668	; 0x2668 <__fp_zero>
    2492:	b1 e0       	ldi	r27, 0x01	; 1
    2494:	08 95       	ret
    2496:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__fp_zero>
    249a:	67 2f       	mov	r22, r23
    249c:	78 2f       	mov	r23, r24
    249e:	88 27       	eor	r24, r24
    24a0:	b8 5f       	subi	r27, 0xF8	; 248
    24a2:	39 f0       	breq	.+14     	; 0x24b2 <__fixunssfsi+0x4c>
    24a4:	b9 3f       	cpi	r27, 0xF9	; 249
    24a6:	cc f3       	brlt	.-14     	; 0x249a <__fixunssfsi+0x34>
    24a8:	86 95       	lsr	r24
    24aa:	77 95       	ror	r23
    24ac:	67 95       	ror	r22
    24ae:	b3 95       	inc	r27
    24b0:	d9 f7       	brne	.-10     	; 0x24a8 <__fixunssfsi+0x42>
    24b2:	3e f4       	brtc	.+14     	; 0x24c2 <__fixunssfsi+0x5c>
    24b4:	90 95       	com	r25
    24b6:	80 95       	com	r24
    24b8:	70 95       	com	r23
    24ba:	61 95       	neg	r22
    24bc:	7f 4f       	sbci	r23, 0xFF	; 255
    24be:	8f 4f       	sbci	r24, 0xFF	; 255
    24c0:	9f 4f       	sbci	r25, 0xFF	; 255
    24c2:	08 95       	ret

000024c4 <__floatunsisf>:
    24c4:	e8 94       	clt
    24c6:	09 c0       	rjmp	.+18     	; 0x24da <__floatsisf+0x12>

000024c8 <__floatsisf>:
    24c8:	97 fb       	bst	r25, 7
    24ca:	3e f4       	brtc	.+14     	; 0x24da <__floatsisf+0x12>
    24cc:	90 95       	com	r25
    24ce:	80 95       	com	r24
    24d0:	70 95       	com	r23
    24d2:	61 95       	neg	r22
    24d4:	7f 4f       	sbci	r23, 0xFF	; 255
    24d6:	8f 4f       	sbci	r24, 0xFF	; 255
    24d8:	9f 4f       	sbci	r25, 0xFF	; 255
    24da:	99 23       	and	r25, r25
    24dc:	a9 f0       	breq	.+42     	; 0x2508 <__floatsisf+0x40>
    24de:	f9 2f       	mov	r31, r25
    24e0:	96 e9       	ldi	r25, 0x96	; 150
    24e2:	bb 27       	eor	r27, r27
    24e4:	93 95       	inc	r25
    24e6:	f6 95       	lsr	r31
    24e8:	87 95       	ror	r24
    24ea:	77 95       	ror	r23
    24ec:	67 95       	ror	r22
    24ee:	b7 95       	ror	r27
    24f0:	f1 11       	cpse	r31, r1
    24f2:	f8 cf       	rjmp	.-16     	; 0x24e4 <__floatsisf+0x1c>
    24f4:	fa f4       	brpl	.+62     	; 0x2534 <__floatsisf+0x6c>
    24f6:	bb 0f       	add	r27, r27
    24f8:	11 f4       	brne	.+4      	; 0x24fe <__floatsisf+0x36>
    24fa:	60 ff       	sbrs	r22, 0
    24fc:	1b c0       	rjmp	.+54     	; 0x2534 <__floatsisf+0x6c>
    24fe:	6f 5f       	subi	r22, 0xFF	; 255
    2500:	7f 4f       	sbci	r23, 0xFF	; 255
    2502:	8f 4f       	sbci	r24, 0xFF	; 255
    2504:	9f 4f       	sbci	r25, 0xFF	; 255
    2506:	16 c0       	rjmp	.+44     	; 0x2534 <__floatsisf+0x6c>
    2508:	88 23       	and	r24, r24
    250a:	11 f0       	breq	.+4      	; 0x2510 <__floatsisf+0x48>
    250c:	96 e9       	ldi	r25, 0x96	; 150
    250e:	11 c0       	rjmp	.+34     	; 0x2532 <__floatsisf+0x6a>
    2510:	77 23       	and	r23, r23
    2512:	21 f0       	breq	.+8      	; 0x251c <__floatsisf+0x54>
    2514:	9e e8       	ldi	r25, 0x8E	; 142
    2516:	87 2f       	mov	r24, r23
    2518:	76 2f       	mov	r23, r22
    251a:	05 c0       	rjmp	.+10     	; 0x2526 <__floatsisf+0x5e>
    251c:	66 23       	and	r22, r22
    251e:	71 f0       	breq	.+28     	; 0x253c <__floatsisf+0x74>
    2520:	96 e8       	ldi	r25, 0x86	; 134
    2522:	86 2f       	mov	r24, r22
    2524:	70 e0       	ldi	r23, 0x00	; 0
    2526:	60 e0       	ldi	r22, 0x00	; 0
    2528:	2a f0       	brmi	.+10     	; 0x2534 <__floatsisf+0x6c>
    252a:	9a 95       	dec	r25
    252c:	66 0f       	add	r22, r22
    252e:	77 1f       	adc	r23, r23
    2530:	88 1f       	adc	r24, r24
    2532:	da f7       	brpl	.-10     	; 0x252a <__floatsisf+0x62>
    2534:	88 0f       	add	r24, r24
    2536:	96 95       	lsr	r25
    2538:	87 95       	ror	r24
    253a:	97 f9       	bld	r25, 7
    253c:	08 95       	ret

0000253e <__fp_cmp>:
    253e:	99 0f       	add	r25, r25
    2540:	00 08       	sbc	r0, r0
    2542:	55 0f       	add	r21, r21
    2544:	aa 0b       	sbc	r26, r26
    2546:	e0 e8       	ldi	r30, 0x80	; 128
    2548:	fe ef       	ldi	r31, 0xFE	; 254
    254a:	16 16       	cp	r1, r22
    254c:	17 06       	cpc	r1, r23
    254e:	e8 07       	cpc	r30, r24
    2550:	f9 07       	cpc	r31, r25
    2552:	c0 f0       	brcs	.+48     	; 0x2584 <__fp_cmp+0x46>
    2554:	12 16       	cp	r1, r18
    2556:	13 06       	cpc	r1, r19
    2558:	e4 07       	cpc	r30, r20
    255a:	f5 07       	cpc	r31, r21
    255c:	98 f0       	brcs	.+38     	; 0x2584 <__fp_cmp+0x46>
    255e:	62 1b       	sub	r22, r18
    2560:	73 0b       	sbc	r23, r19
    2562:	84 0b       	sbc	r24, r20
    2564:	95 0b       	sbc	r25, r21
    2566:	39 f4       	brne	.+14     	; 0x2576 <__fp_cmp+0x38>
    2568:	0a 26       	eor	r0, r26
    256a:	61 f0       	breq	.+24     	; 0x2584 <__fp_cmp+0x46>
    256c:	23 2b       	or	r18, r19
    256e:	24 2b       	or	r18, r20
    2570:	25 2b       	or	r18, r21
    2572:	21 f4       	brne	.+8      	; 0x257c <__fp_cmp+0x3e>
    2574:	08 95       	ret
    2576:	0a 26       	eor	r0, r26
    2578:	09 f4       	brne	.+2      	; 0x257c <__fp_cmp+0x3e>
    257a:	a1 40       	sbci	r26, 0x01	; 1
    257c:	a6 95       	lsr	r26
    257e:	8f ef       	ldi	r24, 0xFF	; 255
    2580:	81 1d       	adc	r24, r1
    2582:	81 1d       	adc	r24, r1
    2584:	08 95       	ret

00002586 <__fp_inf>:
    2586:	97 f9       	bld	r25, 7
    2588:	9f 67       	ori	r25, 0x7F	; 127
    258a:	80 e8       	ldi	r24, 0x80	; 128
    258c:	70 e0       	ldi	r23, 0x00	; 0
    258e:	60 e0       	ldi	r22, 0x00	; 0
    2590:	08 95       	ret

00002592 <__fp_nan>:
    2592:	9f ef       	ldi	r25, 0xFF	; 255
    2594:	80 ec       	ldi	r24, 0xC0	; 192
    2596:	08 95       	ret

00002598 <__fp_powser>:
    2598:	df 93       	push	r29
    259a:	cf 93       	push	r28
    259c:	1f 93       	push	r17
    259e:	0f 93       	push	r16
    25a0:	ff 92       	push	r15
    25a2:	ef 92       	push	r14
    25a4:	df 92       	push	r13
    25a6:	7b 01       	movw	r14, r22
    25a8:	8c 01       	movw	r16, r24
    25aa:	68 94       	set
    25ac:	06 c0       	rjmp	.+12     	; 0x25ba <__fp_powser+0x22>
    25ae:	da 2e       	mov	r13, r26
    25b0:	ef 01       	movw	r28, r30
    25b2:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <__mulsf3x>
    25b6:	fe 01       	movw	r30, r28
    25b8:	e8 94       	clt
    25ba:	a5 91       	lpm	r26, Z+
    25bc:	25 91       	lpm	r18, Z+
    25be:	35 91       	lpm	r19, Z+
    25c0:	45 91       	lpm	r20, Z+
    25c2:	55 91       	lpm	r21, Z+
    25c4:	a6 f3       	brts	.-24     	; 0x25ae <__fp_powser+0x16>
    25c6:	ef 01       	movw	r28, r30
    25c8:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__addsf3x>
    25cc:	fe 01       	movw	r30, r28
    25ce:	97 01       	movw	r18, r14
    25d0:	a8 01       	movw	r20, r16
    25d2:	da 94       	dec	r13
    25d4:	69 f7       	brne	.-38     	; 0x25b0 <__fp_powser+0x18>
    25d6:	df 90       	pop	r13
    25d8:	ef 90       	pop	r14
    25da:	ff 90       	pop	r15
    25dc:	0f 91       	pop	r16
    25de:	1f 91       	pop	r17
    25e0:	cf 91       	pop	r28
    25e2:	df 91       	pop	r29
    25e4:	08 95       	ret

000025e6 <__fp_pscA>:
    25e6:	00 24       	eor	r0, r0
    25e8:	0a 94       	dec	r0
    25ea:	16 16       	cp	r1, r22
    25ec:	17 06       	cpc	r1, r23
    25ee:	18 06       	cpc	r1, r24
    25f0:	09 06       	cpc	r0, r25
    25f2:	08 95       	ret

000025f4 <__fp_pscB>:
    25f4:	00 24       	eor	r0, r0
    25f6:	0a 94       	dec	r0
    25f8:	12 16       	cp	r1, r18
    25fa:	13 06       	cpc	r1, r19
    25fc:	14 06       	cpc	r1, r20
    25fe:	05 06       	cpc	r0, r21
    2600:	08 95       	ret

00002602 <__fp_round>:
    2602:	09 2e       	mov	r0, r25
    2604:	03 94       	inc	r0
    2606:	00 0c       	add	r0, r0
    2608:	11 f4       	brne	.+4      	; 0x260e <__fp_round+0xc>
    260a:	88 23       	and	r24, r24
    260c:	52 f0       	brmi	.+20     	; 0x2622 <__fp_round+0x20>
    260e:	bb 0f       	add	r27, r27
    2610:	40 f4       	brcc	.+16     	; 0x2622 <__fp_round+0x20>
    2612:	bf 2b       	or	r27, r31
    2614:	11 f4       	brne	.+4      	; 0x261a <__fp_round+0x18>
    2616:	60 ff       	sbrs	r22, 0
    2618:	04 c0       	rjmp	.+8      	; 0x2622 <__fp_round+0x20>
    261a:	6f 5f       	subi	r22, 0xFF	; 255
    261c:	7f 4f       	sbci	r23, 0xFF	; 255
    261e:	8f 4f       	sbci	r24, 0xFF	; 255
    2620:	9f 4f       	sbci	r25, 0xFF	; 255
    2622:	08 95       	ret

00002624 <__fp_split3>:
    2624:	57 fd       	sbrc	r21, 7
    2626:	90 58       	subi	r25, 0x80	; 128
    2628:	44 0f       	add	r20, r20
    262a:	55 1f       	adc	r21, r21
    262c:	59 f0       	breq	.+22     	; 0x2644 <__fp_splitA+0x10>
    262e:	5f 3f       	cpi	r21, 0xFF	; 255
    2630:	71 f0       	breq	.+28     	; 0x264e <__fp_splitA+0x1a>
    2632:	47 95       	ror	r20

00002634 <__fp_splitA>:
    2634:	88 0f       	add	r24, r24
    2636:	97 fb       	bst	r25, 7
    2638:	99 1f       	adc	r25, r25
    263a:	61 f0       	breq	.+24     	; 0x2654 <__fp_splitA+0x20>
    263c:	9f 3f       	cpi	r25, 0xFF	; 255
    263e:	79 f0       	breq	.+30     	; 0x265e <__fp_splitA+0x2a>
    2640:	87 95       	ror	r24
    2642:	08 95       	ret
    2644:	12 16       	cp	r1, r18
    2646:	13 06       	cpc	r1, r19
    2648:	14 06       	cpc	r1, r20
    264a:	55 1f       	adc	r21, r21
    264c:	f2 cf       	rjmp	.-28     	; 0x2632 <__fp_split3+0xe>
    264e:	46 95       	lsr	r20
    2650:	f1 df       	rcall	.-30     	; 0x2634 <__fp_splitA>
    2652:	08 c0       	rjmp	.+16     	; 0x2664 <__fp_splitA+0x30>
    2654:	16 16       	cp	r1, r22
    2656:	17 06       	cpc	r1, r23
    2658:	18 06       	cpc	r1, r24
    265a:	99 1f       	adc	r25, r25
    265c:	f1 cf       	rjmp	.-30     	; 0x2640 <__fp_splitA+0xc>
    265e:	86 95       	lsr	r24
    2660:	71 05       	cpc	r23, r1
    2662:	61 05       	cpc	r22, r1
    2664:	08 94       	sec
    2666:	08 95       	ret

00002668 <__fp_zero>:
    2668:	e8 94       	clt

0000266a <__fp_szero>:
    266a:	bb 27       	eor	r27, r27
    266c:	66 27       	eor	r22, r22
    266e:	77 27       	eor	r23, r23
    2670:	cb 01       	movw	r24, r22
    2672:	97 f9       	bld	r25, 7
    2674:	08 95       	ret

00002676 <__gesf2>:
    2676:	0e 94 9f 12 	call	0x253e	; 0x253e <__fp_cmp>
    267a:	08 f4       	brcc	.+2      	; 0x267e <__gesf2+0x8>
    267c:	8f ef       	ldi	r24, 0xFF	; 255
    267e:	08 95       	ret

00002680 <inverse>:
    2680:	9b 01       	movw	r18, r22
    2682:	ac 01       	movw	r20, r24
    2684:	60 e0       	ldi	r22, 0x00	; 0
    2686:	70 e0       	ldi	r23, 0x00	; 0
    2688:	80 e8       	ldi	r24, 0x80	; 128
    268a:	9f e3       	ldi	r25, 0x3F	; 63
    268c:	0c 94 c1 11 	jmp	0x2382	; 0x2382 <__divsf3>

00002690 <__mulsf3>:
    2690:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <__mulsf3x>
    2694:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__fp_round>
    2698:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__fp_pscA>
    269c:	38 f0       	brcs	.+14     	; 0x26ac <__mulsf3+0x1c>
    269e:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <__fp_pscB>
    26a2:	20 f0       	brcs	.+8      	; 0x26ac <__mulsf3+0x1c>
    26a4:	95 23       	and	r25, r21
    26a6:	11 f0       	breq	.+4      	; 0x26ac <__mulsf3+0x1c>
    26a8:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__fp_inf>
    26ac:	0c 94 c9 12 	jmp	0x2592	; 0x2592 <__fp_nan>
    26b0:	11 24       	eor	r1, r1
    26b2:	0c 94 35 13 	jmp	0x266a	; 0x266a <__fp_szero>

000026b6 <__mulsf3x>:
    26b6:	0e 94 12 13 	call	0x2624	; 0x2624 <__fp_split3>
    26ba:	70 f3       	brcs	.-36     	; 0x2698 <__mulsf3+0x8>

000026bc <__mulsf3_pse>:
    26bc:	95 9f       	mul	r25, r21
    26be:	c1 f3       	breq	.-16     	; 0x26b0 <__mulsf3+0x20>
    26c0:	95 0f       	add	r25, r21
    26c2:	50 e0       	ldi	r21, 0x00	; 0
    26c4:	55 1f       	adc	r21, r21
    26c6:	62 9f       	mul	r22, r18
    26c8:	f0 01       	movw	r30, r0
    26ca:	72 9f       	mul	r23, r18
    26cc:	bb 27       	eor	r27, r27
    26ce:	f0 0d       	add	r31, r0
    26d0:	b1 1d       	adc	r27, r1
    26d2:	63 9f       	mul	r22, r19
    26d4:	aa 27       	eor	r26, r26
    26d6:	f0 0d       	add	r31, r0
    26d8:	b1 1d       	adc	r27, r1
    26da:	aa 1f       	adc	r26, r26
    26dc:	64 9f       	mul	r22, r20
    26de:	66 27       	eor	r22, r22
    26e0:	b0 0d       	add	r27, r0
    26e2:	a1 1d       	adc	r26, r1
    26e4:	66 1f       	adc	r22, r22
    26e6:	82 9f       	mul	r24, r18
    26e8:	22 27       	eor	r18, r18
    26ea:	b0 0d       	add	r27, r0
    26ec:	a1 1d       	adc	r26, r1
    26ee:	62 1f       	adc	r22, r18
    26f0:	73 9f       	mul	r23, r19
    26f2:	b0 0d       	add	r27, r0
    26f4:	a1 1d       	adc	r26, r1
    26f6:	62 1f       	adc	r22, r18
    26f8:	83 9f       	mul	r24, r19
    26fa:	a0 0d       	add	r26, r0
    26fc:	61 1d       	adc	r22, r1
    26fe:	22 1f       	adc	r18, r18
    2700:	74 9f       	mul	r23, r20
    2702:	33 27       	eor	r19, r19
    2704:	a0 0d       	add	r26, r0
    2706:	61 1d       	adc	r22, r1
    2708:	23 1f       	adc	r18, r19
    270a:	84 9f       	mul	r24, r20
    270c:	60 0d       	add	r22, r0
    270e:	21 1d       	adc	r18, r1
    2710:	82 2f       	mov	r24, r18
    2712:	76 2f       	mov	r23, r22
    2714:	6a 2f       	mov	r22, r26
    2716:	11 24       	eor	r1, r1
    2718:	9f 57       	subi	r25, 0x7F	; 127
    271a:	50 40       	sbci	r21, 0x00	; 0
    271c:	9a f0       	brmi	.+38     	; 0x2744 <__mulsf3_pse+0x88>
    271e:	f1 f0       	breq	.+60     	; 0x275c <__mulsf3_pse+0xa0>
    2720:	88 23       	and	r24, r24
    2722:	4a f0       	brmi	.+18     	; 0x2736 <__mulsf3_pse+0x7a>
    2724:	ee 0f       	add	r30, r30
    2726:	ff 1f       	adc	r31, r31
    2728:	bb 1f       	adc	r27, r27
    272a:	66 1f       	adc	r22, r22
    272c:	77 1f       	adc	r23, r23
    272e:	88 1f       	adc	r24, r24
    2730:	91 50       	subi	r25, 0x01	; 1
    2732:	50 40       	sbci	r21, 0x00	; 0
    2734:	a9 f7       	brne	.-22     	; 0x2720 <__mulsf3_pse+0x64>
    2736:	9e 3f       	cpi	r25, 0xFE	; 254
    2738:	51 05       	cpc	r21, r1
    273a:	80 f0       	brcs	.+32     	; 0x275c <__mulsf3_pse+0xa0>
    273c:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__fp_inf>
    2740:	0c 94 35 13 	jmp	0x266a	; 0x266a <__fp_szero>
    2744:	5f 3f       	cpi	r21, 0xFF	; 255
    2746:	e4 f3       	brlt	.-8      	; 0x2740 <__mulsf3_pse+0x84>
    2748:	98 3e       	cpi	r25, 0xE8	; 232
    274a:	d4 f3       	brlt	.-12     	; 0x2740 <__mulsf3_pse+0x84>
    274c:	86 95       	lsr	r24
    274e:	77 95       	ror	r23
    2750:	67 95       	ror	r22
    2752:	b7 95       	ror	r27
    2754:	f7 95       	ror	r31
    2756:	e7 95       	ror	r30
    2758:	9f 5f       	subi	r25, 0xFF	; 255
    275a:	c1 f7       	brne	.-16     	; 0x274c <__mulsf3_pse+0x90>
    275c:	fe 2b       	or	r31, r30
    275e:	88 0f       	add	r24, r24
    2760:	91 1d       	adc	r25, r1
    2762:	96 95       	lsr	r25
    2764:	87 95       	ror	r24
    2766:	97 f9       	bld	r25, 7
    2768:	08 95       	ret
    276a:	19 f4       	brne	.+6      	; 0x2772 <__mulsf3_pse+0xb6>
    276c:	16 f4       	brtc	.+4      	; 0x2772 <__mulsf3_pse+0xb6>
    276e:	0c 94 c9 12 	jmp	0x2592	; 0x2592 <__fp_nan>
    2772:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__fp_mpack>

00002776 <sqrt>:
    2776:	0e 94 1a 13 	call	0x2634	; 0x2634 <__fp_splitA>
    277a:	b8 f3       	brcs	.-18     	; 0x276a <__mulsf3_pse+0xae>
    277c:	99 23       	and	r25, r25
    277e:	c9 f3       	breq	.-14     	; 0x2772 <__mulsf3_pse+0xb6>
    2780:	b6 f3       	brts	.-20     	; 0x276e <__mulsf3_pse+0xb2>
    2782:	9f 57       	subi	r25, 0x7F	; 127
    2784:	55 0b       	sbc	r21, r21
    2786:	87 ff       	sbrs	r24, 7
    2788:	0e 94 0d 14 	call	0x281a	; 0x281a <__fp_norm2>
    278c:	00 24       	eor	r0, r0
    278e:	a0 e6       	ldi	r26, 0x60	; 96
    2790:	40 ea       	ldi	r20, 0xA0	; 160
    2792:	90 01       	movw	r18, r0
    2794:	80 58       	subi	r24, 0x80	; 128
    2796:	56 95       	lsr	r21
    2798:	97 95       	ror	r25
    279a:	28 f4       	brcc	.+10     	; 0x27a6 <sqrt+0x30>
    279c:	80 5c       	subi	r24, 0xC0	; 192
    279e:	66 0f       	add	r22, r22
    27a0:	77 1f       	adc	r23, r23
    27a2:	88 1f       	adc	r24, r24
    27a4:	20 f0       	brcs	.+8      	; 0x27ae <sqrt+0x38>
    27a6:	26 17       	cp	r18, r22
    27a8:	37 07       	cpc	r19, r23
    27aa:	48 07       	cpc	r20, r24
    27ac:	30 f4       	brcc	.+12     	; 0x27ba <sqrt+0x44>
    27ae:	62 1b       	sub	r22, r18
    27b0:	73 0b       	sbc	r23, r19
    27b2:	84 0b       	sbc	r24, r20
    27b4:	20 29       	or	r18, r0
    27b6:	31 29       	or	r19, r1
    27b8:	4a 2b       	or	r20, r26
    27ba:	a6 95       	lsr	r26
    27bc:	17 94       	ror	r1
    27be:	07 94       	ror	r0
    27c0:	20 25       	eor	r18, r0
    27c2:	31 25       	eor	r19, r1
    27c4:	4a 27       	eor	r20, r26
    27c6:	58 f7       	brcc	.-42     	; 0x279e <sqrt+0x28>
    27c8:	66 0f       	add	r22, r22
    27ca:	77 1f       	adc	r23, r23
    27cc:	88 1f       	adc	r24, r24
    27ce:	20 f0       	brcs	.+8      	; 0x27d8 <sqrt+0x62>
    27d0:	26 17       	cp	r18, r22
    27d2:	37 07       	cpc	r19, r23
    27d4:	48 07       	cpc	r20, r24
    27d6:	30 f4       	brcc	.+12     	; 0x27e4 <sqrt+0x6e>
    27d8:	62 0b       	sbc	r22, r18
    27da:	73 0b       	sbc	r23, r19
    27dc:	84 0b       	sbc	r24, r20
    27de:	20 0d       	add	r18, r0
    27e0:	31 1d       	adc	r19, r1
    27e2:	41 1d       	adc	r20, r1
    27e4:	a0 95       	com	r26
    27e6:	81 f7       	brne	.-32     	; 0x27c8 <sqrt+0x52>
    27e8:	b9 01       	movw	r22, r18
    27ea:	84 2f       	mov	r24, r20
    27ec:	91 58       	subi	r25, 0x81	; 129
    27ee:	88 0f       	add	r24, r24
    27f0:	96 95       	lsr	r25
    27f2:	87 95       	ror	r24
    27f4:	08 95       	ret

000027f6 <square>:
    27f6:	9b 01       	movw	r18, r22
    27f8:	ac 01       	movw	r20, r24
    27fa:	0c 94 48 13 	jmp	0x2690	; 0x2690 <__mulsf3>

000027fe <__fp_mpack>:
    27fe:	9f 3f       	cpi	r25, 0xFF	; 255
    2800:	31 f0       	breq	.+12     	; 0x280e <__fp_mpack_finite+0xc>

00002802 <__fp_mpack_finite>:
    2802:	91 50       	subi	r25, 0x01	; 1
    2804:	20 f4       	brcc	.+8      	; 0x280e <__fp_mpack_finite+0xc>
    2806:	87 95       	ror	r24
    2808:	77 95       	ror	r23
    280a:	67 95       	ror	r22
    280c:	b7 95       	ror	r27
    280e:	88 0f       	add	r24, r24
    2810:	91 1d       	adc	r25, r1
    2812:	96 95       	lsr	r25
    2814:	87 95       	ror	r24
    2816:	97 f9       	bld	r25, 7
    2818:	08 95       	ret

0000281a <__fp_norm2>:
    281a:	91 50       	subi	r25, 0x01	; 1
    281c:	50 40       	sbci	r21, 0x00	; 0
    281e:	66 0f       	add	r22, r22
    2820:	77 1f       	adc	r23, r23
    2822:	88 1f       	adc	r24, r24
    2824:	d2 f7       	brpl	.-12     	; 0x281a <__fp_norm2>
    2826:	08 95       	ret

00002828 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2828:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    282a:	91 8d       	ldd	r25, Z+25	; 0x19
    282c:	22 8d       	ldd	r18, Z+26	; 0x1a
    282e:	89 2f       	mov	r24, r25
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	80 5c       	subi	r24, 0xC0	; 192
    2834:	9f 4f       	sbci	r25, 0xFF	; 255
    2836:	82 1b       	sub	r24, r18
    2838:	91 09       	sbc	r25, r1
}
    283a:	8f 73       	andi	r24, 0x3F	; 63
    283c:	99 27       	eor	r25, r25
    283e:	08 95       	ret

00002840 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2840:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2842:	91 8d       	ldd	r25, Z+25	; 0x19
    2844:	82 8d       	ldd	r24, Z+26	; 0x1a
    2846:	98 17       	cp	r25, r24
    2848:	31 f0       	breq	.+12     	; 0x2856 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    284a:	82 8d       	ldd	r24, Z+26	; 0x1a
    284c:	e8 0f       	add	r30, r24
    284e:	f1 1d       	adc	r31, r1
    2850:	85 8d       	ldd	r24, Z+29	; 0x1d
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2856:	8f ef       	ldi	r24, 0xFF	; 255
    2858:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    285a:	08 95       	ret

0000285c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    285c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    285e:	91 8d       	ldd	r25, Z+25	; 0x19
    2860:	82 8d       	ldd	r24, Z+26	; 0x1a
    2862:	98 17       	cp	r25, r24
    2864:	61 f0       	breq	.+24     	; 0x287e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2866:	82 8d       	ldd	r24, Z+26	; 0x1a
    2868:	df 01       	movw	r26, r30
    286a:	a8 0f       	add	r26, r24
    286c:	b1 1d       	adc	r27, r1
    286e:	5d 96       	adiw	r26, 0x1d	; 29
    2870:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2872:	92 8d       	ldd	r25, Z+26	; 0x1a
    2874:	9f 5f       	subi	r25, 0xFF	; 255
    2876:	9f 73       	andi	r25, 0x3F	; 63
    2878:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    287e:	8f ef       	ldi	r24, 0xFF	; 255
    2880:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2882:	08 95       	ret

00002884 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    2884:	fc 01       	movw	r30, r24
    2886:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    2888:	44 8d       	ldd	r20, Z+28	; 0x1c
    288a:	25 2f       	mov	r18, r21
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	84 2f       	mov	r24, r20
    2890:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    2892:	82 1b       	sub	r24, r18
    2894:	93 0b       	sbc	r25, r19
    2896:	54 17       	cp	r21, r20
    2898:	10 f0       	brcs	.+4      	; 0x289e <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    289a:	cf 96       	adiw	r24, 0x3f	; 63
    289c:	08 95       	ret
  return tail - head - 1;
    289e:	01 97       	sbiw	r24, 0x01	; 1
}
    28a0:	08 95       	ret

000028a2 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    28a2:	80 eb       	ldi	r24, 0xB0	; 176
    28a4:	95 e1       	ldi	r25, 0x15	; 21
    28a6:	89 2b       	or	r24, r25
    28a8:	49 f0       	breq	.+18     	; 0x28bc <_Z14serialEventRunv+0x1a>
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	89 2b       	or	r24, r25
    28b0:	29 f0       	breq	.+10     	; 0x28bc <_Z14serialEventRunv+0x1a>
    28b2:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <_Z17Serial0_availablev>
    28b6:	81 11       	cpse	r24, r1
    28b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    28bc:	08 95       	ret

000028be <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    28be:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    28c0:	84 8d       	ldd	r24, Z+28	; 0x1c
    28c2:	df 01       	movw	r26, r30
    28c4:	a8 0f       	add	r26, r24
    28c6:	b1 1d       	adc	r27, r1
    28c8:	a3 5a       	subi	r26, 0xA3	; 163
    28ca:	bf 4f       	sbci	r27, 0xFF	; 255
    28cc:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    28ce:	84 8d       	ldd	r24, Z+28	; 0x1c
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	01 96       	adiw	r24, 0x01	; 1
    28d4:	8f 73       	andi	r24, 0x3F	; 63
    28d6:	99 27       	eor	r25, r25
    28d8:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    28da:	a6 89       	ldd	r26, Z+22	; 0x16
    28dc:	b7 89       	ldd	r27, Z+23	; 0x17
    28de:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    28e0:	a0 89       	ldd	r26, Z+16	; 0x10
    28e2:	b1 89       	ldd	r27, Z+17	; 0x11
    28e4:	8c 91       	ld	r24, X
    28e6:	83 70       	andi	r24, 0x03	; 3
    28e8:	80 64       	ori	r24, 0x40	; 64
    28ea:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    28ec:	93 8d       	ldd	r25, Z+27	; 0x1b
    28ee:	84 8d       	ldd	r24, Z+28	; 0x1c
    28f0:	98 13       	cpse	r25, r24
    28f2:	06 c0       	rjmp	.+12     	; 0x2900 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    28f4:	02 88       	ldd	r0, Z+18	; 0x12
    28f6:	f3 89       	ldd	r31, Z+19	; 0x13
    28f8:	e0 2d       	mov	r30, r0
    28fa:	80 81       	ld	r24, Z
    28fc:	8f 7d       	andi	r24, 0xDF	; 223
    28fe:	80 83       	st	Z, r24
    2900:	08 95       	ret

00002902 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    2902:	ef 92       	push	r14
    2904:	ff 92       	push	r15
    2906:	0f 93       	push	r16
    2908:	1f 93       	push	r17
    290a:	cf 93       	push	r28
    290c:	df 93       	push	r29
    290e:	ec 01       	movw	r28, r24
  _written = true;
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2914:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2916:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2918:	98 13       	cpse	r25, r24
    291a:	05 c0       	rjmp	.+10     	; 0x2926 <_ZN14HardwareSerial5writeEh+0x24>
    291c:	e8 89       	ldd	r30, Y+16	; 0x10
    291e:	f9 89       	ldd	r31, Y+17	; 0x11
    2920:	80 81       	ld	r24, Z
    2922:	85 fd       	sbrc	r24, 5
    2924:	26 c0       	rjmp	.+76     	; 0x2972 <_ZN14HardwareSerial5writeEh+0x70>
    2926:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2928:	0b 8d       	ldd	r16, Y+27	; 0x1b
    292a:	10 e0       	ldi	r17, 0x00	; 0
    292c:	0f 5f       	subi	r16, 0xFF	; 255
    292e:	1f 4f       	sbci	r17, 0xFF	; 255
    2930:	0f 73       	andi	r16, 0x3F	; 63
    2932:	11 27       	eor	r17, r17
    2934:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2936:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2938:	e8 12       	cpse	r14, r24
    293a:	0c c0       	rjmp	.+24     	; 0x2954 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    293c:	0f b6       	in	r0, 0x3f	; 63
    293e:	07 fc       	sbrc	r0, 7
    2940:	fa cf       	rjmp	.-12     	; 0x2936 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2942:	e8 89       	ldd	r30, Y+16	; 0x10
    2944:	f9 89       	ldd	r31, Y+17	; 0x11
    2946:	80 81       	ld	r24, Z
    2948:	85 ff       	sbrs	r24, 5
    294a:	f5 cf       	rjmp	.-22     	; 0x2936 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    294c:	ce 01       	movw	r24, r28
    294e:	0e 94 5f 14 	call	0x28be	; 0x28be <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2952:	f1 cf       	rjmp	.-30     	; 0x2936 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2954:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2956:	fe 01       	movw	r30, r28
    2958:	e8 0f       	add	r30, r24
    295a:	f1 1d       	adc	r31, r1
    295c:	e3 5a       	subi	r30, 0xA3	; 163
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2962:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2964:	f8 94       	cli
    _tx_buffer_head = i;
    2966:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    2968:	ea 89       	ldd	r30, Y+18	; 0x12
    296a:	fb 89       	ldd	r31, Y+19	; 0x13
    296c:	80 81       	ld	r24, Z
    296e:	80 62       	ori	r24, 0x20	; 32
    2970:	0a c0       	rjmp	.+20     	; 0x2986 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2972:	9f b7       	in	r25, 0x3f	; 63
    2974:	f8 94       	cli
      *_udr = c;
    2976:	ee 89       	ldd	r30, Y+22	; 0x16
    2978:	ff 89       	ldd	r31, Y+23	; 0x17
    297a:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    297c:	e8 89       	ldd	r30, Y+16	; 0x10
    297e:	f9 89       	ldd	r31, Y+17	; 0x11
    2980:	80 81       	ld	r24, Z
    2982:	83 70       	andi	r24, 0x03	; 3
    2984:	80 64       	ori	r24, 0x40	; 64
    2986:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2988:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	df 91       	pop	r29
    2990:	cf 91       	pop	r28
    2992:	1f 91       	pop	r17
    2994:	0f 91       	pop	r16
    2996:	ff 90       	pop	r15
    2998:	ef 90       	pop	r14
    299a:	08 95       	ret

0000299c <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    299c:	cf 93       	push	r28
    299e:	df 93       	push	r29
    29a0:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    29a2:	88 8d       	ldd	r24, Y+24	; 0x18
    29a4:	88 23       	and	r24, r24
    29a6:	c9 f0       	breq	.+50     	; 0x29da <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    29a8:	ea 89       	ldd	r30, Y+18	; 0x12
    29aa:	fb 89       	ldd	r31, Y+19	; 0x13
    29ac:	80 81       	ld	r24, Z
    29ae:	85 fd       	sbrc	r24, 5
    29b0:	05 c0       	rjmp	.+10     	; 0x29bc <_ZN14HardwareSerial5flushEv+0x20>
    29b2:	a8 89       	ldd	r26, Y+16	; 0x10
    29b4:	b9 89       	ldd	r27, Y+17	; 0x11
    29b6:	8c 91       	ld	r24, X
    29b8:	86 fd       	sbrc	r24, 6
    29ba:	0f c0       	rjmp	.+30     	; 0x29da <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    29bc:	0f b6       	in	r0, 0x3f	; 63
    29be:	07 fc       	sbrc	r0, 7
    29c0:	f5 cf       	rjmp	.-22     	; 0x29ac <_ZN14HardwareSerial5flushEv+0x10>
    29c2:	80 81       	ld	r24, Z
    29c4:	85 ff       	sbrs	r24, 5
    29c6:	f2 cf       	rjmp	.-28     	; 0x29ac <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    29c8:	a8 89       	ldd	r26, Y+16	; 0x10
    29ca:	b9 89       	ldd	r27, Y+17	; 0x11
    29cc:	8c 91       	ld	r24, X
    29ce:	85 ff       	sbrs	r24, 5
    29d0:	ed cf       	rjmp	.-38     	; 0x29ac <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    29d2:	ce 01       	movw	r24, r28
    29d4:	0e 94 5f 14 	call	0x28be	; 0x28be <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    29d8:	e7 cf       	rjmp	.-50     	; 0x29a8 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    29da:	df 91       	pop	r29
    29dc:	cf 91       	pop	r28
    29de:	08 95       	ret

000029e0 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    29e0:	cf 92       	push	r12
    29e2:	df 92       	push	r13
    29e4:	ef 92       	push	r14
    29e6:	ff 92       	push	r15
    29e8:	1f 93       	push	r17
    29ea:	cf 93       	push	r28
    29ec:	df 93       	push	r29
    29ee:	ec 01       	movw	r28, r24
    29f0:	6a 01       	movw	r12, r20
    29f2:	7b 01       	movw	r14, r22
    29f4:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    29f6:	e8 89       	ldd	r30, Y+16	; 0x10
    29f8:	f9 89       	ldd	r31, Y+17	; 0x11
    29fa:	82 e0       	ldi	r24, 0x02	; 2
    29fc:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    29fe:	41 15       	cp	r20, r1
    2a00:	51 4e       	sbci	r21, 0xE1	; 225
    2a02:	61 05       	cpc	r22, r1
    2a04:	71 05       	cpc	r23, r1
    2a06:	b1 f0       	breq	.+44     	; 0x2a34 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2a08:	60 e0       	ldi	r22, 0x00	; 0
    2a0a:	79 e0       	ldi	r23, 0x09	; 9
    2a0c:	8d e3       	ldi	r24, 0x3D	; 61
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	a7 01       	movw	r20, r14
    2a12:	96 01       	movw	r18, r12
    2a14:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <__udivmodsi4>
    2a18:	da 01       	movw	r26, r20
    2a1a:	c9 01       	movw	r24, r18
    2a1c:	01 97       	sbiw	r24, 0x01	; 1
    2a1e:	a1 09       	sbc	r26, r1
    2a20:	b1 09       	sbc	r27, r1
    2a22:	b6 95       	lsr	r27
    2a24:	a7 95       	ror	r26
    2a26:	97 95       	ror	r25
    2a28:	87 95       	ror	r24
    2a2a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2a2c:	21 15       	cp	r18, r1
    2a2e:	80 e1       	ldi	r24, 0x10	; 16
    2a30:	38 07       	cpc	r19, r24
    2a32:	a8 f0       	brcs	.+42     	; 0x2a5e <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    2a34:	e8 89       	ldd	r30, Y+16	; 0x10
    2a36:	f9 89       	ldd	r31, Y+17	; 0x11
    2a38:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2a3a:	60 e8       	ldi	r22, 0x80	; 128
    2a3c:	74 e8       	ldi	r23, 0x84	; 132
    2a3e:	8e e1       	ldi	r24, 0x1E	; 30
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	a7 01       	movw	r20, r14
    2a44:	96 01       	movw	r18, r12
    2a46:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <__udivmodsi4>
    2a4a:	da 01       	movw	r26, r20
    2a4c:	c9 01       	movw	r24, r18
    2a4e:	01 97       	sbiw	r24, 0x01	; 1
    2a50:	a1 09       	sbc	r26, r1
    2a52:	b1 09       	sbc	r27, r1
    2a54:	b6 95       	lsr	r27
    2a56:	a7 95       	ror	r26
    2a58:	97 95       	ror	r25
    2a5a:	87 95       	ror	r24
    2a5c:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2a5e:	ec 85       	ldd	r30, Y+12	; 0x0c
    2a60:	fd 85       	ldd	r31, Y+13	; 0x0d
    2a62:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    2a64:	ee 85       	ldd	r30, Y+14	; 0x0e
    2a66:	ff 85       	ldd	r31, Y+15	; 0x0f
    2a68:	20 83       	st	Z, r18

  _written = false;
    2a6a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2a6c:	ec 89       	ldd	r30, Y+20	; 0x14
    2a6e:	fd 89       	ldd	r31, Y+21	; 0x15
    2a70:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    2a72:	ea 89       	ldd	r30, Y+18	; 0x12
    2a74:	fb 89       	ldd	r31, Y+19	; 0x13
    2a76:	80 81       	ld	r24, Z
    2a78:	80 61       	ori	r24, 0x10	; 16
    2a7a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    2a7c:	ea 89       	ldd	r30, Y+18	; 0x12
    2a7e:	fb 89       	ldd	r31, Y+19	; 0x13
    2a80:	80 81       	ld	r24, Z
    2a82:	88 60       	ori	r24, 0x08	; 8
    2a84:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    2a86:	ea 89       	ldd	r30, Y+18	; 0x12
    2a88:	fb 89       	ldd	r31, Y+19	; 0x13
    2a8a:	80 81       	ld	r24, Z
    2a8c:	80 68       	ori	r24, 0x80	; 128
    2a8e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2a90:	ea 89       	ldd	r30, Y+18	; 0x12
    2a92:	fb 89       	ldd	r31, Y+19	; 0x13
    2a94:	80 81       	ld	r24, Z
    2a96:	8f 7d       	andi	r24, 0xDF	; 223
    2a98:	80 83       	st	Z, r24
}
    2a9a:	df 91       	pop	r29
    2a9c:	cf 91       	pop	r28
    2a9e:	1f 91       	pop	r17
    2aa0:	ff 90       	pop	r15
    2aa2:	ef 90       	pop	r14
    2aa4:	df 90       	pop	r13
    2aa6:	cf 90       	pop	r12
    2aa8:	08 95       	ret

00002aaa <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	08 95       	ret

00002ab0 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2ab0:	1f 92       	push	r1
    2ab2:	0f 92       	push	r0
    2ab4:	0f b6       	in	r0, 0x3f	; 63
    2ab6:	0f 92       	push	r0
    2ab8:	11 24       	eor	r1, r1
    2aba:	2f 93       	push	r18
    2abc:	8f 93       	push	r24
    2abe:	9f 93       	push	r25
    2ac0:	ef 93       	push	r30
    2ac2:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2ac4:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <Serial+0x10>
    2ac8:	f0 91 fe 01 	lds	r31, 0x01FE	; 0x8001fe <Serial+0x11>
    2acc:	80 81       	ld	r24, Z
    2ace:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <Serial+0x16>
    2ad2:	f0 91 04 02 	lds	r31, 0x0204	; 0x800204 <Serial+0x17>
    2ad6:	82 fd       	sbrc	r24, 2
    2ad8:	12 c0       	rjmp	.+36     	; 0x2afe <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2ada:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2adc:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Serial+0x19>
    2ae0:	8f 5f       	subi	r24, 0xFF	; 255
    2ae2:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2ae4:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <Serial+0x1a>
    2ae8:	82 17       	cp	r24, r18
    2aea:	51 f0       	breq	.+20     	; 0x2b00 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    2aec:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <Serial+0x19>
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	e3 51       	subi	r30, 0x13	; 19
    2af4:	fe 4f       	sbci	r31, 0xFE	; 254
    2af6:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2af8:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <Serial+0x19>
    2afc:	01 c0       	rjmp	.+2      	; 0x2b00 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2afe:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    2b00:	ff 91       	pop	r31
    2b02:	ef 91       	pop	r30
    2b04:	9f 91       	pop	r25
    2b06:	8f 91       	pop	r24
    2b08:	2f 91       	pop	r18
    2b0a:	0f 90       	pop	r0
    2b0c:	0f be       	out	0x3f, r0	; 63
    2b0e:	0f 90       	pop	r0
    2b10:	1f 90       	pop	r1
    2b12:	18 95       	reti

00002b14 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2b14:	1f 92       	push	r1
    2b16:	0f 92       	push	r0
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	0f 92       	push	r0
    2b1c:	11 24       	eor	r1, r1
    2b1e:	2f 93       	push	r18
    2b20:	3f 93       	push	r19
    2b22:	4f 93       	push	r20
    2b24:	5f 93       	push	r21
    2b26:	6f 93       	push	r22
    2b28:	7f 93       	push	r23
    2b2a:	8f 93       	push	r24
    2b2c:	9f 93       	push	r25
    2b2e:	af 93       	push	r26
    2b30:	bf 93       	push	r27
    2b32:	ef 93       	push	r30
    2b34:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    2b36:	8d ee       	ldi	r24, 0xED	; 237
    2b38:	91 e0       	ldi	r25, 0x01	; 1
    2b3a:	0e 94 5f 14 	call	0x28be	; 0x28be <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2b3e:	ff 91       	pop	r31
    2b40:	ef 91       	pop	r30
    2b42:	bf 91       	pop	r27
    2b44:	af 91       	pop	r26
    2b46:	9f 91       	pop	r25
    2b48:	8f 91       	pop	r24
    2b4a:	7f 91       	pop	r23
    2b4c:	6f 91       	pop	r22
    2b4e:	5f 91       	pop	r21
    2b50:	4f 91       	pop	r20
    2b52:	3f 91       	pop	r19
    2b54:	2f 91       	pop	r18
    2b56:	0f 90       	pop	r0
    2b58:	0f be       	out	0x3f, r0	; 63
    2b5a:	0f 90       	pop	r0
    2b5c:	1f 90       	pop	r1
    2b5e:	18 95       	reti

00002b60 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2b60:	8d ee       	ldi	r24, 0xED	; 237
    2b62:	91 e0       	ldi	r25, 0x01	; 1
    2b64:	0e 94 14 14 	call	0x2828	; 0x2828 <_ZN14HardwareSerial9availableEv>
    2b68:	21 e0       	ldi	r18, 0x01	; 1
    2b6a:	89 2b       	or	r24, r25
    2b6c:	09 f4       	brne	.+2      	; 0x2b70 <_Z17Serial0_availablev+0x10>
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
}
    2b70:	82 2f       	mov	r24, r18
    2b72:	08 95       	ret

00002b74 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2b74:	ed ee       	ldi	r30, 0xED	; 237
    2b76:	f1 e0       	ldi	r31, 0x01	; 1
    2b78:	13 82       	std	Z+3, r1	; 0x03
    2b7a:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    2b7c:	88 ee       	ldi	r24, 0xE8	; 232
    2b7e:	93 e0       	ldi	r25, 0x03	; 3
    2b80:	a0 e0       	ldi	r26, 0x00	; 0
    2b82:	b0 e0       	ldi	r27, 0x00	; 0
    2b84:	84 83       	std	Z+4, r24	; 0x04
    2b86:	95 83       	std	Z+5, r25	; 0x05
    2b88:	a6 83       	std	Z+6, r26	; 0x06
    2b8a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2b8c:	82 e1       	ldi	r24, 0x12	; 18
    2b8e:	91 e0       	ldi	r25, 0x01	; 1
    2b90:	91 83       	std	Z+1, r25	; 0x01
    2b92:	80 83       	st	Z, r24
    2b94:	85 ec       	ldi	r24, 0xC5	; 197
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	95 87       	std	Z+13, r25	; 0x0d
    2b9a:	84 87       	std	Z+12, r24	; 0x0c
    2b9c:	84 ec       	ldi	r24, 0xC4	; 196
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	97 87       	std	Z+15, r25	; 0x0f
    2ba2:	86 87       	std	Z+14, r24	; 0x0e
    2ba4:	80 ec       	ldi	r24, 0xC0	; 192
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	91 8b       	std	Z+17, r25	; 0x11
    2baa:	80 8b       	std	Z+16, r24	; 0x10
    2bac:	81 ec       	ldi	r24, 0xC1	; 193
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	93 8b       	std	Z+19, r25	; 0x13
    2bb2:	82 8b       	std	Z+18, r24	; 0x12
    2bb4:	82 ec       	ldi	r24, 0xC2	; 194
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	95 8b       	std	Z+21, r25	; 0x15
    2bba:	84 8b       	std	Z+20, r24	; 0x14
    2bbc:	86 ec       	ldi	r24, 0xC6	; 198
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	97 8b       	std	Z+23, r25	; 0x17
    2bc2:	86 8b       	std	Z+22, r24	; 0x16
    2bc4:	11 8e       	std	Z+25, r1	; 0x19
    2bc6:	12 8e       	std	Z+26, r1	; 0x1a
    2bc8:	13 8e       	std	Z+27, r1	; 0x1b
    2bca:	14 8e       	std	Z+28, r1	; 0x1c
    2bcc:	08 95       	ret

00002bce <initVariant>:
    2bce:	08 95       	ret

00002bd0 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2bd0:	0e 94 52 19 	call	0x32a4	; 0x32a4 <init>

	initVariant();
    2bd4:	0e 94 e7 15 	call	0x2bce	; 0x2bce <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2bd8:	0e 94 60 10 	call	0x20c0	; 0x20c0 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2bdc:	c1 e5       	ldi	r28, 0x51	; 81
    2bde:	d4 e1       	ldi	r29, 0x14	; 20
#endif
	
	setup();
    
	for (;;) {
		loop();
    2be0:	0e 94 57 0f 	call	0x1eae	; 0x1eae <loop>
		if (serialEventRun) serialEventRun();
    2be4:	20 97       	sbiw	r28, 0x00	; 0
    2be6:	e1 f3       	breq	.-8      	; 0x2be0 <main+0x10>
    2be8:	0e 94 51 14 	call	0x28a2	; 0x28a2 <_Z14serialEventRunv>
    2bec:	f9 cf       	rjmp	.-14     	; 0x2be0 <main+0x10>

00002bee <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2bee:	cf 92       	push	r12
    2bf0:	df 92       	push	r13
    2bf2:	ef 92       	push	r14
    2bf4:	ff 92       	push	r15
    2bf6:	0f 93       	push	r16
    2bf8:	1f 93       	push	r17
    2bfa:	cf 93       	push	r28
    2bfc:	df 93       	push	r29
    2bfe:	6c 01       	movw	r12, r24
    2c00:	7a 01       	movw	r14, r20
    2c02:	8b 01       	movw	r16, r22
    2c04:	c0 e0       	ldi	r28, 0x00	; 0
    2c06:	d0 e0       	ldi	r29, 0x00	; 0
    2c08:	ce 15       	cp	r28, r14
    2c0a:	df 05       	cpc	r29, r15
    2c0c:	81 f0       	breq	.+32     	; 0x2c2e <_ZN5Print5writeEPKhj+0x40>
    2c0e:	d8 01       	movw	r26, r16
    2c10:	6d 91       	ld	r22, X+
    2c12:	8d 01       	movw	r16, r26
    2c14:	d6 01       	movw	r26, r12
    2c16:	ed 91       	ld	r30, X+
    2c18:	fc 91       	ld	r31, X
    2c1a:	01 90       	ld	r0, Z+
    2c1c:	f0 81       	ld	r31, Z
    2c1e:	e0 2d       	mov	r30, r0
    2c20:	c6 01       	movw	r24, r12
    2c22:	09 95       	icall
    2c24:	89 2b       	or	r24, r25
    2c26:	11 f0       	breq	.+4      	; 0x2c2c <_ZN5Print5writeEPKhj+0x3e>
    2c28:	21 96       	adiw	r28, 0x01	; 1
    2c2a:	ee cf       	rjmp	.-36     	; 0x2c08 <_ZN5Print5writeEPKhj+0x1a>
    2c2c:	7e 01       	movw	r14, r28
    2c2e:	c7 01       	movw	r24, r14
    2c30:	df 91       	pop	r29
    2c32:	cf 91       	pop	r28
    2c34:	1f 91       	pop	r17
    2c36:	0f 91       	pop	r16
    2c38:	ff 90       	pop	r15
    2c3a:	ef 90       	pop	r14
    2c3c:	df 90       	pop	r13
    2c3e:	cf 90       	pop	r12
    2c40:	08 95       	ret

00002c42 <_ZN5Print5writeEPKc>:
    2c42:	61 15       	cp	r22, r1
    2c44:	71 05       	cpc	r23, r1
    2c46:	79 f0       	breq	.+30     	; 0x2c66 <_ZN5Print5writeEPKc+0x24>
    2c48:	fb 01       	movw	r30, r22
    2c4a:	01 90       	ld	r0, Z+
    2c4c:	00 20       	and	r0, r0
    2c4e:	e9 f7       	brne	.-6      	; 0x2c4a <_ZN5Print5writeEPKc+0x8>
    2c50:	31 97       	sbiw	r30, 0x01	; 1
    2c52:	af 01       	movw	r20, r30
    2c54:	46 1b       	sub	r20, r22
    2c56:	57 0b       	sbc	r21, r23
    2c58:	dc 01       	movw	r26, r24
    2c5a:	ed 91       	ld	r30, X+
    2c5c:	fc 91       	ld	r31, X
    2c5e:	02 80       	ldd	r0, Z+2	; 0x02
    2c60:	f3 81       	ldd	r31, Z+3	; 0x03
    2c62:	e0 2d       	mov	r30, r0
    2c64:	09 94       	ijmp
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	08 95       	ret

00002c6c <_ZN5Print5printEPK19__FlashStringHelper>:
    2c6c:	ef 92       	push	r14
    2c6e:	ff 92       	push	r15
    2c70:	0f 93       	push	r16
    2c72:	1f 93       	push	r17
    2c74:	cf 93       	push	r28
    2c76:	df 93       	push	r29
    2c78:	8c 01       	movw	r16, r24
    2c7a:	7b 01       	movw	r14, r22
    2c7c:	c0 e0       	ldi	r28, 0x00	; 0
    2c7e:	d0 e0       	ldi	r29, 0x00	; 0
    2c80:	f7 01       	movw	r30, r14
    2c82:	ec 0f       	add	r30, r28
    2c84:	fd 1f       	adc	r31, r29
    2c86:	64 91       	lpm	r22, Z
    2c88:	66 23       	and	r22, r22
    2c8a:	61 f0       	breq	.+24     	; 0x2ca4 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    2c8c:	d8 01       	movw	r26, r16
    2c8e:	ed 91       	ld	r30, X+
    2c90:	fc 91       	ld	r31, X
    2c92:	01 90       	ld	r0, Z+
    2c94:	f0 81       	ld	r31, Z
    2c96:	e0 2d       	mov	r30, r0
    2c98:	c8 01       	movw	r24, r16
    2c9a:	09 95       	icall
    2c9c:	89 2b       	or	r24, r25
    2c9e:	11 f0       	breq	.+4      	; 0x2ca4 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    2ca0:	21 96       	adiw	r28, 0x01	; 1
    2ca2:	ee cf       	rjmp	.-36     	; 0x2c80 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    2ca4:	ce 01       	movw	r24, r28
    2ca6:	df 91       	pop	r29
    2ca8:	cf 91       	pop	r28
    2caa:	1f 91       	pop	r17
    2cac:	0f 91       	pop	r16
    2cae:	ff 90       	pop	r15
    2cb0:	ef 90       	pop	r14
    2cb2:	08 95       	ret

00002cb4 <_ZN5Print5printEPKc>:
    2cb4:	0c 94 21 16 	jmp	0x2c42	; 0x2c42 <_ZN5Print5writeEPKc>

00002cb8 <_ZN5Print5printEc>:
    2cb8:	dc 01       	movw	r26, r24
    2cba:	ed 91       	ld	r30, X+
    2cbc:	fc 91       	ld	r31, X
    2cbe:	01 90       	ld	r0, Z+
    2cc0:	f0 81       	ld	r31, Z
    2cc2:	e0 2d       	mov	r30, r0
    2cc4:	09 94       	ijmp

00002cc6 <_ZN5Print7printlnEv>:
    2cc6:	60 e2       	ldi	r22, 0x20	; 32
    2cc8:	71 e0       	ldi	r23, 0x01	; 1
    2cca:	0c 94 21 16 	jmp	0x2c42	; 0x2c42 <_ZN5Print5writeEPKc>

00002cce <_ZN5Print7printlnEPK19__FlashStringHelper>:
    2cce:	0f 93       	push	r16
    2cd0:	1f 93       	push	r17
    2cd2:	cf 93       	push	r28
    2cd4:	df 93       	push	r29
    2cd6:	ec 01       	movw	r28, r24
    2cd8:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <_ZN5Print5printEPK19__FlashStringHelper>
    2cdc:	8c 01       	movw	r16, r24
    2cde:	ce 01       	movw	r24, r28
    2ce0:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <_ZN5Print7printlnEv>
    2ce4:	80 0f       	add	r24, r16
    2ce6:	91 1f       	adc	r25, r17
    2ce8:	df 91       	pop	r29
    2cea:	cf 91       	pop	r28
    2cec:	1f 91       	pop	r17
    2cee:	0f 91       	pop	r16
    2cf0:	08 95       	ret

00002cf2 <_ZN5Print11printNumberEmh>:
    2cf2:	8f 92       	push	r8
    2cf4:	9f 92       	push	r9
    2cf6:	af 92       	push	r10
    2cf8:	bf 92       	push	r11
    2cfa:	ef 92       	push	r14
    2cfc:	ff 92       	push	r15
    2cfe:	0f 93       	push	r16
    2d00:	1f 93       	push	r17
    2d02:	cf 93       	push	r28
    2d04:	df 93       	push	r29
    2d06:	cd b7       	in	r28, 0x3d	; 61
    2d08:	de b7       	in	r29, 0x3e	; 62
    2d0a:	a1 97       	sbiw	r28, 0x21	; 33
    2d0c:	0f b6       	in	r0, 0x3f	; 63
    2d0e:	f8 94       	cli
    2d10:	de bf       	out	0x3e, r29	; 62
    2d12:	0f be       	out	0x3f, r0	; 63
    2d14:	cd bf       	out	0x3d, r28	; 61
    2d16:	7c 01       	movw	r14, r24
    2d18:	fa 01       	movw	r30, r20
    2d1a:	cb 01       	movw	r24, r22
    2d1c:	19 a2       	std	Y+33, r1	; 0x21
    2d1e:	22 30       	cpi	r18, 0x02	; 2
    2d20:	08 f4       	brcc	.+2      	; 0x2d24 <_ZN5Print11printNumberEmh+0x32>
    2d22:	2a e0       	ldi	r18, 0x0A	; 10
    2d24:	8e 01       	movw	r16, r28
    2d26:	0f 5d       	subi	r16, 0xDF	; 223
    2d28:	1f 4f       	sbci	r17, 0xFF	; 255
    2d2a:	82 2e       	mov	r8, r18
    2d2c:	91 2c       	mov	r9, r1
    2d2e:	a1 2c       	mov	r10, r1
    2d30:	b1 2c       	mov	r11, r1
    2d32:	bf 01       	movw	r22, r30
    2d34:	a5 01       	movw	r20, r10
    2d36:	94 01       	movw	r18, r8
    2d38:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <__udivmodsi4>
    2d3c:	f9 01       	movw	r30, r18
    2d3e:	ca 01       	movw	r24, r20
    2d40:	01 50       	subi	r16, 0x01	; 1
    2d42:	11 09       	sbc	r17, r1
    2d44:	6a 30       	cpi	r22, 0x0A	; 10
    2d46:	10 f4       	brcc	.+4      	; 0x2d4c <_ZN5Print11printNumberEmh+0x5a>
    2d48:	60 5d       	subi	r22, 0xD0	; 208
    2d4a:	01 c0       	rjmp	.+2      	; 0x2d4e <_ZN5Print11printNumberEmh+0x5c>
    2d4c:	69 5c       	subi	r22, 0xC9	; 201
    2d4e:	d8 01       	movw	r26, r16
    2d50:	6c 93       	st	X, r22
    2d52:	23 2b       	or	r18, r19
    2d54:	24 2b       	or	r18, r20
    2d56:	25 2b       	or	r18, r21
    2d58:	61 f7       	brne	.-40     	; 0x2d32 <_ZN5Print11printNumberEmh+0x40>
    2d5a:	b8 01       	movw	r22, r16
    2d5c:	c7 01       	movw	r24, r14
    2d5e:	0e 94 21 16 	call	0x2c42	; 0x2c42 <_ZN5Print5writeEPKc>
    2d62:	a1 96       	adiw	r28, 0x21	; 33
    2d64:	0f b6       	in	r0, 0x3f	; 63
    2d66:	f8 94       	cli
    2d68:	de bf       	out	0x3e, r29	; 62
    2d6a:	0f be       	out	0x3f, r0	; 63
    2d6c:	cd bf       	out	0x3d, r28	; 61
    2d6e:	df 91       	pop	r29
    2d70:	cf 91       	pop	r28
    2d72:	1f 91       	pop	r17
    2d74:	0f 91       	pop	r16
    2d76:	ff 90       	pop	r15
    2d78:	ef 90       	pop	r14
    2d7a:	bf 90       	pop	r11
    2d7c:	af 90       	pop	r10
    2d7e:	9f 90       	pop	r9
    2d80:	8f 90       	pop	r8
    2d82:	08 95       	ret

00002d84 <_ZN5Print5printEmi>:
    2d84:	21 15       	cp	r18, r1
    2d86:	31 05       	cpc	r19, r1
    2d88:	41 f4       	brne	.+16     	; 0x2d9a <_ZN5Print5printEmi+0x16>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	ed 91       	ld	r30, X+
    2d8e:	fc 91       	ld	r31, X
    2d90:	01 90       	ld	r0, Z+
    2d92:	f0 81       	ld	r31, Z
    2d94:	e0 2d       	mov	r30, r0
    2d96:	64 2f       	mov	r22, r20
    2d98:	09 94       	ijmp
    2d9a:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <_ZN5Print11printNumberEmh>

00002d9e <_ZN5Print5printEhi>:
    2d9e:	9a 01       	movw	r18, r20
    2da0:	46 2f       	mov	r20, r22
    2da2:	50 e0       	ldi	r21, 0x00	; 0
    2da4:	60 e0       	ldi	r22, 0x00	; 0
    2da6:	70 e0       	ldi	r23, 0x00	; 0
    2da8:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <_ZN5Print5printEmi>

00002dac <_ZN5Print7printlnEhi>:
    2dac:	0f 93       	push	r16
    2dae:	1f 93       	push	r17
    2db0:	cf 93       	push	r28
    2db2:	df 93       	push	r29
    2db4:	ec 01       	movw	r28, r24
    2db6:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <_ZN5Print5printEhi>
    2dba:	8c 01       	movw	r16, r24
    2dbc:	ce 01       	movw	r24, r28
    2dbe:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <_ZN5Print7printlnEv>
    2dc2:	80 0f       	add	r24, r16
    2dc4:	91 1f       	adc	r25, r17
    2dc6:	df 91       	pop	r29
    2dc8:	cf 91       	pop	r28
    2dca:	1f 91       	pop	r17
    2dcc:	0f 91       	pop	r16
    2dce:	08 95       	ret

00002dd0 <_ZN5Print5printEji>:
    2dd0:	9a 01       	movw	r18, r20
    2dd2:	ab 01       	movw	r20, r22
    2dd4:	60 e0       	ldi	r22, 0x00	; 0
    2dd6:	70 e0       	ldi	r23, 0x00	; 0
    2dd8:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <_ZN5Print5printEmi>

00002ddc <_ZN5Print5printEli>:
    2ddc:	cf 92       	push	r12
    2dde:	df 92       	push	r13
    2de0:	ef 92       	push	r14
    2de2:	ff 92       	push	r15
    2de4:	0f 93       	push	r16
    2de6:	1f 93       	push	r17
    2de8:	cf 93       	push	r28
    2dea:	df 93       	push	r29
    2dec:	21 15       	cp	r18, r1
    2dee:	31 05       	cpc	r19, r1
    2df0:	81 f4       	brne	.+32     	; 0x2e12 <_ZN5Print5printEli+0x36>
    2df2:	dc 01       	movw	r26, r24
    2df4:	ed 91       	ld	r30, X+
    2df6:	fc 91       	ld	r31, X
    2df8:	01 90       	ld	r0, Z+
    2dfa:	f0 81       	ld	r31, Z
    2dfc:	e0 2d       	mov	r30, r0
    2dfe:	64 2f       	mov	r22, r20
    2e00:	df 91       	pop	r29
    2e02:	cf 91       	pop	r28
    2e04:	1f 91       	pop	r17
    2e06:	0f 91       	pop	r16
    2e08:	ff 90       	pop	r15
    2e0a:	ef 90       	pop	r14
    2e0c:	df 90       	pop	r13
    2e0e:	cf 90       	pop	r12
    2e10:	09 94       	ijmp
    2e12:	2a 30       	cpi	r18, 0x0A	; 10
    2e14:	31 05       	cpc	r19, r1
    2e16:	01 f5       	brne	.+64     	; 0x2e58 <_ZN5Print5printEli+0x7c>
    2e18:	77 ff       	sbrs	r23, 7
    2e1a:	1d c0       	rjmp	.+58     	; 0x2e56 <_ZN5Print5printEli+0x7a>
    2e1c:	6a 01       	movw	r12, r20
    2e1e:	7b 01       	movw	r14, r22
    2e20:	ec 01       	movw	r28, r24
    2e22:	6d e2       	ldi	r22, 0x2D	; 45
    2e24:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <_ZN5Print5printEc>
    2e28:	8c 01       	movw	r16, r24
    2e2a:	44 27       	eor	r20, r20
    2e2c:	55 27       	eor	r21, r21
    2e2e:	ba 01       	movw	r22, r20
    2e30:	4c 19       	sub	r20, r12
    2e32:	5d 09       	sbc	r21, r13
    2e34:	6e 09       	sbc	r22, r14
    2e36:	7f 09       	sbc	r23, r15
    2e38:	2a e0       	ldi	r18, 0x0A	; 10
    2e3a:	ce 01       	movw	r24, r28
    2e3c:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <_ZN5Print11printNumberEmh>
    2e40:	80 0f       	add	r24, r16
    2e42:	91 1f       	adc	r25, r17
    2e44:	df 91       	pop	r29
    2e46:	cf 91       	pop	r28
    2e48:	1f 91       	pop	r17
    2e4a:	0f 91       	pop	r16
    2e4c:	ff 90       	pop	r15
    2e4e:	ef 90       	pop	r14
    2e50:	df 90       	pop	r13
    2e52:	cf 90       	pop	r12
    2e54:	08 95       	ret
    2e56:	2a e0       	ldi	r18, 0x0A	; 10
    2e58:	df 91       	pop	r29
    2e5a:	cf 91       	pop	r28
    2e5c:	1f 91       	pop	r17
    2e5e:	0f 91       	pop	r16
    2e60:	ff 90       	pop	r15
    2e62:	ef 90       	pop	r14
    2e64:	df 90       	pop	r13
    2e66:	cf 90       	pop	r12
    2e68:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <_ZN5Print11printNumberEmh>

00002e6c <_ZN5Print5printEii>:
    2e6c:	9a 01       	movw	r18, r20
    2e6e:	ab 01       	movw	r20, r22
    2e70:	77 0f       	add	r23, r23
    2e72:	66 0b       	sbc	r22, r22
    2e74:	77 0b       	sbc	r23, r23
    2e76:	0c 94 ee 16 	jmp	0x2ddc	; 0x2ddc <_ZN5Print5printEli>

00002e7a <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    2e7a:	7f 92       	push	r7
    2e7c:	8f 92       	push	r8
    2e7e:	9f 92       	push	r9
    2e80:	af 92       	push	r10
    2e82:	bf 92       	push	r11
    2e84:	cf 92       	push	r12
    2e86:	df 92       	push	r13
    2e88:	ef 92       	push	r14
    2e8a:	ff 92       	push	r15
    2e8c:	0f 93       	push	r16
    2e8e:	1f 93       	push	r17
    2e90:	cf 93       	push	r28
    2e92:	df 93       	push	r29
    2e94:	8c 01       	movw	r16, r24
    2e96:	6a 01       	movw	r12, r20
    2e98:	7b 01       	movw	r14, r22
    2e9a:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    2e9c:	9a 01       	movw	r18, r20
    2e9e:	ab 01       	movw	r20, r22
    2ea0:	c7 01       	movw	r24, r14
    2ea2:	b6 01       	movw	r22, r12
    2ea4:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <__unordsf2>
    2ea8:	88 23       	and	r24, r24
    2eaa:	19 f0       	breq	.+6      	; 0x2eb2 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2eac:	63 e2       	ldi	r22, 0x23	; 35
    2eae:	71 e0       	ldi	r23, 0x01	; 1
    2eb0:	27 c0       	rjmp	.+78     	; 0x2f00 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    2eb2:	46 01       	movw	r8, r12
    2eb4:	57 01       	movw	r10, r14
    2eb6:	e8 94       	clt
    2eb8:	b7 f8       	bld	r11, 7
    2eba:	2f ef       	ldi	r18, 0xFF	; 255
    2ebc:	3f ef       	ldi	r19, 0xFF	; 255
    2ebe:	4f e7       	ldi	r20, 0x7F	; 127
    2ec0:	5f e7       	ldi	r21, 0x7F	; 127
    2ec2:	c5 01       	movw	r24, r10
    2ec4:	b4 01       	movw	r22, r8
    2ec6:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <__unordsf2>
    2eca:	81 11       	cpse	r24, r1
    2ecc:	0d c0       	rjmp	.+26     	; 0x2ee8 <_ZN5Print10printFloatEdh+0x6e>
    2ece:	2f ef       	ldi	r18, 0xFF	; 255
    2ed0:	3f ef       	ldi	r19, 0xFF	; 255
    2ed2:	4f e7       	ldi	r20, 0x7F	; 127
    2ed4:	5f e7       	ldi	r21, 0x7F	; 127
    2ed6:	c5 01       	movw	r24, r10
    2ed8:	b4 01       	movw	r22, r8
    2eda:	0e 94 bc 11 	call	0x2378	; 0x2378 <__cmpsf2>
    2ede:	18 16       	cp	r1, r24
    2ee0:	1c f4       	brge	.+6      	; 0x2ee8 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2ee2:	67 e2       	ldi	r22, 0x27	; 39
    2ee4:	71 e0       	ldi	r23, 0x01	; 1
    2ee6:	0c c0       	rjmp	.+24     	; 0x2f00 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    2ee8:	2f ef       	ldi	r18, 0xFF	; 255
    2eea:	3f ef       	ldi	r19, 0xFF	; 255
    2eec:	4f e7       	ldi	r20, 0x7F	; 127
    2eee:	5f e4       	ldi	r21, 0x4F	; 79
    2ef0:	c7 01       	movw	r24, r14
    2ef2:	b6 01       	movw	r22, r12
    2ef4:	0e 94 3b 13 	call	0x2676	; 0x2676 <__gesf2>
    2ef8:	18 16       	cp	r1, r24
    2efa:	94 f4       	brge	.+36     	; 0x2f20 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2efc:	6b e2       	ldi	r22, 0x2B	; 43
    2efe:	71 e0       	ldi	r23, 0x01	; 1
    2f00:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2f02:	df 91       	pop	r29
    2f04:	cf 91       	pop	r28
    2f06:	1f 91       	pop	r17
    2f08:	0f 91       	pop	r16
    2f0a:	ff 90       	pop	r15
    2f0c:	ef 90       	pop	r14
    2f0e:	df 90       	pop	r13
    2f10:	cf 90       	pop	r12
    2f12:	bf 90       	pop	r11
    2f14:	af 90       	pop	r10
    2f16:	9f 90       	pop	r9
    2f18:	8f 90       	pop	r8
    2f1a:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2f1c:	0c 94 21 16 	jmp	0x2c42	; 0x2c42 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    2f20:	2f ef       	ldi	r18, 0xFF	; 255
    2f22:	3f ef       	ldi	r19, 0xFF	; 255
    2f24:	4f e7       	ldi	r20, 0x7F	; 127
    2f26:	5f ec       	ldi	r21, 0xCF	; 207
    2f28:	c7 01       	movw	r24, r14
    2f2a:	b6 01       	movw	r22, r12
    2f2c:	0e 94 bc 11 	call	0x2378	; 0x2378 <__cmpsf2>
    2f30:	87 fd       	sbrc	r24, 7
    2f32:	e4 cf       	rjmp	.-56     	; 0x2efc <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    2f34:	20 e0       	ldi	r18, 0x00	; 0
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	a9 01       	movw	r20, r18
    2f3a:	c7 01       	movw	r24, r14
    2f3c:	b6 01       	movw	r22, r12
    2f3e:	0e 94 bc 11 	call	0x2378	; 0x2378 <__cmpsf2>
    2f42:	87 ff       	sbrs	r24, 7
    2f44:	0a c0       	rjmp	.+20     	; 0x2f5a <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    2f46:	6d e2       	ldi	r22, 0x2D	; 45
    2f48:	c8 01       	movw	r24, r16
    2f4a:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <_ZN5Print5printEc>
    2f4e:	ec 01       	movw	r28, r24
     number = -number;
    2f50:	f7 fa       	bst	r15, 7
    2f52:	f0 94       	com	r15
    2f54:	f7 f8       	bld	r15, 7
    2f56:	f0 94       	com	r15
    2f58:	02 c0       	rjmp	.+4      	; 0x2f5e <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    2f5a:	c0 e0       	ldi	r28, 0x00	; 0
    2f5c:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2f5e:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    2f60:	60 e0       	ldi	r22, 0x00	; 0
    2f62:	70 e0       	ldi	r23, 0x00	; 0
    2f64:	80 e0       	ldi	r24, 0x00	; 0
    2f66:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    2f68:	7b 14       	cp	r7, r11
    2f6a:	41 f0       	breq	.+16     	; 0x2f7c <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	40 e2       	ldi	r20, 0x20	; 32
    2f72:	51 e4       	ldi	r21, 0x41	; 65
    2f74:	0e 94 c1 11 	call	0x2382	; 0x2382 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2f78:	b3 94       	inc	r11
    2f7a:	f6 cf       	rjmp	.-20     	; 0x2f68 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    2f7c:	a7 01       	movw	r20, r14
    2f7e:	96 01       	movw	r18, r12
    2f80:	0e 94 de 10 	call	0x21bc	; 0x21bc <__addsf3>
    2f84:	6b 01       	movw	r12, r22
    2f86:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    2f88:	0e 94 33 12 	call	0x2466	; 0x2466 <__fixunssfsi>
    2f8c:	4b 01       	movw	r8, r22
    2f8e:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    2f90:	2a e0       	ldi	r18, 0x0A	; 10
    2f92:	ab 01       	movw	r20, r22
    2f94:	bc 01       	movw	r22, r24
    2f96:	c8 01       	movw	r24, r16
    2f98:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2f9c:	c8 0f       	add	r28, r24
    2f9e:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    2fa0:	77 20       	and	r7, r7
    2fa2:	b9 f1       	breq	.+110    	; 0x3012 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    2fa4:	c5 01       	movw	r24, r10
    2fa6:	b4 01       	movw	r22, r8
    2fa8:	0e 94 62 12 	call	0x24c4	; 0x24c4 <__floatunsisf>
    2fac:	9b 01       	movw	r18, r22
    2fae:	ac 01       	movw	r20, r24
    2fb0:	c7 01       	movw	r24, r14
    2fb2:	b6 01       	movw	r22, r12
    2fb4:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__subsf3>
    2fb8:	6b 01       	movw	r12, r22
    2fba:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    2fbc:	6e e2       	ldi	r22, 0x2E	; 46
    2fbe:	c8 01       	movw	r24, r16
    2fc0:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <_ZN5Print5printEc>
    2fc4:	c8 0f       	add	r28, r24
    2fc6:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    2fc8:	20 e0       	ldi	r18, 0x00	; 0
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	40 e2       	ldi	r20, 0x20	; 32
    2fce:	51 e4       	ldi	r21, 0x41	; 65
    2fd0:	c7 01       	movw	r24, r14
    2fd2:	b6 01       	movw	r22, r12
    2fd4:	0e 94 48 13 	call	0x2690	; 0x2690 <__mulsf3>
    2fd8:	4b 01       	movw	r8, r22
    2fda:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    2fdc:	0e 94 33 12 	call	0x2466	; 0x2466 <__fixunssfsi>
    2fe0:	6b 01       	movw	r12, r22
    2fe2:	7c 01       	movw	r14, r24
    n += print(toPrint);
    2fe4:	4a e0       	ldi	r20, 0x0A	; 10
    2fe6:	50 e0       	ldi	r21, 0x00	; 0
    2fe8:	c8 01       	movw	r24, r16
    2fea:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <_ZN5Print5printEji>
    2fee:	c8 0f       	add	r28, r24
    2ff0:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    2ff2:	b6 01       	movw	r22, r12
    2ff4:	80 e0       	ldi	r24, 0x00	; 0
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	0e 94 62 12 	call	0x24c4	; 0x24c4 <__floatunsisf>
    2ffc:	9b 01       	movw	r18, r22
    2ffe:	ac 01       	movw	r20, r24
    3000:	c5 01       	movw	r24, r10
    3002:	b4 01       	movw	r22, r8
    3004:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__subsf3>
    3008:	6b 01       	movw	r12, r22
    300a:	7c 01       	movw	r14, r24
    300c:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    300e:	71 10       	cpse	r7, r1
    3010:	db cf       	rjmp	.-74     	; 0x2fc8 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    3012:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    3014:	df 91       	pop	r29
    3016:	cf 91       	pop	r28
    3018:	1f 91       	pop	r17
    301a:	0f 91       	pop	r16
    301c:	ff 90       	pop	r15
    301e:	ef 90       	pop	r14
    3020:	df 90       	pop	r13
    3022:	cf 90       	pop	r12
    3024:	bf 90       	pop	r11
    3026:	af 90       	pop	r10
    3028:	9f 90       	pop	r9
    302a:	8f 90       	pop	r8
    302c:	7f 90       	pop	r7
    302e:	08 95       	ret

00003030 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    3030:	0c 94 3d 17 	jmp	0x2e7a	; 0x2e7a <_ZN5Print10printFloatEdh>

00003034 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    3034:	0f 93       	push	r16
    3036:	1f 93       	push	r17
    3038:	cf 93       	push	r28
    303a:	df 93       	push	r29
    303c:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    303e:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <_ZN5Print10printFloatEdh>
    3042:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    3044:	ce 01       	movw	r24, r28
    3046:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <_ZN5Print7printlnEv>
  return n;
}
    304a:	80 0f       	add	r24, r16
    304c:	91 1f       	adc	r25, r17
    304e:	df 91       	pop	r29
    3050:	cf 91       	pop	r28
    3052:	1f 91       	pop	r17
    3054:	0f 91       	pop	r16
    3056:	08 95       	ret

00003058 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    3058:	08 95       	ret

0000305a <attachInterrupt>:
    305a:	82 30       	cpi	r24, 0x02	; 2
    305c:	e8 f4       	brcc	.+58     	; 0x3098 <attachInterrupt+0x3e>
    305e:	e8 2f       	mov	r30, r24
    3060:	f0 e0       	ldi	r31, 0x00	; 0
    3062:	ee 0f       	add	r30, r30
    3064:	ff 1f       	adc	r31, r31
    3066:	e8 5f       	subi	r30, 0xF8	; 248
    3068:	fe 4f       	sbci	r31, 0xFE	; 254
    306a:	71 83       	std	Z+1, r23	; 0x01
    306c:	60 83       	st	Z, r22
    306e:	81 30       	cpi	r24, 0x01	; 1
    3070:	41 f0       	breq	.+16     	; 0x3082 <attachInterrupt+0x28>
    3072:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    3076:	8c 7f       	andi	r24, 0xFC	; 252
    3078:	48 2b       	or	r20, r24
    307a:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    307e:	e8 9a       	sbi	0x1d, 0	; 29
    3080:	08 95       	ret
    3082:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    3086:	83 7f       	andi	r24, 0xF3	; 243
    3088:	44 0f       	add	r20, r20
    308a:	55 1f       	adc	r21, r21
    308c:	44 0f       	add	r20, r20
    308e:	55 1f       	adc	r21, r21
    3090:	48 2b       	or	r20, r24
    3092:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    3096:	e9 9a       	sbi	0x1d, 1	; 29
    3098:	08 95       	ret

0000309a <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    309a:	1f 92       	push	r1
    309c:	0f 92       	push	r0
    309e:	0f b6       	in	r0, 0x3f	; 63
    30a0:	0f 92       	push	r0
    30a2:	11 24       	eor	r1, r1
    30a4:	2f 93       	push	r18
    30a6:	3f 93       	push	r19
    30a8:	4f 93       	push	r20
    30aa:	5f 93       	push	r21
    30ac:	6f 93       	push	r22
    30ae:	7f 93       	push	r23
    30b0:	8f 93       	push	r24
    30b2:	9f 93       	push	r25
    30b4:	af 93       	push	r26
    30b6:	bf 93       	push	r27
    30b8:	ef 93       	push	r30
    30ba:	ff 93       	push	r31
    30bc:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <intFunc>
    30c0:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <intFunc+0x1>
    30c4:	09 95       	icall
    30c6:	ff 91       	pop	r31
    30c8:	ef 91       	pop	r30
    30ca:	bf 91       	pop	r27
    30cc:	af 91       	pop	r26
    30ce:	9f 91       	pop	r25
    30d0:	8f 91       	pop	r24
    30d2:	7f 91       	pop	r23
    30d4:	6f 91       	pop	r22
    30d6:	5f 91       	pop	r21
    30d8:	4f 91       	pop	r20
    30da:	3f 91       	pop	r19
    30dc:	2f 91       	pop	r18
    30de:	0f 90       	pop	r0
    30e0:	0f be       	out	0x3f, r0	; 63
    30e2:	0f 90       	pop	r0
    30e4:	1f 90       	pop	r1
    30e6:	18 95       	reti

000030e8 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    30e8:	1f 92       	push	r1
    30ea:	0f 92       	push	r0
    30ec:	0f b6       	in	r0, 0x3f	; 63
    30ee:	0f 92       	push	r0
    30f0:	11 24       	eor	r1, r1
    30f2:	2f 93       	push	r18
    30f4:	3f 93       	push	r19
    30f6:	4f 93       	push	r20
    30f8:	5f 93       	push	r21
    30fa:	6f 93       	push	r22
    30fc:	7f 93       	push	r23
    30fe:	8f 93       	push	r24
    3100:	9f 93       	push	r25
    3102:	af 93       	push	r26
    3104:	bf 93       	push	r27
    3106:	ef 93       	push	r30
    3108:	ff 93       	push	r31
    310a:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <intFunc+0x2>
    310e:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <intFunc+0x3>
    3112:	09 95       	icall
    3114:	ff 91       	pop	r31
    3116:	ef 91       	pop	r30
    3118:	bf 91       	pop	r27
    311a:	af 91       	pop	r26
    311c:	9f 91       	pop	r25
    311e:	8f 91       	pop	r24
    3120:	7f 91       	pop	r23
    3122:	6f 91       	pop	r22
    3124:	5f 91       	pop	r21
    3126:	4f 91       	pop	r20
    3128:	3f 91       	pop	r19
    312a:	2f 91       	pop	r18
    312c:	0f 90       	pop	r0
    312e:	0f be       	out	0x3f, r0	; 63
    3130:	0f 90       	pop	r0
    3132:	1f 90       	pop	r1
    3134:	18 95       	reti

00003136 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    3136:	1f 92       	push	r1
    3138:	0f 92       	push	r0
    313a:	0f b6       	in	r0, 0x3f	; 63
    313c:	0f 92       	push	r0
    313e:	11 24       	eor	r1, r1
    3140:	2f 93       	push	r18
    3142:	3f 93       	push	r19
    3144:	8f 93       	push	r24
    3146:	9f 93       	push	r25
    3148:	af 93       	push	r26
    314a:	bf 93       	push	r27
    314c:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <timer0_millis>
    3150:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <timer0_millis+0x1>
    3154:	a0 91 8d 02 	lds	r26, 0x028D	; 0x80028d <timer0_millis+0x2>
    3158:	b0 91 8e 02 	lds	r27, 0x028E	; 0x80028e <timer0_millis+0x3>
    315c:	30 91 8a 02 	lds	r19, 0x028A	; 0x80028a <timer0_fract>
    3160:	23 e0       	ldi	r18, 0x03	; 3
    3162:	23 0f       	add	r18, r19
    3164:	2d 37       	cpi	r18, 0x7D	; 125
    3166:	20 f4       	brcc	.+8      	; 0x3170 <__vector_16+0x3a>
    3168:	01 96       	adiw	r24, 0x01	; 1
    316a:	a1 1d       	adc	r26, r1
    316c:	b1 1d       	adc	r27, r1
    316e:	05 c0       	rjmp	.+10     	; 0x317a <__vector_16+0x44>
    3170:	26 e8       	ldi	r18, 0x86	; 134
    3172:	23 0f       	add	r18, r19
    3174:	02 96       	adiw	r24, 0x02	; 2
    3176:	a1 1d       	adc	r26, r1
    3178:	b1 1d       	adc	r27, r1
    317a:	20 93 8a 02 	sts	0x028A, r18	; 0x80028a <timer0_fract>
    317e:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <timer0_millis>
    3182:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <timer0_millis+0x1>
    3186:	a0 93 8d 02 	sts	0x028D, r26	; 0x80028d <timer0_millis+0x2>
    318a:	b0 93 8e 02 	sts	0x028E, r27	; 0x80028e <timer0_millis+0x3>
    318e:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <timer0_overflow_count>
    3192:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <timer0_overflow_count+0x1>
    3196:	a0 91 91 02 	lds	r26, 0x0291	; 0x800291 <timer0_overflow_count+0x2>
    319a:	b0 91 92 02 	lds	r27, 0x0292	; 0x800292 <timer0_overflow_count+0x3>
    319e:	01 96       	adiw	r24, 0x01	; 1
    31a0:	a1 1d       	adc	r26, r1
    31a2:	b1 1d       	adc	r27, r1
    31a4:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <timer0_overflow_count>
    31a8:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <timer0_overflow_count+0x1>
    31ac:	a0 93 91 02 	sts	0x0291, r26	; 0x800291 <timer0_overflow_count+0x2>
    31b0:	b0 93 92 02 	sts	0x0292, r27	; 0x800292 <timer0_overflow_count+0x3>
    31b4:	bf 91       	pop	r27
    31b6:	af 91       	pop	r26
    31b8:	9f 91       	pop	r25
    31ba:	8f 91       	pop	r24
    31bc:	3f 91       	pop	r19
    31be:	2f 91       	pop	r18
    31c0:	0f 90       	pop	r0
    31c2:	0f be       	out	0x3f, r0	; 63
    31c4:	0f 90       	pop	r0
    31c6:	1f 90       	pop	r1
    31c8:	18 95       	reti

000031ca <millis>:
    31ca:	2f b7       	in	r18, 0x3f	; 63
    31cc:	f8 94       	cli
    31ce:	60 91 8b 02 	lds	r22, 0x028B	; 0x80028b <timer0_millis>
    31d2:	70 91 8c 02 	lds	r23, 0x028C	; 0x80028c <timer0_millis+0x1>
    31d6:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <timer0_millis+0x2>
    31da:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <timer0_millis+0x3>
    31de:	2f bf       	out	0x3f, r18	; 63
    31e0:	08 95       	ret

000031e2 <micros>:
    31e2:	3f b7       	in	r19, 0x3f	; 63
    31e4:	f8 94       	cli
    31e6:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <timer0_overflow_count>
    31ea:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <timer0_overflow_count+0x1>
    31ee:	a0 91 91 02 	lds	r26, 0x0291	; 0x800291 <timer0_overflow_count+0x2>
    31f2:	b0 91 92 02 	lds	r27, 0x0292	; 0x800292 <timer0_overflow_count+0x3>
    31f6:	26 b5       	in	r18, 0x26	; 38
    31f8:	a8 9b       	sbis	0x15, 0	; 21
    31fa:	05 c0       	rjmp	.+10     	; 0x3206 <micros+0x24>
    31fc:	2f 3f       	cpi	r18, 0xFF	; 255
    31fe:	19 f0       	breq	.+6      	; 0x3206 <micros+0x24>
    3200:	01 96       	adiw	r24, 0x01	; 1
    3202:	a1 1d       	adc	r26, r1
    3204:	b1 1d       	adc	r27, r1
    3206:	3f bf       	out	0x3f, r19	; 63
    3208:	ba 2f       	mov	r27, r26
    320a:	a9 2f       	mov	r26, r25
    320c:	98 2f       	mov	r25, r24
    320e:	88 27       	eor	r24, r24
    3210:	82 0f       	add	r24, r18
    3212:	91 1d       	adc	r25, r1
    3214:	a1 1d       	adc	r26, r1
    3216:	b1 1d       	adc	r27, r1
    3218:	bc 01       	movw	r22, r24
    321a:	cd 01       	movw	r24, r26
    321c:	42 e0       	ldi	r20, 0x02	; 2
    321e:	66 0f       	add	r22, r22
    3220:	77 1f       	adc	r23, r23
    3222:	88 1f       	adc	r24, r24
    3224:	99 1f       	adc	r25, r25
    3226:	4a 95       	dec	r20
    3228:	d1 f7       	brne	.-12     	; 0x321e <micros+0x3c>
    322a:	08 95       	ret

0000322c <delay>:
    322c:	8f 92       	push	r8
    322e:	9f 92       	push	r9
    3230:	af 92       	push	r10
    3232:	bf 92       	push	r11
    3234:	cf 92       	push	r12
    3236:	df 92       	push	r13
    3238:	ef 92       	push	r14
    323a:	ff 92       	push	r15
    323c:	6b 01       	movw	r12, r22
    323e:	7c 01       	movw	r14, r24
    3240:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <micros>
    3244:	4b 01       	movw	r8, r22
    3246:	5c 01       	movw	r10, r24
    3248:	c1 14       	cp	r12, r1
    324a:	d1 04       	cpc	r13, r1
    324c:	e1 04       	cpc	r14, r1
    324e:	f1 04       	cpc	r15, r1
    3250:	01 f1       	breq	.+64     	; 0x3292 <delay+0x66>
    3252:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <yield>
    3256:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <micros>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	88 19       	sub	r24, r8
    3260:	99 09       	sbc	r25, r9
    3262:	aa 09       	sbc	r26, r10
    3264:	bb 09       	sbc	r27, r11
    3266:	88 3e       	cpi	r24, 0xE8	; 232
    3268:	93 40       	sbci	r25, 0x03	; 3
    326a:	a1 05       	cpc	r26, r1
    326c:	b1 05       	cpc	r27, r1
    326e:	60 f3       	brcs	.-40     	; 0x3248 <delay+0x1c>
    3270:	21 e0       	ldi	r18, 0x01	; 1
    3272:	c2 1a       	sub	r12, r18
    3274:	d1 08       	sbc	r13, r1
    3276:	e1 08       	sbc	r14, r1
    3278:	f1 08       	sbc	r15, r1
    327a:	88 ee       	ldi	r24, 0xE8	; 232
    327c:	88 0e       	add	r8, r24
    327e:	83 e0       	ldi	r24, 0x03	; 3
    3280:	98 1e       	adc	r9, r24
    3282:	a1 1c       	adc	r10, r1
    3284:	b1 1c       	adc	r11, r1
    3286:	c1 14       	cp	r12, r1
    3288:	d1 04       	cpc	r13, r1
    328a:	e1 04       	cpc	r14, r1
    328c:	f1 04       	cpc	r15, r1
    328e:	19 f7       	brne	.-58     	; 0x3256 <delay+0x2a>
    3290:	db cf       	rjmp	.-74     	; 0x3248 <delay+0x1c>
    3292:	ff 90       	pop	r15
    3294:	ef 90       	pop	r14
    3296:	df 90       	pop	r13
    3298:	cf 90       	pop	r12
    329a:	bf 90       	pop	r11
    329c:	af 90       	pop	r10
    329e:	9f 90       	pop	r9
    32a0:	8f 90       	pop	r8
    32a2:	08 95       	ret

000032a4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    32a4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    32a6:	84 b5       	in	r24, 0x24	; 36
    32a8:	82 60       	ori	r24, 0x02	; 2
    32aa:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    32ac:	84 b5       	in	r24, 0x24	; 36
    32ae:	81 60       	ori	r24, 0x01	; 1
    32b0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    32b2:	85 b5       	in	r24, 0x25	; 37
    32b4:	82 60       	ori	r24, 0x02	; 2
    32b6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    32b8:	85 b5       	in	r24, 0x25	; 37
    32ba:	81 60       	ori	r24, 0x01	; 1
    32bc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    32be:	ee e6       	ldi	r30, 0x6E	; 110
    32c0:	f0 e0       	ldi	r31, 0x00	; 0
    32c2:	80 81       	ld	r24, Z
    32c4:	81 60       	ori	r24, 0x01	; 1
    32c6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    32c8:	e1 e8       	ldi	r30, 0x81	; 129
    32ca:	f0 e0       	ldi	r31, 0x00	; 0
    32cc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    32ce:	80 81       	ld	r24, Z
    32d0:	82 60       	ori	r24, 0x02	; 2
    32d2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    32d4:	80 81       	ld	r24, Z
    32d6:	81 60       	ori	r24, 0x01	; 1
    32d8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    32da:	e0 e8       	ldi	r30, 0x80	; 128
    32dc:	f0 e0       	ldi	r31, 0x00	; 0
    32de:	80 81       	ld	r24, Z
    32e0:	81 60       	ori	r24, 0x01	; 1
    32e2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    32e4:	e1 eb       	ldi	r30, 0xB1	; 177
    32e6:	f0 e0       	ldi	r31, 0x00	; 0
    32e8:	80 81       	ld	r24, Z
    32ea:	84 60       	ori	r24, 0x04	; 4
    32ec:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    32ee:	e0 eb       	ldi	r30, 0xB0	; 176
    32f0:	f0 e0       	ldi	r31, 0x00	; 0
    32f2:	80 81       	ld	r24, Z
    32f4:	81 60       	ori	r24, 0x01	; 1
    32f6:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    32f8:	ea e7       	ldi	r30, 0x7A	; 122
    32fa:	f0 e0       	ldi	r31, 0x00	; 0
    32fc:	80 81       	ld	r24, Z
    32fe:	84 60       	ori	r24, 0x04	; 4
    3300:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3302:	80 81       	ld	r24, Z
    3304:	82 60       	ori	r24, 0x02	; 2
    3306:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3308:	80 81       	ld	r24, Z
    330a:	81 60       	ori	r24, 0x01	; 1
    330c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    330e:	80 81       	ld	r24, Z
    3310:	80 68       	ori	r24, 0x80	; 128
    3312:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3314:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    3318:	08 95       	ret

0000331a <turnOffPWM>:
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
    331a:	83 30       	cpi	r24, 0x03	; 3
    331c:	81 f0       	breq	.+32     	; 0x333e <turnOffPWM+0x24>
    331e:	28 f4       	brcc	.+10     	; 0x332a <turnOffPWM+0x10>
    3320:	81 30       	cpi	r24, 0x01	; 1
    3322:	99 f0       	breq	.+38     	; 0x334a <turnOffPWM+0x30>
    3324:	82 30       	cpi	r24, 0x02	; 2
    3326:	a1 f0       	breq	.+40     	; 0x3350 <turnOffPWM+0x36>
    3328:	08 95       	ret
    332a:	87 30       	cpi	r24, 0x07	; 7
    332c:	a9 f0       	breq	.+42     	; 0x3358 <turnOffPWM+0x3e>
    332e:	88 30       	cpi	r24, 0x08	; 8
    3330:	b9 f0       	breq	.+46     	; 0x3360 <turnOffPWM+0x46>
    3332:	84 30       	cpi	r24, 0x04	; 4
    3334:	d1 f4       	brne	.+52     	; 0x336a <turnOffPWM+0x50>
    3336:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    333a:	8f 7d       	andi	r24, 0xDF	; 223
    333c:	03 c0       	rjmp	.+6      	; 0x3344 <turnOffPWM+0x2a>
    333e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    3342:	8f 77       	andi	r24, 0x7F	; 127
    3344:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    3348:	08 95       	ret
    334a:	84 b5       	in	r24, 0x24	; 36
    334c:	8f 77       	andi	r24, 0x7F	; 127
    334e:	02 c0       	rjmp	.+4      	; 0x3354 <turnOffPWM+0x3a>
    3350:	84 b5       	in	r24, 0x24	; 36
    3352:	8f 7d       	andi	r24, 0xDF	; 223
    3354:	84 bd       	out	0x24, r24	; 36
    3356:	08 95       	ret
    3358:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    335c:	8f 77       	andi	r24, 0x7F	; 127
    335e:	03 c0       	rjmp	.+6      	; 0x3366 <turnOffPWM+0x4c>
    3360:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    3364:	8f 7d       	andi	r24, 0xDF	; 223
    3366:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    336a:	08 95       	ret

0000336c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    336c:	1f 93       	push	r17
    336e:	cf 93       	push	r28
    3370:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3372:	28 2f       	mov	r18, r24
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	f9 01       	movw	r30, r18
    3378:	ec 57       	subi	r30, 0x7C	; 124
    337a:	f3 4f       	sbci	r31, 0xF3	; 243
    337c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    337e:	f9 01       	movw	r30, r18
    3380:	e8 56       	subi	r30, 0x68	; 104
    3382:	f3 4f       	sbci	r31, 0xF3	; 243
    3384:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3386:	f9 01       	movw	r30, r18
    3388:	e4 55       	subi	r30, 0x54	; 84
    338a:	f3 4f       	sbci	r31, 0xF3	; 243
    338c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    338e:	cc 23       	and	r28, r28
    3390:	c1 f0       	breq	.+48     	; 0x33c2 <digitalWrite+0x56>
    3392:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3394:	81 11       	cpse	r24, r1
    3396:	0e 94 8d 19 	call	0x331a	; 0x331a <turnOffPWM>

	out = portOutputRegister(port);
    339a:	ec 2f       	mov	r30, r28
    339c:	f0 e0       	ldi	r31, 0x00	; 0
    339e:	ee 0f       	add	r30, r30
    33a0:	ff 1f       	adc	r31, r31
    33a2:	e0 54       	subi	r30, 0x40	; 64
    33a4:	f3 4f       	sbci	r31, 0xF3	; 243
    33a6:	a5 91       	lpm	r26, Z+
    33a8:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    33aa:	9f b7       	in	r25, 0x3f	; 63
	cli();
    33ac:	f8 94       	cli

	if (val == LOW) {
    33ae:	11 11       	cpse	r17, r1
    33b0:	04 c0       	rjmp	.+8      	; 0x33ba <digitalWrite+0x4e>
		*out &= ~bit;
    33b2:	8c 91       	ld	r24, X
    33b4:	d0 95       	com	r29
    33b6:	d8 23       	and	r29, r24
    33b8:	02 c0       	rjmp	.+4      	; 0x33be <digitalWrite+0x52>
	} else {
		*out |= bit;
    33ba:	ec 91       	ld	r30, X
    33bc:	de 2b       	or	r29, r30
    33be:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    33c0:	9f bf       	out	0x3f, r25	; 63
}
    33c2:	df 91       	pop	r29
    33c4:	cf 91       	pop	r28
    33c6:	1f 91       	pop	r17
    33c8:	08 95       	ret

000033ca <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    33ca:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <_ZN7TwoWire14rxBufferLengthE>
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	20 91 c8 02 	lds	r18, 0x02C8	; 0x8002c8 <_ZN7TwoWire13rxBufferIndexE>
    33d4:	82 1b       	sub	r24, r18
    33d6:	91 09       	sbc	r25, r1
    33d8:	08 95       	ret

000033da <_ZN7TwoWire4readEv>:
    33da:	90 91 c8 02 	lds	r25, 0x02C8	; 0x8002c8 <_ZN7TwoWire13rxBufferIndexE>
    33de:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <_ZN7TwoWire14rxBufferLengthE>
    33e2:	98 17       	cp	r25, r24
    33e4:	50 f4       	brcc	.+20     	; 0x33fa <_ZN7TwoWire4readEv+0x20>
    33e6:	e9 2f       	mov	r30, r25
    33e8:	f0 e0       	ldi	r31, 0x00	; 0
    33ea:	e7 53       	subi	r30, 0x37	; 55
    33ec:	fd 4f       	sbci	r31, 0xFD	; 253
    33ee:	20 81       	ld	r18, Z
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	9f 5f       	subi	r25, 0xFF	; 255
    33f4:	90 93 c8 02 	sts	0x02C8, r25	; 0x8002c8 <_ZN7TwoWire13rxBufferIndexE>
    33f8:	02 c0       	rjmp	.+4      	; 0x33fe <_ZN7TwoWire4readEv+0x24>
    33fa:	2f ef       	ldi	r18, 0xFF	; 255
    33fc:	3f ef       	ldi	r19, 0xFF	; 255
    33fe:	c9 01       	movw	r24, r18
    3400:	08 95       	ret

00003402 <_ZN7TwoWire4peekEv>:
    3402:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <_ZN7TwoWire13rxBufferIndexE>
    3406:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <_ZN7TwoWire14rxBufferLengthE>
    340a:	e8 17       	cp	r30, r24
    340c:	30 f4       	brcc	.+12     	; 0x341a <_ZN7TwoWire4peekEv+0x18>
    340e:	f0 e0       	ldi	r31, 0x00	; 0
    3410:	e7 53       	subi	r30, 0x37	; 55
    3412:	fd 4f       	sbci	r31, 0xFD	; 253
    3414:	80 81       	ld	r24, Z
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	08 95       	ret
    341a:	8f ef       	ldi	r24, 0xFF	; 255
    341c:	9f ef       	ldi	r25, 0xFF	; 255
    341e:	08 95       	ret

00003420 <_ZN7TwoWire5flushEv>:
    3420:	08 95       	ret

00003422 <_ZN7TwoWire16onReceiveServiceEPhi>:
    3422:	cf 93       	push	r28
    3424:	df 93       	push	r29
    3426:	ec 01       	movw	r28, r24
    3428:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <_ZN7TwoWire14user_onReceiveE>
    342c:	f0 91 a0 02 	lds	r31, 0x02A0	; 0x8002a0 <_ZN7TwoWire14user_onReceiveE+0x1>
    3430:	30 97       	sbiw	r30, 0x00	; 0
    3432:	f1 f0       	breq	.+60     	; 0x3470 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3434:	90 91 c8 02 	lds	r25, 0x02C8	; 0x8002c8 <_ZN7TwoWire13rxBufferIndexE>
    3438:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <_ZN7TwoWire14rxBufferLengthE>
    343c:	98 17       	cp	r25, r24
    343e:	c0 f0       	brcs	.+48     	; 0x3470 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	29 2f       	mov	r18, r25
    3444:	30 e0       	ldi	r19, 0x00	; 0
    3446:	26 17       	cp	r18, r22
    3448:	37 07       	cpc	r19, r23
    344a:	54 f4       	brge	.+20     	; 0x3460 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    344c:	de 01       	movw	r26, r28
    344e:	a2 0f       	add	r26, r18
    3450:	b3 1f       	adc	r27, r19
    3452:	4c 91       	ld	r20, X
    3454:	d9 01       	movw	r26, r18
    3456:	a7 53       	subi	r26, 0x37	; 55
    3458:	bd 4f       	sbci	r27, 0xFD	; 253
    345a:	4c 93       	st	X, r20
    345c:	9f 5f       	subi	r25, 0xFF	; 255
    345e:	f1 cf       	rjmp	.-30     	; 0x3442 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    3460:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <_ZN7TwoWire13rxBufferIndexE>
    3464:	60 93 c7 02 	sts	0x02C7, r22	; 0x8002c7 <_ZN7TwoWire14rxBufferLengthE>
    3468:	cb 01       	movw	r24, r22
    346a:	df 91       	pop	r29
    346c:	cf 91       	pop	r28
    346e:	09 94       	ijmp
    3470:	df 91       	pop	r29
    3472:	cf 91       	pop	r28
    3474:	08 95       	ret

00003476 <_ZN7TwoWire16onRequestServiceEv>:
    3476:	e0 91 a1 02 	lds	r30, 0x02A1	; 0x8002a1 <_ZN7TwoWire14user_onRequestE>
    347a:	f0 91 a2 02 	lds	r31, 0x02A2	; 0x8002a2 <_ZN7TwoWire14user_onRequestE+0x1>
    347e:	30 97       	sbiw	r30, 0x00	; 0
    3480:	29 f0       	breq	.+10     	; 0x348c <_ZN7TwoWire16onRequestServiceEv+0x16>
    3482:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <_ZN7TwoWire13txBufferIndexE>
    3486:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <_ZN7TwoWire14txBufferLengthE>
    348a:	09 94       	ijmp
    348c:	08 95       	ret

0000348e <_ZN7TwoWire5writeEPKhj>:
    348e:	cf 92       	push	r12
    3490:	df 92       	push	r13
    3492:	ef 92       	push	r14
    3494:	ff 92       	push	r15
    3496:	0f 93       	push	r16
    3498:	1f 93       	push	r17
    349a:	cf 93       	push	r28
    349c:	df 93       	push	r29
    349e:	7c 01       	movw	r14, r24
    34a0:	cb 01       	movw	r24, r22
    34a2:	8a 01       	movw	r16, r20
    34a4:	20 91 a3 02 	lds	r18, 0x02A3	; 0x8002a3 <_ZN7TwoWire12transmittingE>
    34a8:	22 23       	and	r18, r18
    34aa:	89 f0       	breq	.+34     	; 0x34ce <_ZN7TwoWire5writeEPKhj+0x40>
    34ac:	eb 01       	movw	r28, r22
    34ae:	6b 01       	movw	r12, r22
    34b0:	c4 0e       	add	r12, r20
    34b2:	d5 1e       	adc	r13, r21
    34b4:	cc 15       	cp	r28, r12
    34b6:	dd 05       	cpc	r29, r13
    34b8:	69 f0       	breq	.+26     	; 0x34d4 <_ZN7TwoWire5writeEPKhj+0x46>
    34ba:	69 91       	ld	r22, Y+
    34bc:	d7 01       	movw	r26, r14
    34be:	ed 91       	ld	r30, X+
    34c0:	fc 91       	ld	r31, X
    34c2:	01 90       	ld	r0, Z+
    34c4:	f0 81       	ld	r31, Z
    34c6:	e0 2d       	mov	r30, r0
    34c8:	c7 01       	movw	r24, r14
    34ca:	09 95       	icall
    34cc:	f3 cf       	rjmp	.-26     	; 0x34b4 <_ZN7TwoWire5writeEPKhj+0x26>
    34ce:	64 2f       	mov	r22, r20
    34d0:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <twi_transmit>
    34d4:	c8 01       	movw	r24, r16
    34d6:	df 91       	pop	r29
    34d8:	cf 91       	pop	r28
    34da:	1f 91       	pop	r17
    34dc:	0f 91       	pop	r16
    34de:	ff 90       	pop	r15
    34e0:	ef 90       	pop	r14
    34e2:	df 90       	pop	r13
    34e4:	cf 90       	pop	r12
    34e6:	08 95       	ret

000034e8 <_ZN7TwoWire5writeEh>:
    34e8:	cf 93       	push	r28
    34ea:	df 93       	push	r29
    34ec:	1f 92       	push	r1
    34ee:	cd b7       	in	r28, 0x3d	; 61
    34f0:	de b7       	in	r29, 0x3e	; 62
    34f2:	69 83       	std	Y+1, r22	; 0x01
    34f4:	20 91 a3 02 	lds	r18, 0x02A3	; 0x8002a3 <_ZN7TwoWire12transmittingE>
    34f8:	22 23       	and	r18, r18
    34fa:	d1 f0       	breq	.+52     	; 0x3530 <_ZN7TwoWire5writeEh+0x48>
    34fc:	20 91 a4 02 	lds	r18, 0x02A4	; 0x8002a4 <_ZN7TwoWire14txBufferLengthE>
    3500:	20 32       	cpi	r18, 0x20	; 32
    3502:	40 f0       	brcs	.+16     	; 0x3514 <_ZN7TwoWire5writeEh+0x2c>
    3504:	21 e0       	ldi	r18, 0x01	; 1
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	fc 01       	movw	r30, r24
    350a:	33 83       	std	Z+3, r19	; 0x03
    350c:	22 83       	std	Z+2, r18	; 0x02
    350e:	80 e0       	ldi	r24, 0x00	; 0
    3510:	90 e0       	ldi	r25, 0x00	; 0
    3512:	15 c0       	rjmp	.+42     	; 0x353e <_ZN7TwoWire5writeEh+0x56>
    3514:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <_ZN7TwoWire13txBufferIndexE>
    3518:	e8 2f       	mov	r30, r24
    351a:	f0 e0       	ldi	r31, 0x00	; 0
    351c:	ea 55       	subi	r30, 0x5A	; 90
    351e:	fd 4f       	sbci	r31, 0xFD	; 253
    3520:	99 81       	ldd	r25, Y+1	; 0x01
    3522:	90 83       	st	Z, r25
    3524:	8f 5f       	subi	r24, 0xFF	; 255
    3526:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <_ZN7TwoWire13txBufferIndexE>
    352a:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <_ZN7TwoWire14txBufferLengthE>
    352e:	05 c0       	rjmp	.+10     	; 0x353a <_ZN7TwoWire5writeEh+0x52>
    3530:	61 e0       	ldi	r22, 0x01	; 1
    3532:	ce 01       	movw	r24, r28
    3534:	01 96       	adiw	r24, 0x01	; 1
    3536:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <twi_transmit>
    353a:	81 e0       	ldi	r24, 0x01	; 1
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	0f 90       	pop	r0
    3540:	df 91       	pop	r29
    3542:	cf 91       	pop	r28
    3544:	08 95       	ret

00003546 <_ZN7TwoWireC1Ev>:
    3546:	fc 01       	movw	r30, r24
    3548:	13 82       	std	Z+3, r1	; 0x03
    354a:	12 82       	std	Z+2, r1	; 0x02
    354c:	88 ee       	ldi	r24, 0xE8	; 232
    354e:	93 e0       	ldi	r25, 0x03	; 3
    3550:	a0 e0       	ldi	r26, 0x00	; 0
    3552:	b0 e0       	ldi	r27, 0x00	; 0
    3554:	84 83       	std	Z+4, r24	; 0x04
    3556:	95 83       	std	Z+5, r25	; 0x05
    3558:	a6 83       	std	Z+6, r26	; 0x06
    355a:	b7 83       	std	Z+7, r27	; 0x07
    355c:	83 e3       	ldi	r24, 0x33	; 51
    355e:	91 e0       	ldi	r25, 0x01	; 1
    3560:	91 83       	std	Z+1, r25	; 0x01
    3562:	80 83       	st	Z, r24
    3564:	08 95       	ret

00003566 <_ZN7TwoWire5beginEv>:
    3566:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <_ZN7TwoWire13rxBufferIndexE>
    356a:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <_ZN7TwoWire14rxBufferLengthE>
    356e:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <_ZN7TwoWire13txBufferIndexE>
    3572:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <_ZN7TwoWire14txBufferLengthE>
    3576:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <twi_init>
    357a:	8b e3       	ldi	r24, 0x3B	; 59
    357c:	9a e1       	ldi	r25, 0x1A	; 26
    357e:	0e 94 a9 1b 	call	0x3752	; 0x3752 <twi_attachSlaveTxEvent>
    3582:	81 e1       	ldi	r24, 0x11	; 17
    3584:	9a e1       	ldi	r25, 0x1A	; 26
    3586:	0c 94 a4 1b 	jmp	0x3748	; 0x3748 <twi_attachSlaveRxEvent>

0000358a <_ZN7TwoWire17beginTransmissionEh>:
    358a:	81 e0       	ldi	r24, 0x01	; 1
    358c:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <_ZN7TwoWire12transmittingE>
    3590:	60 93 c6 02 	sts	0x02C6, r22	; 0x8002c6 <_ZN7TwoWire9txAddressE>
    3594:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <_ZN7TwoWire13txBufferIndexE>
    3598:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <_ZN7TwoWire14txBufferLengthE>
    359c:	08 95       	ret

0000359e <_ZN7TwoWire15endTransmissionEh>:
    359e:	0f 93       	push	r16
    35a0:	06 2f       	mov	r16, r22
    35a2:	21 e0       	ldi	r18, 0x01	; 1
    35a4:	40 91 a4 02 	lds	r20, 0x02A4	; 0x8002a4 <_ZN7TwoWire14txBufferLengthE>
    35a8:	66 ea       	ldi	r22, 0xA6	; 166
    35aa:	72 e0       	ldi	r23, 0x02	; 2
    35ac:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <_ZN7TwoWire9txAddressE>
    35b0:	0e 94 b3 1c 	call	0x3966	; 0x3966 <twi_writeTo>
    35b4:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <_ZN7TwoWire13txBufferIndexE>
    35b8:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <_ZN7TwoWire14txBufferLengthE>
    35bc:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <_ZN7TwoWire12transmittingE>
    35c0:	0f 91       	pop	r16
    35c2:	08 95       	ret

000035c4 <_ZN7TwoWire11requestFromEhhmhh>:
    35c4:	4f 92       	push	r4
    35c6:	5f 92       	push	r5
    35c8:	6f 92       	push	r6
    35ca:	7f 92       	push	r7
    35cc:	af 92       	push	r10
    35ce:	bf 92       	push	r11
    35d0:	cf 92       	push	r12
    35d2:	ef 92       	push	r14
    35d4:	ff 92       	push	r15
    35d6:	0f 93       	push	r16
    35d8:	1f 93       	push	r17
    35da:	cf 93       	push	r28
    35dc:	df 93       	push	r29
    35de:	5c 01       	movw	r10, r24
    35e0:	f6 2e       	mov	r15, r22
    35e2:	d4 2f       	mov	r29, r20
    35e4:	28 01       	movw	r4, r16
    35e6:	39 01       	movw	r6, r18
    35e8:	ee 20       	and	r14, r14
    35ea:	21 f1       	breq	.+72     	; 0x3634 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    35ec:	0e 94 c5 1a 	call	0x358a	; 0x358a <_ZN7TwoWire17beginTransmissionEh>
    35f0:	ce 2d       	mov	r28, r14
    35f2:	c4 30       	cpi	r28, 0x04	; 4
    35f4:	08 f0       	brcs	.+2      	; 0x35f8 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    35f6:	c3 e0       	ldi	r28, 0x03	; 3
    35f8:	c1 50       	subi	r28, 0x01	; 1
    35fa:	c0 f0       	brcs	.+48     	; 0x362c <_ZN7TwoWire11requestFromEhhmhh+0x68>
    35fc:	28 e0       	ldi	r18, 0x08	; 8
    35fe:	c2 9f       	mul	r28, r18
    3600:	c0 01       	movw	r24, r0
    3602:	11 24       	eor	r1, r1
    3604:	a3 01       	movw	r20, r6
    3606:	92 01       	movw	r18, r4
    3608:	04 c0       	rjmp	.+8      	; 0x3612 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    360a:	56 95       	lsr	r21
    360c:	47 95       	ror	r20
    360e:	37 95       	ror	r19
    3610:	27 95       	ror	r18
    3612:	8a 95       	dec	r24
    3614:	d2 f7       	brpl	.-12     	; 0x360a <_ZN7TwoWire11requestFromEhhmhh+0x46>
    3616:	ca 01       	movw	r24, r20
    3618:	b9 01       	movw	r22, r18
    361a:	d5 01       	movw	r26, r10
    361c:	ed 91       	ld	r30, X+
    361e:	fc 91       	ld	r31, X
    3620:	01 90       	ld	r0, Z+
    3622:	f0 81       	ld	r31, Z
    3624:	e0 2d       	mov	r30, r0
    3626:	c5 01       	movw	r24, r10
    3628:	09 95       	icall
    362a:	e6 cf       	rjmp	.-52     	; 0x35f8 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    362c:	60 e0       	ldi	r22, 0x00	; 0
    362e:	c5 01       	movw	r24, r10
    3630:	0e 94 cf 1a 	call	0x359e	; 0x359e <_ZN7TwoWire15endTransmissionEh>
    3634:	4d 2f       	mov	r20, r29
    3636:	d1 32       	cpi	r29, 0x21	; 33
    3638:	08 f0       	brcs	.+2      	; 0x363c <_ZN7TwoWire11requestFromEhhmhh+0x78>
    363a:	40 e2       	ldi	r20, 0x20	; 32
    363c:	2c 2d       	mov	r18, r12
    363e:	69 ec       	ldi	r22, 0xC9	; 201
    3640:	72 e0       	ldi	r23, 0x02	; 2
    3642:	8f 2d       	mov	r24, r15
    3644:	0e 94 ca 1b 	call	0x3794	; 0x3794 <twi_readFrom>
    3648:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <_ZN7TwoWire13rxBufferIndexE>
    364c:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <_ZN7TwoWire14rxBufferLengthE>
    3650:	df 91       	pop	r29
    3652:	cf 91       	pop	r28
    3654:	1f 91       	pop	r17
    3656:	0f 91       	pop	r16
    3658:	ff 90       	pop	r15
    365a:	ef 90       	pop	r14
    365c:	cf 90       	pop	r12
    365e:	bf 90       	pop	r11
    3660:	af 90       	pop	r10
    3662:	7f 90       	pop	r7
    3664:	6f 90       	pop	r6
    3666:	5f 90       	pop	r5
    3668:	4f 90       	pop	r4
    366a:	08 95       	ret

0000366c <_ZN7TwoWire11requestFromEhhh>:
    366c:	cf 92       	push	r12
    366e:	ef 92       	push	r14
    3670:	0f 93       	push	r16
    3672:	1f 93       	push	r17
    3674:	c2 2e       	mov	r12, r18
    3676:	e1 2c       	mov	r14, r1
    3678:	00 e0       	ldi	r16, 0x00	; 0
    367a:	10 e0       	ldi	r17, 0x00	; 0
    367c:	98 01       	movw	r18, r16
    367e:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <_ZN7TwoWire11requestFromEhhmhh>
    3682:	1f 91       	pop	r17
    3684:	0f 91       	pop	r16
    3686:	ef 90       	pop	r14
    3688:	cf 90       	pop	r12
    368a:	08 95       	ret

0000368c <_ZN7TwoWire11requestFromEhh>:
    368c:	21 e0       	ldi	r18, 0x01	; 1
    368e:	0c 94 36 1b 	jmp	0x366c	; 0x366c <_ZN7TwoWire11requestFromEhhh>

00003692 <_ZN7TwoWire15endTransmissionEv>:
    3692:	61 e0       	ldi	r22, 0x01	; 1
    3694:	0c 94 cf 1a 	jmp	0x359e	; 0x359e <_ZN7TwoWire15endTransmissionEh>

00003698 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3698:	83 e9       	ldi	r24, 0x93	; 147
    369a:	92 e0       	ldi	r25, 0x02	; 2
    369c:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <_ZN7TwoWireC1Ev>

000036a0 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    36a0:	08 95       	ret

000036a2 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    36a2:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <twi_state>
    36a6:	81 e0       	ldi	r24, 0x01	; 1
    36a8:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <twi_sendStop>
    36ac:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <twi_inRepStart>
    36b0:	61 e0       	ldi	r22, 0x01	; 1
    36b2:	82 e1       	ldi	r24, 0x12	; 18
    36b4:	0e 94 b6 19 	call	0x336c	; 0x336c <digitalWrite>
    36b8:	61 e0       	ldi	r22, 0x01	; 1
    36ba:	83 e1       	ldi	r24, 0x13	; 19
    36bc:	0e 94 b6 19 	call	0x336c	; 0x336c <digitalWrite>
    36c0:	e9 eb       	ldi	r30, 0xB9	; 185
    36c2:	f0 e0       	ldi	r31, 0x00	; 0
    36c4:	80 81       	ld	r24, Z
    36c6:	8e 7f       	andi	r24, 0xFE	; 254
    36c8:	80 83       	st	Z, r24
    36ca:	80 81       	ld	r24, Z
    36cc:	8d 7f       	andi	r24, 0xFD	; 253
    36ce:	80 83       	st	Z, r24
    36d0:	88 e4       	ldi	r24, 0x48	; 72
    36d2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    36d6:	85 e4       	ldi	r24, 0x45	; 69
    36d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    36dc:	08 95       	ret

000036de <twi_disable>:
    36de:	ec eb       	ldi	r30, 0xBC	; 188
    36e0:	f0 e0       	ldi	r31, 0x00	; 0
    36e2:	80 81       	ld	r24, Z
    36e4:	8a 7b       	andi	r24, 0xBA	; 186
    36e6:	80 83       	st	Z, r24
    36e8:	60 e0       	ldi	r22, 0x00	; 0
    36ea:	82 e1       	ldi	r24, 0x12	; 18
    36ec:	0e 94 b6 19 	call	0x336c	; 0x336c <digitalWrite>
    36f0:	60 e0       	ldi	r22, 0x00	; 0
    36f2:	83 e1       	ldi	r24, 0x13	; 19
    36f4:	0c 94 b6 19 	jmp	0x336c	; 0x336c <digitalWrite>

000036f8 <twi_transmit>:
    36f8:	40 91 0b 03 	lds	r20, 0x030B	; 0x80030b <twi_txBufferLength>
    36fc:	26 2f       	mov	r18, r22
    36fe:	30 e0       	ldi	r19, 0x00	; 0
    3700:	24 0f       	add	r18, r20
    3702:	31 1d       	adc	r19, r1
    3704:	21 32       	cpi	r18, 0x21	; 33
    3706:	31 05       	cpc	r19, r1
    3708:	dc f4       	brge	.+54     	; 0x3740 <twi_transmit+0x48>
    370a:	20 91 5c 03 	lds	r18, 0x035C	; 0x80035c <twi_state>
    370e:	24 30       	cpi	r18, 0x04	; 4
    3710:	c9 f4       	brne	.+50     	; 0x3744 <twi_transmit+0x4c>
    3712:	fc 01       	movw	r30, r24
    3714:	80 e0       	ldi	r24, 0x00	; 0
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	86 17       	cp	r24, r22
    371a:	58 f4       	brcc	.+22     	; 0x3732 <twi_transmit+0x3a>
    371c:	30 91 0b 03 	lds	r19, 0x030B	; 0x80030b <twi_txBufferLength>
    3720:	21 91       	ld	r18, Z+
    3722:	dc 01       	movw	r26, r24
    3724:	a3 5f       	subi	r26, 0xF3	; 243
    3726:	bc 4f       	sbci	r27, 0xFC	; 252
    3728:	a3 0f       	add	r26, r19
    372a:	b1 1d       	adc	r27, r1
    372c:	2c 93       	st	X, r18
    372e:	01 96       	adiw	r24, 0x01	; 1
    3730:	f3 cf       	rjmp	.-26     	; 0x3718 <twi_transmit+0x20>
    3732:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <twi_txBufferLength>
    3736:	68 0f       	add	r22, r24
    3738:	60 93 0b 03 	sts	0x030B, r22	; 0x80030b <twi_txBufferLength>
    373c:	80 e0       	ldi	r24, 0x00	; 0
    373e:	08 95       	ret
    3740:	81 e0       	ldi	r24, 0x01	; 1
    3742:	08 95       	ret
    3744:	82 e0       	ldi	r24, 0x02	; 2
    3746:	08 95       	ret

00003748 <twi_attachSlaveRxEvent>:
    3748:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <twi_onSlaveReceive+0x1>
    374c:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <twi_onSlaveReceive>
    3750:	08 95       	ret

00003752 <twi_attachSlaveTxEvent>:
    3752:	90 93 52 03 	sts	0x0352, r25	; 0x800352 <twi_onSlaveTransmit+0x1>
    3756:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <twi_onSlaveTransmit>
    375a:	08 95       	ret

0000375c <twi_releaseBus>:
    375c:	85 ec       	ldi	r24, 0xC5	; 197
    375e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3762:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <twi_state>
    3766:	08 95       	ret

00003768 <twi_handleTimeout>:
    3768:	cf 93       	push	r28
    376a:	df 93       	push	r29
    376c:	91 e0       	ldi	r25, 0x01	; 1
    376e:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <twi_timed_out_flag>
    3772:	88 23       	and	r24, r24
    3774:	61 f0       	breq	.+24     	; 0x378e <twi_handleTimeout+0x26>
    3776:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    377a:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    377e:	0e 94 6f 1b 	call	0x36de	; 0x36de <twi_disable>
    3782:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <twi_init>
    3786:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    378a:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    378e:	df 91       	pop	r29
    3790:	cf 91       	pop	r28
    3792:	08 95       	ret

00003794 <twi_readFrom>:
    3794:	4f 92       	push	r4
    3796:	5f 92       	push	r5
    3798:	6f 92       	push	r6
    379a:	7f 92       	push	r7
    379c:	8f 92       	push	r8
    379e:	9f 92       	push	r9
    37a0:	af 92       	push	r10
    37a2:	bf 92       	push	r11
    37a4:	cf 92       	push	r12
    37a6:	df 92       	push	r13
    37a8:	ef 92       	push	r14
    37aa:	ff 92       	push	r15
    37ac:	0f 93       	push	r16
    37ae:	1f 93       	push	r17
    37b0:	cf 93       	push	r28
    37b2:	df 93       	push	r29
    37b4:	f8 2e       	mov	r15, r24
    37b6:	16 2f       	mov	r17, r22
    37b8:	07 2f       	mov	r16, r23
    37ba:	c4 2f       	mov	r28, r20
    37bc:	e2 2e       	mov	r14, r18
    37be:	41 32       	cpi	r20, 0x21	; 33
    37c0:	08 f0       	brcs	.+2      	; 0x37c4 <twi_readFrom+0x30>
    37c2:	be c0       	rjmp	.+380    	; 0x3940 <twi_readFrom+0x1ac>
    37c4:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <micros>
    37c8:	4b 01       	movw	r8, r22
    37ca:	5c 01       	movw	r10, r24
    37cc:	d0 91 5c 03 	lds	r29, 0x035C	; 0x80035c <twi_state>
    37d0:	dd 23       	and	r29, r29
    37d2:	31 f1       	breq	.+76     	; 0x3820 <twi_readFrom+0x8c>
    37d4:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <twi_timeout_us>
    37d8:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <twi_timeout_us+0x1>
    37dc:	a0 91 57 03 	lds	r26, 0x0357	; 0x800357 <twi_timeout_us+0x2>
    37e0:	b0 91 58 03 	lds	r27, 0x0358	; 0x800358 <twi_timeout_us+0x3>
    37e4:	89 2b       	or	r24, r25
    37e6:	8a 2b       	or	r24, r26
    37e8:	8b 2b       	or	r24, r27
    37ea:	81 f3       	breq	.-32     	; 0x37cc <twi_readFrom+0x38>
    37ec:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <micros>
    37f0:	40 90 55 03 	lds	r4, 0x0355	; 0x800355 <twi_timeout_us>
    37f4:	50 90 56 03 	lds	r5, 0x0356	; 0x800356 <twi_timeout_us+0x1>
    37f8:	60 90 57 03 	lds	r6, 0x0357	; 0x800357 <twi_timeout_us+0x2>
    37fc:	70 90 58 03 	lds	r7, 0x0358	; 0x800358 <twi_timeout_us+0x3>
    3800:	dc 01       	movw	r26, r24
    3802:	cb 01       	movw	r24, r22
    3804:	88 19       	sub	r24, r8
    3806:	99 09       	sbc	r25, r9
    3808:	aa 09       	sbc	r26, r10
    380a:	bb 09       	sbc	r27, r11
    380c:	48 16       	cp	r4, r24
    380e:	59 06       	cpc	r5, r25
    3810:	6a 06       	cpc	r6, r26
    3812:	7b 06       	cpc	r7, r27
    3814:	d8 f6       	brcc	.-74     	; 0x37cc <twi_readFrom+0x38>
    3816:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <twi_do_reset_on_timeout>
    381a:	0e 94 b4 1b 	call	0x3768	; 0x3768 <twi_handleTimeout>
    381e:	90 c0       	rjmp	.+288    	; 0x3940 <twi_readFrom+0x1ac>
    3820:	81 e0       	ldi	r24, 0x01	; 1
    3822:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <twi_state>
    3826:	e0 92 5a 03 	sts	0x035A, r14	; 0x80035a <twi_sendStop>
    382a:	9f ef       	ldi	r25, 0xFF	; 255
    382c:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <twi_error>
    3830:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <twi_masterBufferIndex>
    3834:	9c 0f       	add	r25, r28
    3836:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <twi_masterBufferLength>
    383a:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <twi_slarw>
    383e:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <twi_slarw>
    3842:	8f 2d       	mov	r24, r15
    3844:	88 0f       	add	r24, r24
    3846:	89 2b       	or	r24, r25
    3848:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <twi_slarw>
    384c:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <twi_inRepStart>
    3850:	81 30       	cpi	r24, 0x01	; 1
    3852:	89 f5       	brne	.+98     	; 0x38b6 <twi_readFrom+0x122>
    3854:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <twi_inRepStart>
    3858:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <micros>
    385c:	6b 01       	movw	r12, r22
    385e:	7c 01       	movw	r14, r24
    3860:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <twi_slarw>
    3864:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    3868:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <twi_timeout_us>
    386c:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <twi_timeout_us+0x1>
    3870:	a0 91 57 03 	lds	r26, 0x0357	; 0x800357 <twi_timeout_us+0x2>
    3874:	b0 91 58 03 	lds	r27, 0x0358	; 0x800358 <twi_timeout_us+0x3>
    3878:	89 2b       	or	r24, r25
    387a:	8a 2b       	or	r24, r26
    387c:	8b 2b       	or	r24, r27
    387e:	a9 f0       	breq	.+42     	; 0x38aa <twi_readFrom+0x116>
    3880:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <micros>
    3884:	80 90 55 03 	lds	r8, 0x0355	; 0x800355 <twi_timeout_us>
    3888:	90 90 56 03 	lds	r9, 0x0356	; 0x800356 <twi_timeout_us+0x1>
    388c:	a0 90 57 03 	lds	r10, 0x0357	; 0x800357 <twi_timeout_us+0x2>
    3890:	b0 90 58 03 	lds	r11, 0x0358	; 0x800358 <twi_timeout_us+0x3>
    3894:	dc 01       	movw	r26, r24
    3896:	cb 01       	movw	r24, r22
    3898:	8c 19       	sub	r24, r12
    389a:	9d 09       	sbc	r25, r13
    389c:	ae 09       	sbc	r26, r14
    389e:	bf 09       	sbc	r27, r15
    38a0:	88 16       	cp	r8, r24
    38a2:	99 06       	cpc	r9, r25
    38a4:	aa 06       	cpc	r10, r26
    38a6:	bb 06       	cpc	r11, r27
    38a8:	90 f1       	brcs	.+100    	; 0x390e <twi_readFrom+0x17a>
    38aa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    38ae:	83 fd       	sbrc	r24, 3
    38b0:	d7 cf       	rjmp	.-82     	; 0x3860 <twi_readFrom+0xcc>
    38b2:	85 ec       	ldi	r24, 0xC5	; 197
    38b4:	01 c0       	rjmp	.+2      	; 0x38b8 <twi_readFrom+0x124>
    38b6:	85 ee       	ldi	r24, 0xE5	; 229
    38b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    38bc:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <micros>
    38c0:	6b 01       	movw	r12, r22
    38c2:	7c 01       	movw	r14, r24
    38c4:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <twi_state>
    38c8:	81 30       	cpi	r24, 0x01	; 1
    38ca:	31 f5       	brne	.+76     	; 0x3918 <twi_readFrom+0x184>
    38cc:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <twi_timeout_us>
    38d0:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <twi_timeout_us+0x1>
    38d4:	a0 91 57 03 	lds	r26, 0x0357	; 0x800357 <twi_timeout_us+0x2>
    38d8:	b0 91 58 03 	lds	r27, 0x0358	; 0x800358 <twi_timeout_us+0x3>
    38dc:	89 2b       	or	r24, r25
    38de:	8a 2b       	or	r24, r26
    38e0:	8b 2b       	or	r24, r27
    38e2:	81 f3       	breq	.-32     	; 0x38c4 <twi_readFrom+0x130>
    38e4:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <micros>
    38e8:	80 90 55 03 	lds	r8, 0x0355	; 0x800355 <twi_timeout_us>
    38ec:	90 90 56 03 	lds	r9, 0x0356	; 0x800356 <twi_timeout_us+0x1>
    38f0:	a0 90 57 03 	lds	r10, 0x0357	; 0x800357 <twi_timeout_us+0x2>
    38f4:	b0 90 58 03 	lds	r11, 0x0358	; 0x800358 <twi_timeout_us+0x3>
    38f8:	dc 01       	movw	r26, r24
    38fa:	cb 01       	movw	r24, r22
    38fc:	8c 19       	sub	r24, r12
    38fe:	9d 09       	sbc	r25, r13
    3900:	ae 09       	sbc	r26, r14
    3902:	bf 09       	sbc	r27, r15
    3904:	88 16       	cp	r8, r24
    3906:	99 06       	cpc	r9, r25
    3908:	aa 06       	cpc	r10, r26
    390a:	bb 06       	cpc	r11, r27
    390c:	d8 f6       	brcc	.-74     	; 0x38c4 <twi_readFrom+0x130>
    390e:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <twi_do_reset_on_timeout>
    3912:	0e 94 b4 1b 	call	0x3768	; 0x3768 <twi_handleTimeout>
    3916:	15 c0       	rjmp	.+42     	; 0x3942 <twi_readFrom+0x1ae>
    3918:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <twi_masterBufferIndex>
    391c:	8c 17       	cp	r24, r28
    391e:	10 f4       	brcc	.+4      	; 0x3924 <twi_readFrom+0x190>
    3920:	c0 91 2e 03 	lds	r28, 0x032E	; 0x80032e <twi_masterBufferIndex>
    3924:	af e2       	ldi	r26, 0x2F	; 47
    3926:	b3 e0       	ldi	r27, 0x03	; 3
    3928:	91 2f       	mov	r25, r17
    392a:	e1 2f       	mov	r30, r17
    392c:	f0 2f       	mov	r31, r16
    392e:	8e 2f       	mov	r24, r30
    3930:	89 1b       	sub	r24, r25
    3932:	8c 17       	cp	r24, r28
    3934:	18 f4       	brcc	.+6      	; 0x393c <twi_readFrom+0x1a8>
    3936:	8d 91       	ld	r24, X+
    3938:	81 93       	st	Z+, r24
    393a:	f9 cf       	rjmp	.-14     	; 0x392e <twi_readFrom+0x19a>
    393c:	dc 2f       	mov	r29, r28
    393e:	01 c0       	rjmp	.+2      	; 0x3942 <twi_readFrom+0x1ae>
    3940:	d0 e0       	ldi	r29, 0x00	; 0
    3942:	8d 2f       	mov	r24, r29
    3944:	df 91       	pop	r29
    3946:	cf 91       	pop	r28
    3948:	1f 91       	pop	r17
    394a:	0f 91       	pop	r16
    394c:	ff 90       	pop	r15
    394e:	ef 90       	pop	r14
    3950:	df 90       	pop	r13
    3952:	cf 90       	pop	r12
    3954:	bf 90       	pop	r11
    3956:	af 90       	pop	r10
    3958:	9f 90       	pop	r9
    395a:	8f 90       	pop	r8
    395c:	7f 90       	pop	r7
    395e:	6f 90       	pop	r6
    3960:	5f 90       	pop	r5
    3962:	4f 90       	pop	r4
    3964:	08 95       	ret

00003966 <twi_writeTo>:
    3966:	4f 92       	push	r4
    3968:	5f 92       	push	r5
    396a:	6f 92       	push	r6
    396c:	7f 92       	push	r7
    396e:	8f 92       	push	r8
    3970:	9f 92       	push	r9
    3972:	af 92       	push	r10
    3974:	bf 92       	push	r11
    3976:	cf 92       	push	r12
    3978:	df 92       	push	r13
    397a:	ef 92       	push	r14
    397c:	ff 92       	push	r15
    397e:	0f 93       	push	r16
    3980:	1f 93       	push	r17
    3982:	cf 93       	push	r28
    3984:	df 93       	push	r29
    3986:	41 32       	cpi	r20, 0x21	; 33
    3988:	08 f0       	brcs	.+2      	; 0x398c <twi_writeTo+0x26>
    398a:	c6 c0       	rjmp	.+396    	; 0x3b18 <twi_writeTo+0x1b2>
    398c:	12 2f       	mov	r17, r18
    398e:	f4 2e       	mov	r15, r20
    3990:	d7 2e       	mov	r13, r23
    3992:	e6 2e       	mov	r14, r22
    3994:	d8 2f       	mov	r29, r24
    3996:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <micros>
    399a:	4b 01       	movw	r8, r22
    399c:	5c 01       	movw	r10, r24
    399e:	c0 91 5c 03 	lds	r28, 0x035C	; 0x80035c <twi_state>
    39a2:	cc 23       	and	r28, r28
    39a4:	11 f1       	breq	.+68     	; 0x39ea <twi_writeTo+0x84>
    39a6:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <twi_timeout_us>
    39aa:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <twi_timeout_us+0x1>
    39ae:	a0 91 57 03 	lds	r26, 0x0357	; 0x800357 <twi_timeout_us+0x2>
    39b2:	b0 91 58 03 	lds	r27, 0x0358	; 0x800358 <twi_timeout_us+0x3>
    39b6:	89 2b       	or	r24, r25
    39b8:	8a 2b       	or	r24, r26
    39ba:	8b 2b       	or	r24, r27
    39bc:	81 f3       	breq	.-32     	; 0x399e <twi_writeTo+0x38>
    39be:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <micros>
    39c2:	40 90 55 03 	lds	r4, 0x0355	; 0x800355 <twi_timeout_us>
    39c6:	50 90 56 03 	lds	r5, 0x0356	; 0x800356 <twi_timeout_us+0x1>
    39ca:	60 90 57 03 	lds	r6, 0x0357	; 0x800357 <twi_timeout_us+0x2>
    39ce:	70 90 58 03 	lds	r7, 0x0358	; 0x800358 <twi_timeout_us+0x3>
    39d2:	dc 01       	movw	r26, r24
    39d4:	cb 01       	movw	r24, r22
    39d6:	88 19       	sub	r24, r8
    39d8:	99 09       	sbc	r25, r9
    39da:	aa 09       	sbc	r26, r10
    39dc:	bb 09       	sbc	r27, r11
    39de:	48 16       	cp	r4, r24
    39e0:	59 06       	cpc	r5, r25
    39e2:	6a 06       	cpc	r6, r26
    39e4:	7b 06       	cpc	r7, r27
    39e6:	d8 f6       	brcc	.-74     	; 0x399e <twi_writeTo+0x38>
    39e8:	83 c0       	rjmp	.+262    	; 0x3af0 <twi_writeTo+0x18a>
    39ea:	82 e0       	ldi	r24, 0x02	; 2
    39ec:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <twi_state>
    39f0:	00 93 5a 03 	sts	0x035A, r16	; 0x80035a <twi_sendStop>
    39f4:	8f ef       	ldi	r24, 0xFF	; 255
    39f6:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <twi_error>
    39fa:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <twi_masterBufferIndex>
    39fe:	f0 92 2d 03 	sts	0x032D, r15	; 0x80032d <twi_masterBufferLength>
    3a02:	9e 2d       	mov	r25, r14
    3a04:	af e2       	ldi	r26, 0x2F	; 47
    3a06:	b3 e0       	ldi	r27, 0x03	; 3
    3a08:	ee 2d       	mov	r30, r14
    3a0a:	fd 2d       	mov	r31, r13
    3a0c:	8e 2f       	mov	r24, r30
    3a0e:	89 1b       	sub	r24, r25
    3a10:	8f 15       	cp	r24, r15
    3a12:	18 f4       	brcc	.+6      	; 0x3a1a <twi_writeTo+0xb4>
    3a14:	81 91       	ld	r24, Z+
    3a16:	8d 93       	st	X+, r24
    3a18:	f9 cf       	rjmp	.-14     	; 0x3a0c <twi_writeTo+0xa6>
    3a1a:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <twi_slarw>
    3a1e:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <twi_slarw>
    3a22:	dd 0f       	add	r29, r29
    3a24:	d9 2b       	or	r29, r25
    3a26:	d0 93 5b 03 	sts	0x035B, r29	; 0x80035b <twi_slarw>
    3a2a:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <twi_inRepStart>
    3a2e:	81 30       	cpi	r24, 0x01	; 1
    3a30:	89 f5       	brne	.+98     	; 0x3a94 <twi_writeTo+0x12e>
    3a32:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <twi_inRepStart>
    3a36:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <micros>
    3a3a:	6b 01       	movw	r12, r22
    3a3c:	7c 01       	movw	r14, r24
    3a3e:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <twi_slarw>
    3a42:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    3a46:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <twi_timeout_us>
    3a4a:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <twi_timeout_us+0x1>
    3a4e:	a0 91 57 03 	lds	r26, 0x0357	; 0x800357 <twi_timeout_us+0x2>
    3a52:	b0 91 58 03 	lds	r27, 0x0358	; 0x800358 <twi_timeout_us+0x3>
    3a56:	89 2b       	or	r24, r25
    3a58:	8a 2b       	or	r24, r26
    3a5a:	8b 2b       	or	r24, r27
    3a5c:	a9 f0       	breq	.+42     	; 0x3a88 <twi_writeTo+0x122>
    3a5e:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <micros>
    3a62:	80 90 55 03 	lds	r8, 0x0355	; 0x800355 <twi_timeout_us>
    3a66:	90 90 56 03 	lds	r9, 0x0356	; 0x800356 <twi_timeout_us+0x1>
    3a6a:	a0 90 57 03 	lds	r10, 0x0357	; 0x800357 <twi_timeout_us+0x2>
    3a6e:	b0 90 58 03 	lds	r11, 0x0358	; 0x800358 <twi_timeout_us+0x3>
    3a72:	dc 01       	movw	r26, r24
    3a74:	cb 01       	movw	r24, r22
    3a76:	8c 19       	sub	r24, r12
    3a78:	9d 09       	sbc	r25, r13
    3a7a:	ae 09       	sbc	r26, r14
    3a7c:	bf 09       	sbc	r27, r15
    3a7e:	88 16       	cp	r8, r24
    3a80:	99 06       	cpc	r9, r25
    3a82:	aa 06       	cpc	r10, r26
    3a84:	bb 06       	cpc	r11, r27
    3a86:	a0 f1       	brcs	.+104    	; 0x3af0 <twi_writeTo+0x18a>
    3a88:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3a8c:	83 fd       	sbrc	r24, 3
    3a8e:	d7 cf       	rjmp	.-82     	; 0x3a3e <twi_writeTo+0xd8>
    3a90:	85 ec       	ldi	r24, 0xC5	; 197
    3a92:	01 c0       	rjmp	.+2      	; 0x3a96 <twi_writeTo+0x130>
    3a94:	85 ee       	ldi	r24, 0xE5	; 229
    3a96:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3a9a:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <micros>
    3a9e:	6b 01       	movw	r12, r22
    3aa0:	7c 01       	movw	r14, r24
    3aa2:	11 23       	and	r17, r17
    3aa4:	59 f1       	breq	.+86     	; 0x3afc <twi_writeTo+0x196>
    3aa6:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <twi_state>
    3aaa:	82 30       	cpi	r24, 0x02	; 2
    3aac:	39 f5       	brne	.+78     	; 0x3afc <twi_writeTo+0x196>
    3aae:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <twi_timeout_us>
    3ab2:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <twi_timeout_us+0x1>
    3ab6:	a0 91 57 03 	lds	r26, 0x0357	; 0x800357 <twi_timeout_us+0x2>
    3aba:	b0 91 58 03 	lds	r27, 0x0358	; 0x800358 <twi_timeout_us+0x3>
    3abe:	89 2b       	or	r24, r25
    3ac0:	8a 2b       	or	r24, r26
    3ac2:	8b 2b       	or	r24, r27
    3ac4:	71 f3       	breq	.-36     	; 0x3aa2 <twi_writeTo+0x13c>
    3ac6:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <micros>
    3aca:	80 90 55 03 	lds	r8, 0x0355	; 0x800355 <twi_timeout_us>
    3ace:	90 90 56 03 	lds	r9, 0x0356	; 0x800356 <twi_timeout_us+0x1>
    3ad2:	a0 90 57 03 	lds	r10, 0x0357	; 0x800357 <twi_timeout_us+0x2>
    3ad6:	b0 90 58 03 	lds	r11, 0x0358	; 0x800358 <twi_timeout_us+0x3>
    3ada:	dc 01       	movw	r26, r24
    3adc:	cb 01       	movw	r24, r22
    3ade:	8c 19       	sub	r24, r12
    3ae0:	9d 09       	sbc	r25, r13
    3ae2:	ae 09       	sbc	r26, r14
    3ae4:	bf 09       	sbc	r27, r15
    3ae6:	88 16       	cp	r8, r24
    3ae8:	99 06       	cpc	r9, r25
    3aea:	aa 06       	cpc	r10, r26
    3aec:	bb 06       	cpc	r11, r27
    3aee:	c8 f6       	brcc	.-78     	; 0x3aa2 <twi_writeTo+0x13c>
    3af0:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <twi_do_reset_on_timeout>
    3af4:	0e 94 b4 1b 	call	0x3768	; 0x3768 <twi_handleTimeout>
    3af8:	c5 e0       	ldi	r28, 0x05	; 5
    3afa:	13 c0       	rjmp	.+38     	; 0x3b22 <twi_writeTo+0x1bc>
    3afc:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <twi_error>
    3b00:	8f 3f       	cpi	r24, 0xFF	; 255
    3b02:	79 f0       	breq	.+30     	; 0x3b22 <twi_writeTo+0x1bc>
    3b04:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <twi_error>
    3b08:	80 32       	cpi	r24, 0x20	; 32
    3b0a:	41 f0       	breq	.+16     	; 0x3b1c <twi_writeTo+0x1b6>
    3b0c:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <twi_error>
    3b10:	80 33       	cpi	r24, 0x30	; 48
    3b12:	31 f0       	breq	.+12     	; 0x3b20 <twi_writeTo+0x1ba>
    3b14:	c4 e0       	ldi	r28, 0x04	; 4
    3b16:	05 c0       	rjmp	.+10     	; 0x3b22 <twi_writeTo+0x1bc>
    3b18:	c1 e0       	ldi	r28, 0x01	; 1
    3b1a:	03 c0       	rjmp	.+6      	; 0x3b22 <twi_writeTo+0x1bc>
    3b1c:	c2 e0       	ldi	r28, 0x02	; 2
    3b1e:	01 c0       	rjmp	.+2      	; 0x3b22 <twi_writeTo+0x1bc>
    3b20:	c3 e0       	ldi	r28, 0x03	; 3
    3b22:	8c 2f       	mov	r24, r28
    3b24:	df 91       	pop	r29
    3b26:	cf 91       	pop	r28
    3b28:	1f 91       	pop	r17
    3b2a:	0f 91       	pop	r16
    3b2c:	ff 90       	pop	r15
    3b2e:	ef 90       	pop	r14
    3b30:	df 90       	pop	r13
    3b32:	cf 90       	pop	r12
    3b34:	bf 90       	pop	r11
    3b36:	af 90       	pop	r10
    3b38:	9f 90       	pop	r9
    3b3a:	8f 90       	pop	r8
    3b3c:	7f 90       	pop	r7
    3b3e:	6f 90       	pop	r6
    3b40:	5f 90       	pop	r5
    3b42:	4f 90       	pop	r4
    3b44:	08 95       	ret

00003b46 <twi_stop>:
    3b46:	85 ed       	ldi	r24, 0xD5	; 213
    3b48:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3b4c:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <twi_timeout_us>
    3b50:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <twi_timeout_us+0x1>
    3b54:	a0 91 57 03 	lds	r26, 0x0357	; 0x800357 <twi_timeout_us+0x2>
    3b58:	b0 91 58 03 	lds	r27, 0x0358	; 0x800358 <twi_timeout_us+0x3>
    3b5c:	07 96       	adiw	r24, 0x07	; 7
    3b5e:	a1 1d       	adc	r26, r1
    3b60:	b1 1d       	adc	r27, r1
    3b62:	23 e0       	ldi	r18, 0x03	; 3
    3b64:	b6 95       	lsr	r27
    3b66:	a7 95       	ror	r26
    3b68:	97 95       	ror	r25
    3b6a:	87 95       	ror	r24
    3b6c:	2a 95       	dec	r18
    3b6e:	d1 f7       	brne	.-12     	; 0x3b64 <twi_stop+0x1e>
    3b70:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3b74:	24 ff       	sbrs	r18, 4
    3b76:	1c c0       	rjmp	.+56     	; 0x3bb0 <twi_stop+0x6a>
    3b78:	40 91 55 03 	lds	r20, 0x0355	; 0x800355 <twi_timeout_us>
    3b7c:	50 91 56 03 	lds	r21, 0x0356	; 0x800356 <twi_timeout_us+0x1>
    3b80:	60 91 57 03 	lds	r22, 0x0357	; 0x800357 <twi_timeout_us+0x2>
    3b84:	70 91 58 03 	lds	r23, 0x0358	; 0x800358 <twi_timeout_us+0x3>
    3b88:	45 2b       	or	r20, r21
    3b8a:	46 2b       	or	r20, r22
    3b8c:	47 2b       	or	r20, r23
    3b8e:	81 f3       	breq	.-32     	; 0x3b70 <twi_stop+0x2a>
    3b90:	00 97       	sbiw	r24, 0x00	; 0
    3b92:	a1 05       	cpc	r26, r1
    3b94:	b1 05       	cpc	r27, r1
    3b96:	41 f0       	breq	.+16     	; 0x3ba8 <twi_stop+0x62>
    3b98:	25 e3       	ldi	r18, 0x35	; 53
    3b9a:	2a 95       	dec	r18
    3b9c:	f1 f7       	brne	.-4      	; 0x3b9a <twi_stop+0x54>
    3b9e:	00 00       	nop
    3ba0:	01 97       	sbiw	r24, 0x01	; 1
    3ba2:	a1 09       	sbc	r26, r1
    3ba4:	b1 09       	sbc	r27, r1
    3ba6:	e4 cf       	rjmp	.-56     	; 0x3b70 <twi_stop+0x2a>
    3ba8:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <twi_do_reset_on_timeout>
    3bac:	0c 94 b4 1b 	jmp	0x3768	; 0x3768 <twi_handleTimeout>
    3bb0:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <twi_state>
    3bb4:	08 95       	ret

00003bb6 <__vector_24>:

ISR(TWI_vect)
{
    3bb6:	1f 92       	push	r1
    3bb8:	0f 92       	push	r0
    3bba:	0f b6       	in	r0, 0x3f	; 63
    3bbc:	0f 92       	push	r0
    3bbe:	11 24       	eor	r1, r1
    3bc0:	2f 93       	push	r18
    3bc2:	3f 93       	push	r19
    3bc4:	4f 93       	push	r20
    3bc6:	5f 93       	push	r21
    3bc8:	6f 93       	push	r22
    3bca:	7f 93       	push	r23
    3bcc:	8f 93       	push	r24
    3bce:	9f 93       	push	r25
    3bd0:	af 93       	push	r26
    3bd2:	bf 93       	push	r27
    3bd4:	ef 93       	push	r30
    3bd6:	ff 93       	push	r31
  switch(TW_STATUS){
    3bd8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    3bdc:	88 7f       	andi	r24, 0xF8	; 248
    3bde:	80 36       	cpi	r24, 0x60	; 96
    3be0:	09 f4       	brne	.+2      	; 0x3be4 <__vector_24+0x2e>
    3be2:	9e c0       	rjmp	.+316    	; 0x3d20 <__vector_24+0x16a>
    3be4:	78 f5       	brcc	.+94     	; 0x3c44 <__vector_24+0x8e>
    3be6:	88 32       	cpi	r24, 0x28	; 40
    3be8:	09 f4       	brne	.+2      	; 0x3bec <__vector_24+0x36>
    3bea:	5d c0       	rjmp	.+186    	; 0x3ca6 <__vector_24+0xf0>
    3bec:	90 f4       	brcc	.+36     	; 0x3c12 <__vector_24+0x5c>
    3bee:	80 31       	cpi	r24, 0x10	; 16
    3bf0:	09 f4       	brne	.+2      	; 0x3bf4 <__vector_24+0x3e>
    3bf2:	56 c0       	rjmp	.+172    	; 0x3ca0 <__vector_24+0xea>
    3bf4:	38 f4       	brcc	.+14     	; 0x3c04 <__vector_24+0x4e>
    3bf6:	88 23       	and	r24, r24
    3bf8:	09 f4       	brne	.+2      	; 0x3bfc <__vector_24+0x46>
    3bfa:	f5 c0       	rjmp	.+490    	; 0x3de6 <__vector_24+0x230>
    3bfc:	88 30       	cpi	r24, 0x08	; 8
    3bfe:	09 f4       	brne	.+2      	; 0x3c02 <__vector_24+0x4c>
    3c00:	4f c0       	rjmp	.+158    	; 0x3ca0 <__vector_24+0xea>
    3c02:	f5 c0       	rjmp	.+490    	; 0x3dee <__vector_24+0x238>
    3c04:	88 31       	cpi	r24, 0x18	; 24
    3c06:	09 f4       	brne	.+2      	; 0x3c0a <__vector_24+0x54>
    3c08:	4e c0       	rjmp	.+156    	; 0x3ca6 <__vector_24+0xf0>
    3c0a:	80 32       	cpi	r24, 0x20	; 32
    3c0c:	09 f4       	brne	.+2      	; 0x3c10 <__vector_24+0x5a>
    3c0e:	5f c0       	rjmp	.+190    	; 0x3cce <__vector_24+0x118>
    3c10:	ee c0       	rjmp	.+476    	; 0x3dee <__vector_24+0x238>
    3c12:	80 34       	cpi	r24, 0x40	; 64
    3c14:	09 f4       	brne	.+2      	; 0x3c18 <__vector_24+0x62>
    3c16:	6a c0       	rjmp	.+212    	; 0x3cec <__vector_24+0x136>
    3c18:	58 f4       	brcc	.+22     	; 0x3c30 <__vector_24+0x7a>
    3c1a:	80 33       	cpi	r24, 0x30	; 48
    3c1c:	09 f4       	brne	.+2      	; 0x3c20 <__vector_24+0x6a>
    3c1e:	57 c0       	rjmp	.+174    	; 0x3cce <__vector_24+0x118>
    3c20:	88 33       	cpi	r24, 0x38	; 56
    3c22:	09 f0       	breq	.+2      	; 0x3c26 <__vector_24+0x70>
    3c24:	e4 c0       	rjmp	.+456    	; 0x3dee <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    3c26:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <twi_error>
      twi_releaseBus();
    3c2a:	0e 94 ae 1b 	call	0x375c	; 0x375c <twi_releaseBus>
      break;
    3c2e:	df c0       	rjmp	.+446    	; 0x3dee <__vector_24+0x238>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3c30:	80 35       	cpi	r24, 0x50	; 80
    3c32:	09 f4       	brne	.+2      	; 0x3c36 <__vector_24+0x80>
    3c34:	4f c0       	rjmp	.+158    	; 0x3cd4 <__vector_24+0x11e>
    3c36:	88 35       	cpi	r24, 0x58	; 88
    3c38:	09 f4       	brne	.+2      	; 0x3c3c <__vector_24+0x86>
    3c3a:	5d c0       	rjmp	.+186    	; 0x3cf6 <__vector_24+0x140>
    3c3c:	88 34       	cpi	r24, 0x48	; 72
    3c3e:	09 f0       	breq	.+2      	; 0x3c42 <__vector_24+0x8c>
    3c40:	d6 c0       	rjmp	.+428    	; 0x3dee <__vector_24+0x238>
    3c42:	d3 c0       	rjmp	.+422    	; 0x3dea <__vector_24+0x234>
    3c44:	88 39       	cpi	r24, 0x98	; 152
    3c46:	09 f4       	brne	.+2      	; 0x3c4a <__vector_24+0x94>
    3c48:	c4 c0       	rjmp	.+392    	; 0x3dd2 <__vector_24+0x21c>
    3c4a:	a8 f4       	brcc	.+42     	; 0x3c76 <__vector_24+0xc0>
    3c4c:	88 37       	cpi	r24, 0x78	; 120
    3c4e:	09 f4       	brne	.+2      	; 0x3c52 <__vector_24+0x9c>
    3c50:	67 c0       	rjmp	.+206    	; 0x3d20 <__vector_24+0x16a>
    3c52:	38 f4       	brcc	.+14     	; 0x3c62 <__vector_24+0xac>
    3c54:	88 36       	cpi	r24, 0x68	; 104
    3c56:	09 f4       	brne	.+2      	; 0x3c5a <__vector_24+0xa4>
    3c58:	63 c0       	rjmp	.+198    	; 0x3d20 <__vector_24+0x16a>
    3c5a:	80 37       	cpi	r24, 0x70	; 112
    3c5c:	09 f4       	brne	.+2      	; 0x3c60 <__vector_24+0xaa>
    3c5e:	60 c0       	rjmp	.+192    	; 0x3d20 <__vector_24+0x16a>
    3c60:	c6 c0       	rjmp	.+396    	; 0x3dee <__vector_24+0x238>
    3c62:	88 38       	cpi	r24, 0x88	; 136
    3c64:	09 f4       	brne	.+2      	; 0x3c68 <__vector_24+0xb2>
    3c66:	b5 c0       	rjmp	.+362    	; 0x3dd2 <__vector_24+0x21c>
    3c68:	80 39       	cpi	r24, 0x90	; 144
    3c6a:	09 f4       	brne	.+2      	; 0x3c6e <__vector_24+0xb8>
    3c6c:	5f c0       	rjmp	.+190    	; 0x3d2c <__vector_24+0x176>
    3c6e:	80 38       	cpi	r24, 0x80	; 128
    3c70:	09 f0       	breq	.+2      	; 0x3c74 <__vector_24+0xbe>
    3c72:	bd c0       	rjmp	.+378    	; 0x3dee <__vector_24+0x238>
    3c74:	5b c0       	rjmp	.+182    	; 0x3d2c <__vector_24+0x176>
    3c76:	80 3b       	cpi	r24, 0xB0	; 176
    3c78:	09 f4       	brne	.+2      	; 0x3c7c <__vector_24+0xc6>
    3c7a:	83 c0       	rjmp	.+262    	; 0x3d82 <__vector_24+0x1cc>
    3c7c:	38 f4       	brcc	.+14     	; 0x3c8c <__vector_24+0xd6>
    3c7e:	80 3a       	cpi	r24, 0xA0	; 160
    3c80:	09 f4       	brne	.+2      	; 0x3c84 <__vector_24+0xce>
    3c82:	66 c0       	rjmp	.+204    	; 0x3d50 <__vector_24+0x19a>
    3c84:	88 3a       	cpi	r24, 0xA8	; 168
    3c86:	09 f4       	brne	.+2      	; 0x3c8a <__vector_24+0xd4>
    3c88:	7c c0       	rjmp	.+248    	; 0x3d82 <__vector_24+0x1cc>
    3c8a:	b1 c0       	rjmp	.+354    	; 0x3dee <__vector_24+0x238>
    3c8c:	80 3c       	cpi	r24, 0xC0	; 192
    3c8e:	09 f4       	brne	.+2      	; 0x3c92 <__vector_24+0xdc>
    3c90:	a4 c0       	rjmp	.+328    	; 0x3dda <__vector_24+0x224>
    3c92:	88 3c       	cpi	r24, 0xC8	; 200
    3c94:	09 f4       	brne	.+2      	; 0x3c98 <__vector_24+0xe2>
    3c96:	a1 c0       	rjmp	.+322    	; 0x3dda <__vector_24+0x224>
    3c98:	88 3b       	cpi	r24, 0xB8	; 184
    3c9a:	09 f4       	brne	.+2      	; 0x3c9e <__vector_24+0xe8>
    3c9c:	87 c0       	rjmp	.+270    	; 0x3dac <__vector_24+0x1f6>
    3c9e:	a7 c0       	rjmp	.+334    	; 0x3dee <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3ca0:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <twi_slarw>
    3ca4:	10 c0       	rjmp	.+32     	; 0x3cc6 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3ca6:	90 91 2e 03 	lds	r25, 0x032E	; 0x80032e <twi_masterBufferIndex>
    3caa:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <twi_masterBufferLength>
    3cae:	98 17       	cp	r25, r24
    3cb0:	70 f5       	brcc	.+92     	; 0x3d0e <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3cb2:	e0 91 2e 03 	lds	r30, 0x032E	; 0x80032e <twi_masterBufferIndex>
    3cb6:	81 e0       	ldi	r24, 0x01	; 1
    3cb8:	8e 0f       	add	r24, r30
    3cba:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <twi_masterBufferIndex>
    3cbe:	f0 e0       	ldi	r31, 0x00	; 0
    3cc0:	e1 5d       	subi	r30, 0xD1	; 209
    3cc2:	fc 4f       	sbci	r31, 0xFC	; 252
    3cc4:	80 81       	ld	r24, Z
    3cc6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3cca:	85 ec       	ldi	r24, 0xC5	; 197
    3ccc:	83 c0       	rjmp	.+262    	; 0x3dd4 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3cce:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <twi_error>
    3cd2:	8b c0       	rjmp	.+278    	; 0x3dea <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3cd4:	e0 91 2e 03 	lds	r30, 0x032E	; 0x80032e <twi_masterBufferIndex>
    3cd8:	81 e0       	ldi	r24, 0x01	; 1
    3cda:	8e 0f       	add	r24, r30
    3cdc:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <twi_masterBufferIndex>
    3ce0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    3ce4:	f0 e0       	ldi	r31, 0x00	; 0
    3ce6:	e1 5d       	subi	r30, 0xD1	; 209
    3ce8:	fc 4f       	sbci	r31, 0xFC	; 252
    3cea:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3cec:	90 91 2e 03 	lds	r25, 0x032E	; 0x80032e <twi_masterBufferIndex>
    3cf0:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <twi_masterBufferLength>
    3cf4:	6b c0       	rjmp	.+214    	; 0x3dcc <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3cf6:	e0 91 2e 03 	lds	r30, 0x032E	; 0x80032e <twi_masterBufferIndex>
    3cfa:	81 e0       	ldi	r24, 0x01	; 1
    3cfc:	8e 0f       	add	r24, r30
    3cfe:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <twi_masterBufferIndex>
    3d02:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    3d06:	f0 e0       	ldi	r31, 0x00	; 0
    3d08:	e1 5d       	subi	r30, 0xD1	; 209
    3d0a:	fc 4f       	sbci	r31, 0xFC	; 252
    3d0c:	80 83       	st	Z, r24
      if (twi_sendStop){
    3d0e:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <twi_sendStop>
    3d12:	81 11       	cpse	r24, r1
    3d14:	6a c0       	rjmp	.+212    	; 0x3dea <__vector_24+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    3d16:	81 e0       	ldi	r24, 0x01	; 1
    3d18:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3d1c:	84 ea       	ldi	r24, 0xA4	; 164
    3d1e:	5e c0       	rjmp	.+188    	; 0x3ddc <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3d20:	83 e0       	ldi	r24, 0x03	; 3
    3d22:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    3d26:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <twi_rxBufferIndex>
    3d2a:	cf cf       	rjmp	.-98     	; 0x3cca <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3d2c:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <twi_rxBufferIndex>
    3d30:	80 32       	cpi	r24, 0x20	; 32
    3d32:	08 f0       	brcs	.+2      	; 0x3d36 <__vector_24+0x180>
    3d34:	4e c0       	rjmp	.+156    	; 0x3dd2 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3d36:	e0 91 ea 02 	lds	r30, 0x02EA	; 0x8002ea <twi_rxBufferIndex>
    3d3a:	81 e0       	ldi	r24, 0x01	; 1
    3d3c:	8e 0f       	add	r24, r30
    3d3e:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <twi_rxBufferIndex>
    3d42:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    3d46:	f0 e0       	ldi	r31, 0x00	; 0
    3d48:	e5 51       	subi	r30, 0x15	; 21
    3d4a:	fd 4f       	sbci	r31, 0xFD	; 253
    3d4c:	80 83       	st	Z, r24
    3d4e:	bd cf       	rjmp	.-134    	; 0x3cca <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    3d50:	0e 94 ae 1b 	call	0x375c	; 0x375c <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3d54:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <twi_rxBufferIndex>
    3d58:	80 32       	cpi	r24, 0x20	; 32
    3d5a:	30 f4       	brcc	.+12     	; 0x3d68 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3d5c:	e0 91 ea 02 	lds	r30, 0x02EA	; 0x8002ea <twi_rxBufferIndex>
    3d60:	f0 e0       	ldi	r31, 0x00	; 0
    3d62:	e5 51       	subi	r30, 0x15	; 21
    3d64:	fd 4f       	sbci	r31, 0xFD	; 253
    3d66:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3d68:	60 91 ea 02 	lds	r22, 0x02EA	; 0x8002ea <twi_rxBufferIndex>
    3d6c:	70 e0       	ldi	r23, 0x00	; 0
    3d6e:	e0 91 4f 03 	lds	r30, 0x034F	; 0x80034f <twi_onSlaveReceive>
    3d72:	f0 91 50 03 	lds	r31, 0x0350	; 0x800350 <twi_onSlaveReceive+0x1>
    3d76:	8b ee       	ldi	r24, 0xEB	; 235
    3d78:	92 e0       	ldi	r25, 0x02	; 2
    3d7a:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3d7c:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <twi_rxBufferIndex>
      break;
    3d80:	36 c0       	rjmp	.+108    	; 0x3dee <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3d82:	84 e0       	ldi	r24, 0x04	; 4
    3d84:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3d88:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3d8c:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3d90:	e0 91 51 03 	lds	r30, 0x0351	; 0x800351 <twi_onSlaveTransmit>
    3d94:	f0 91 52 03 	lds	r31, 0x0352	; 0x800352 <twi_onSlaveTransmit+0x1>
    3d98:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3d9a:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <twi_txBufferLength>
    3d9e:	81 11       	cpse	r24, r1
    3da0:	05 c0       	rjmp	.+10     	; 0x3dac <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    3da2:	81 e0       	ldi	r24, 0x01	; 1
    3da4:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    3da8:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3dac:	e0 91 0c 03 	lds	r30, 0x030C	; 0x80030c <twi_txBufferIndex>
    3db0:	81 e0       	ldi	r24, 0x01	; 1
    3db2:	8e 0f       	add	r24, r30
    3db4:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <twi_txBufferIndex>
    3db8:	f0 e0       	ldi	r31, 0x00	; 0
    3dba:	e3 5f       	subi	r30, 0xF3	; 243
    3dbc:	fc 4f       	sbci	r31, 0xFC	; 252
    3dbe:	80 81       	ld	r24, Z
    3dc0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3dc4:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <twi_txBufferIndex>
    3dc8:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <twi_txBufferLength>
    3dcc:	98 17       	cp	r25, r24
    3dce:	08 f4       	brcc	.+2      	; 0x3dd2 <__vector_24+0x21c>
    3dd0:	7c cf       	rjmp	.-264    	; 0x3cca <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3dd2:	85 e8       	ldi	r24, 0x85	; 133
    3dd4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3dd8:	0a c0       	rjmp	.+20     	; 0x3dee <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3dda:	85 ec       	ldi	r24, 0xC5	; 197
    3ddc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3de0:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <twi_state>
      break;
    3de4:	04 c0       	rjmp	.+8      	; 0x3dee <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3de6:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <twi_error>
      twi_stop();
    3dea:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <twi_stop>
      break;
  }
}
    3dee:	ff 91       	pop	r31
    3df0:	ef 91       	pop	r30
    3df2:	bf 91       	pop	r27
    3df4:	af 91       	pop	r26
    3df6:	9f 91       	pop	r25
    3df8:	8f 91       	pop	r24
    3dfa:	7f 91       	pop	r23
    3dfc:	6f 91       	pop	r22
    3dfe:	5f 91       	pop	r21
    3e00:	4f 91       	pop	r20
    3e02:	3f 91       	pop	r19
    3e04:	2f 91       	pop	r18
    3e06:	0f 90       	pop	r0
    3e08:	0f be       	out	0x3f, r0	; 63
    3e0a:	0f 90       	pop	r0
    3e0c:	1f 90       	pop	r1
    3e0e:	18 95       	reti

00003e10 <__unordsf2>:
    3e10:	0e 94 9f 12 	call	0x253e	; 0x253e <__fp_cmp>
    3e14:	88 0b       	sbc	r24, r24
    3e16:	99 0b       	sbc	r25, r25
    3e18:	08 95       	ret

00003e1a <__udivmodsi4>:
    3e1a:	a1 e2       	ldi	r26, 0x21	; 33
    3e1c:	1a 2e       	mov	r1, r26
    3e1e:	aa 1b       	sub	r26, r26
    3e20:	bb 1b       	sub	r27, r27
    3e22:	fd 01       	movw	r30, r26
    3e24:	0d c0       	rjmp	.+26     	; 0x3e40 <__udivmodsi4_ep>

00003e26 <__udivmodsi4_loop>:
    3e26:	aa 1f       	adc	r26, r26
    3e28:	bb 1f       	adc	r27, r27
    3e2a:	ee 1f       	adc	r30, r30
    3e2c:	ff 1f       	adc	r31, r31
    3e2e:	a2 17       	cp	r26, r18
    3e30:	b3 07       	cpc	r27, r19
    3e32:	e4 07       	cpc	r30, r20
    3e34:	f5 07       	cpc	r31, r21
    3e36:	20 f0       	brcs	.+8      	; 0x3e40 <__udivmodsi4_ep>
    3e38:	a2 1b       	sub	r26, r18
    3e3a:	b3 0b       	sbc	r27, r19
    3e3c:	e4 0b       	sbc	r30, r20
    3e3e:	f5 0b       	sbc	r31, r21

00003e40 <__udivmodsi4_ep>:
    3e40:	66 1f       	adc	r22, r22
    3e42:	77 1f       	adc	r23, r23
    3e44:	88 1f       	adc	r24, r24
    3e46:	99 1f       	adc	r25, r25
    3e48:	1a 94       	dec	r1
    3e4a:	69 f7       	brne	.-38     	; 0x3e26 <__udivmodsi4_loop>
    3e4c:	60 95       	com	r22
    3e4e:	70 95       	com	r23
    3e50:	80 95       	com	r24
    3e52:	90 95       	com	r25
    3e54:	9b 01       	movw	r18, r22
    3e56:	ac 01       	movw	r20, r24
    3e58:	bd 01       	movw	r22, r26
    3e5a:	cf 01       	movw	r24, r30
    3e5c:	08 95       	ret

00003e5e <__tablejump2__>:
    3e5e:	ee 0f       	add	r30, r30
    3e60:	ff 1f       	adc	r31, r31
    3e62:	05 90       	lpm	r0, Z+
    3e64:	f4 91       	lpm	r31, Z
    3e66:	e0 2d       	mov	r30, r0
    3e68:	09 94       	ijmp

00003e6a <malloc>:
    3e6a:	0f 93       	push	r16
    3e6c:	1f 93       	push	r17
    3e6e:	cf 93       	push	r28
    3e70:	df 93       	push	r29
    3e72:	82 30       	cpi	r24, 0x02	; 2
    3e74:	91 05       	cpc	r25, r1
    3e76:	10 f4       	brcc	.+4      	; 0x3e7c <malloc+0x12>
    3e78:	82 e0       	ldi	r24, 0x02	; 2
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	e0 91 5f 03 	lds	r30, 0x035F	; 0x80035f <__flp>
    3e80:	f0 91 60 03 	lds	r31, 0x0360	; 0x800360 <__flp+0x1>
    3e84:	20 e0       	ldi	r18, 0x00	; 0
    3e86:	30 e0       	ldi	r19, 0x00	; 0
    3e88:	a0 e0       	ldi	r26, 0x00	; 0
    3e8a:	b0 e0       	ldi	r27, 0x00	; 0
    3e8c:	30 97       	sbiw	r30, 0x00	; 0
    3e8e:	19 f1       	breq	.+70     	; 0x3ed6 <malloc+0x6c>
    3e90:	40 81       	ld	r20, Z
    3e92:	51 81       	ldd	r21, Z+1	; 0x01
    3e94:	02 81       	ldd	r16, Z+2	; 0x02
    3e96:	13 81       	ldd	r17, Z+3	; 0x03
    3e98:	48 17       	cp	r20, r24
    3e9a:	59 07       	cpc	r21, r25
    3e9c:	c8 f0       	brcs	.+50     	; 0x3ed0 <malloc+0x66>
    3e9e:	84 17       	cp	r24, r20
    3ea0:	95 07       	cpc	r25, r21
    3ea2:	69 f4       	brne	.+26     	; 0x3ebe <malloc+0x54>
    3ea4:	10 97       	sbiw	r26, 0x00	; 0
    3ea6:	31 f0       	breq	.+12     	; 0x3eb4 <malloc+0x4a>
    3ea8:	12 96       	adiw	r26, 0x02	; 2
    3eaa:	0c 93       	st	X, r16
    3eac:	12 97       	sbiw	r26, 0x02	; 2
    3eae:	13 96       	adiw	r26, 0x03	; 3
    3eb0:	1c 93       	st	X, r17
    3eb2:	27 c0       	rjmp	.+78     	; 0x3f02 <malloc+0x98>
    3eb4:	00 93 5f 03 	sts	0x035F, r16	; 0x80035f <__flp>
    3eb8:	10 93 60 03 	sts	0x0360, r17	; 0x800360 <__flp+0x1>
    3ebc:	22 c0       	rjmp	.+68     	; 0x3f02 <malloc+0x98>
    3ebe:	21 15       	cp	r18, r1
    3ec0:	31 05       	cpc	r19, r1
    3ec2:	19 f0       	breq	.+6      	; 0x3eca <malloc+0x60>
    3ec4:	42 17       	cp	r20, r18
    3ec6:	53 07       	cpc	r21, r19
    3ec8:	18 f4       	brcc	.+6      	; 0x3ed0 <malloc+0x66>
    3eca:	9a 01       	movw	r18, r20
    3ecc:	bd 01       	movw	r22, r26
    3ece:	ef 01       	movw	r28, r30
    3ed0:	df 01       	movw	r26, r30
    3ed2:	f8 01       	movw	r30, r16
    3ed4:	db cf       	rjmp	.-74     	; 0x3e8c <malloc+0x22>
    3ed6:	21 15       	cp	r18, r1
    3ed8:	31 05       	cpc	r19, r1
    3eda:	f9 f0       	breq	.+62     	; 0x3f1a <malloc+0xb0>
    3edc:	28 1b       	sub	r18, r24
    3ede:	39 0b       	sbc	r19, r25
    3ee0:	24 30       	cpi	r18, 0x04	; 4
    3ee2:	31 05       	cpc	r19, r1
    3ee4:	80 f4       	brcc	.+32     	; 0x3f06 <malloc+0x9c>
    3ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ee8:	9b 81       	ldd	r25, Y+3	; 0x03
    3eea:	61 15       	cp	r22, r1
    3eec:	71 05       	cpc	r23, r1
    3eee:	21 f0       	breq	.+8      	; 0x3ef8 <malloc+0x8e>
    3ef0:	fb 01       	movw	r30, r22
    3ef2:	93 83       	std	Z+3, r25	; 0x03
    3ef4:	82 83       	std	Z+2, r24	; 0x02
    3ef6:	04 c0       	rjmp	.+8      	; 0x3f00 <malloc+0x96>
    3ef8:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <__flp+0x1>
    3efc:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <__flp>
    3f00:	fe 01       	movw	r30, r28
    3f02:	32 96       	adiw	r30, 0x02	; 2
    3f04:	44 c0       	rjmp	.+136    	; 0x3f8e <malloc+0x124>
    3f06:	fe 01       	movw	r30, r28
    3f08:	e2 0f       	add	r30, r18
    3f0a:	f3 1f       	adc	r31, r19
    3f0c:	81 93       	st	Z+, r24
    3f0e:	91 93       	st	Z+, r25
    3f10:	22 50       	subi	r18, 0x02	; 2
    3f12:	31 09       	sbc	r19, r1
    3f14:	39 83       	std	Y+1, r19	; 0x01
    3f16:	28 83       	st	Y, r18
    3f18:	3a c0       	rjmp	.+116    	; 0x3f8e <malloc+0x124>
    3f1a:	20 91 5d 03 	lds	r18, 0x035D	; 0x80035d <__brkval>
    3f1e:	30 91 5e 03 	lds	r19, 0x035E	; 0x80035e <__brkval+0x1>
    3f22:	23 2b       	or	r18, r19
    3f24:	41 f4       	brne	.+16     	; 0x3f36 <malloc+0xcc>
    3f26:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3f2a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3f2e:	30 93 5e 03 	sts	0x035E, r19	; 0x80035e <__brkval+0x1>
    3f32:	20 93 5d 03 	sts	0x035D, r18	; 0x80035d <__brkval>
    3f36:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3f3a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3f3e:	21 15       	cp	r18, r1
    3f40:	31 05       	cpc	r19, r1
    3f42:	41 f4       	brne	.+16     	; 0x3f54 <malloc+0xea>
    3f44:	2d b7       	in	r18, 0x3d	; 61
    3f46:	3e b7       	in	r19, 0x3e	; 62
    3f48:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3f4c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3f50:	24 1b       	sub	r18, r20
    3f52:	35 0b       	sbc	r19, r21
    3f54:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <__brkval>
    3f58:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <__brkval+0x1>
    3f5c:	e2 17       	cp	r30, r18
    3f5e:	f3 07       	cpc	r31, r19
    3f60:	a0 f4       	brcc	.+40     	; 0x3f8a <malloc+0x120>
    3f62:	2e 1b       	sub	r18, r30
    3f64:	3f 0b       	sbc	r19, r31
    3f66:	28 17       	cp	r18, r24
    3f68:	39 07       	cpc	r19, r25
    3f6a:	78 f0       	brcs	.+30     	; 0x3f8a <malloc+0x120>
    3f6c:	ac 01       	movw	r20, r24
    3f6e:	4e 5f       	subi	r20, 0xFE	; 254
    3f70:	5f 4f       	sbci	r21, 0xFF	; 255
    3f72:	24 17       	cp	r18, r20
    3f74:	35 07       	cpc	r19, r21
    3f76:	48 f0       	brcs	.+18     	; 0x3f8a <malloc+0x120>
    3f78:	4e 0f       	add	r20, r30
    3f7a:	5f 1f       	adc	r21, r31
    3f7c:	50 93 5e 03 	sts	0x035E, r21	; 0x80035e <__brkval+0x1>
    3f80:	40 93 5d 03 	sts	0x035D, r20	; 0x80035d <__brkval>
    3f84:	81 93       	st	Z+, r24
    3f86:	91 93       	st	Z+, r25
    3f88:	02 c0       	rjmp	.+4      	; 0x3f8e <malloc+0x124>
    3f8a:	e0 e0       	ldi	r30, 0x00	; 0
    3f8c:	f0 e0       	ldi	r31, 0x00	; 0
    3f8e:	cf 01       	movw	r24, r30
    3f90:	df 91       	pop	r29
    3f92:	cf 91       	pop	r28
    3f94:	1f 91       	pop	r17
    3f96:	0f 91       	pop	r16
    3f98:	08 95       	ret

00003f9a <free>:
    3f9a:	cf 93       	push	r28
    3f9c:	df 93       	push	r29
    3f9e:	00 97       	sbiw	r24, 0x00	; 0
    3fa0:	09 f4       	brne	.+2      	; 0x3fa4 <free+0xa>
    3fa2:	81 c0       	rjmp	.+258    	; 0x40a6 <free+0x10c>
    3fa4:	fc 01       	movw	r30, r24
    3fa6:	32 97       	sbiw	r30, 0x02	; 2
    3fa8:	13 82       	std	Z+3, r1	; 0x03
    3faa:	12 82       	std	Z+2, r1	; 0x02
    3fac:	a0 91 5f 03 	lds	r26, 0x035F	; 0x80035f <__flp>
    3fb0:	b0 91 60 03 	lds	r27, 0x0360	; 0x800360 <__flp+0x1>
    3fb4:	10 97       	sbiw	r26, 0x00	; 0
    3fb6:	81 f4       	brne	.+32     	; 0x3fd8 <free+0x3e>
    3fb8:	20 81       	ld	r18, Z
    3fba:	31 81       	ldd	r19, Z+1	; 0x01
    3fbc:	82 0f       	add	r24, r18
    3fbe:	93 1f       	adc	r25, r19
    3fc0:	20 91 5d 03 	lds	r18, 0x035D	; 0x80035d <__brkval>
    3fc4:	30 91 5e 03 	lds	r19, 0x035E	; 0x80035e <__brkval+0x1>
    3fc8:	28 17       	cp	r18, r24
    3fca:	39 07       	cpc	r19, r25
    3fcc:	51 f5       	brne	.+84     	; 0x4022 <free+0x88>
    3fce:	f0 93 5e 03 	sts	0x035E, r31	; 0x80035e <__brkval+0x1>
    3fd2:	e0 93 5d 03 	sts	0x035D, r30	; 0x80035d <__brkval>
    3fd6:	67 c0       	rjmp	.+206    	; 0x40a6 <free+0x10c>
    3fd8:	ed 01       	movw	r28, r26
    3fda:	20 e0       	ldi	r18, 0x00	; 0
    3fdc:	30 e0       	ldi	r19, 0x00	; 0
    3fde:	ce 17       	cp	r28, r30
    3fe0:	df 07       	cpc	r29, r31
    3fe2:	40 f4       	brcc	.+16     	; 0x3ff4 <free+0x5a>
    3fe4:	4a 81       	ldd	r20, Y+2	; 0x02
    3fe6:	5b 81       	ldd	r21, Y+3	; 0x03
    3fe8:	9e 01       	movw	r18, r28
    3fea:	41 15       	cp	r20, r1
    3fec:	51 05       	cpc	r21, r1
    3fee:	f1 f0       	breq	.+60     	; 0x402c <free+0x92>
    3ff0:	ea 01       	movw	r28, r20
    3ff2:	f5 cf       	rjmp	.-22     	; 0x3fde <free+0x44>
    3ff4:	d3 83       	std	Z+3, r29	; 0x03
    3ff6:	c2 83       	std	Z+2, r28	; 0x02
    3ff8:	40 81       	ld	r20, Z
    3ffa:	51 81       	ldd	r21, Z+1	; 0x01
    3ffc:	84 0f       	add	r24, r20
    3ffe:	95 1f       	adc	r25, r21
    4000:	c8 17       	cp	r28, r24
    4002:	d9 07       	cpc	r29, r25
    4004:	59 f4       	brne	.+22     	; 0x401c <free+0x82>
    4006:	88 81       	ld	r24, Y
    4008:	99 81       	ldd	r25, Y+1	; 0x01
    400a:	84 0f       	add	r24, r20
    400c:	95 1f       	adc	r25, r21
    400e:	02 96       	adiw	r24, 0x02	; 2
    4010:	91 83       	std	Z+1, r25	; 0x01
    4012:	80 83       	st	Z, r24
    4014:	8a 81       	ldd	r24, Y+2	; 0x02
    4016:	9b 81       	ldd	r25, Y+3	; 0x03
    4018:	93 83       	std	Z+3, r25	; 0x03
    401a:	82 83       	std	Z+2, r24	; 0x02
    401c:	21 15       	cp	r18, r1
    401e:	31 05       	cpc	r19, r1
    4020:	29 f4       	brne	.+10     	; 0x402c <free+0x92>
    4022:	f0 93 60 03 	sts	0x0360, r31	; 0x800360 <__flp+0x1>
    4026:	e0 93 5f 03 	sts	0x035F, r30	; 0x80035f <__flp>
    402a:	3d c0       	rjmp	.+122    	; 0x40a6 <free+0x10c>
    402c:	e9 01       	movw	r28, r18
    402e:	fb 83       	std	Y+3, r31	; 0x03
    4030:	ea 83       	std	Y+2, r30	; 0x02
    4032:	49 91       	ld	r20, Y+
    4034:	59 91       	ld	r21, Y+
    4036:	c4 0f       	add	r28, r20
    4038:	d5 1f       	adc	r29, r21
    403a:	ec 17       	cp	r30, r28
    403c:	fd 07       	cpc	r31, r29
    403e:	61 f4       	brne	.+24     	; 0x4058 <free+0xbe>
    4040:	80 81       	ld	r24, Z
    4042:	91 81       	ldd	r25, Z+1	; 0x01
    4044:	84 0f       	add	r24, r20
    4046:	95 1f       	adc	r25, r21
    4048:	02 96       	adiw	r24, 0x02	; 2
    404a:	e9 01       	movw	r28, r18
    404c:	99 83       	std	Y+1, r25	; 0x01
    404e:	88 83       	st	Y, r24
    4050:	82 81       	ldd	r24, Z+2	; 0x02
    4052:	93 81       	ldd	r25, Z+3	; 0x03
    4054:	9b 83       	std	Y+3, r25	; 0x03
    4056:	8a 83       	std	Y+2, r24	; 0x02
    4058:	e0 e0       	ldi	r30, 0x00	; 0
    405a:	f0 e0       	ldi	r31, 0x00	; 0
    405c:	12 96       	adiw	r26, 0x02	; 2
    405e:	8d 91       	ld	r24, X+
    4060:	9c 91       	ld	r25, X
    4062:	13 97       	sbiw	r26, 0x03	; 3
    4064:	00 97       	sbiw	r24, 0x00	; 0
    4066:	19 f0       	breq	.+6      	; 0x406e <free+0xd4>
    4068:	fd 01       	movw	r30, r26
    406a:	dc 01       	movw	r26, r24
    406c:	f7 cf       	rjmp	.-18     	; 0x405c <free+0xc2>
    406e:	8d 91       	ld	r24, X+
    4070:	9c 91       	ld	r25, X
    4072:	11 97       	sbiw	r26, 0x01	; 1
    4074:	9d 01       	movw	r18, r26
    4076:	2e 5f       	subi	r18, 0xFE	; 254
    4078:	3f 4f       	sbci	r19, 0xFF	; 255
    407a:	82 0f       	add	r24, r18
    407c:	93 1f       	adc	r25, r19
    407e:	20 91 5d 03 	lds	r18, 0x035D	; 0x80035d <__brkval>
    4082:	30 91 5e 03 	lds	r19, 0x035E	; 0x80035e <__brkval+0x1>
    4086:	28 17       	cp	r18, r24
    4088:	39 07       	cpc	r19, r25
    408a:	69 f4       	brne	.+26     	; 0x40a6 <free+0x10c>
    408c:	30 97       	sbiw	r30, 0x00	; 0
    408e:	29 f4       	brne	.+10     	; 0x409a <free+0x100>
    4090:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <__flp+0x1>
    4094:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <__flp>
    4098:	02 c0       	rjmp	.+4      	; 0x409e <free+0x104>
    409a:	13 82       	std	Z+3, r1	; 0x03
    409c:	12 82       	std	Z+2, r1	; 0x02
    409e:	b0 93 5e 03 	sts	0x035E, r27	; 0x80035e <__brkval+0x1>
    40a2:	a0 93 5d 03 	sts	0x035D, r26	; 0x80035d <__brkval>
    40a6:	df 91       	pop	r29
    40a8:	cf 91       	pop	r28
    40aa:	08 95       	ret

000040ac <memcmp>:
    40ac:	fb 01       	movw	r30, r22
    40ae:	dc 01       	movw	r26, r24
    40b0:	04 c0       	rjmp	.+8      	; 0x40ba <memcmp+0xe>
    40b2:	8d 91       	ld	r24, X+
    40b4:	01 90       	ld	r0, Z+
    40b6:	80 19       	sub	r24, r0
    40b8:	21 f4       	brne	.+8      	; 0x40c2 <memcmp+0x16>
    40ba:	41 50       	subi	r20, 0x01	; 1
    40bc:	50 40       	sbci	r21, 0x00	; 0
    40be:	c8 f7       	brcc	.-14     	; 0x40b2 <memcmp+0x6>
    40c0:	88 1b       	sub	r24, r24
    40c2:	99 0b       	sbc	r25, r25
    40c4:	08 95       	ret

000040c6 <_exit>:
    40c6:	f8 94       	cli

000040c8 <__stop_program>:
    40c8:	ff cf       	rjmp	.-2      	; 0x40c8 <__stop_program>
